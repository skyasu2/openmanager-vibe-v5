# Quick Deploy to VM - Cloud Shell에서 실행

# 1. Cloud Shell 열기:
https://shell.cloud.google.com/?project=openmanager-free-tier

# 2. VM SSH 접속:
gcloud compute ssh mcp-server --zone=us-central1-a

# 3. 한번에 복사해서 붙여넣기 (전체 선택 후 복사):

cat > /tmp/deploy-api.sh << 'DEPLOY_SCRIPT'
#!/bin/bash
echo "🚀 Deploying Management API v2.0..."

# 백업
cp /tmp/simple.js /tmp/simple.backup 2>/dev/null || true

# 새 서버 생성 (Express 없이)
cat > /tmp/mgmt-api.js << 'EOF'
const http = require('http');
const { exec } = require('child_process');
const fs = require('fs');
const url = require('url');

const PORT = 10000;
const TOKEN = 'f3b06ab39909bb0bdd61f15ae0d5d1deb03b9c5d6a6dc00daba684ec49035c00';

function validateToken(req) {
  const auth = req.headers['authorization'];
  return auth && auth.replace('Bearer ', '') === TOKEN;
}

function executeCmd(cmd) {
  return new Promise(resolve => {
    exec(cmd, (err, stdout, stderr) => {
      resolve({ success: !err, stdout, stderr, error: err?.message });
    });
  });
}

const routes = {
  '/health': () => ({ status: 'healthy', version: '2.0', port: PORT }),
  '/api/status': () => {
    const os = require('os');
    return {
      status: 'online',
      hostname: os.hostname(),
      memory: { free: os.freemem(), total: os.totalmem() },
      uptime: os.uptime()
    };
  },
  '/api/logs': async (req) => {
    if (!validateToken(req)) return { error: 'Unauthorized' };
    const result = await executeCmd('tail -50 /tmp/vm-api.log 2>/dev/null || echo "No logs"');
    return { logs: result.stdout };
  },
  '/api/pm2': async (req) => {
    if (!validateToken(req)) return { error: 'Unauthorized' };
    const result = await executeCmd('pm2 jlist');
    try {
      return { processes: JSON.parse(result.stdout || '[]') };
    } catch(e) {
      return { error: 'Failed to parse PM2 list' };
    }
  },
  '/api/execute': async (req, body) => {
    if (!validateToken(req)) return { error: 'Unauthorized' };
    if (!body.command) return { error: 'Command required' };
    return await executeCmd(body.command);
  }
};

const server = http.createServer(async (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Content-Type', 'application/json');
  
  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  let body = '';
  req.on('data', chunk => body += chunk);
  req.on('end', async () => {
    const path = url.parse(req.url).pathname;
    const handler = routes[path];
    
    let result;
    if (handler) {
      try {
        const parsed = body ? JSON.parse(body) : {};
        result = await handler(req, parsed);
        res.writeHead(result.error === 'Unauthorized' ? 401 : 200);
      } catch(e) {
        result = { error: e.message };
        res.writeHead(500);
      }
    } else {
      result = { error: 'Not found', path };
      res.writeHead(404);
    }
    
    res.end(JSON.stringify(result));
    
    // Log
    const log = `[${new Date().toISOString()}] ${req.method} ${path} - ${res.statusCode}\n`;
    fs.appendFileSync('/tmp/vm-api.log', log);
  });
});

server.listen(PORT, '0.0.0.0', () => {
  console.log('Management API v2.0 running on port', PORT);
});
EOF

# PM2로 전환
pm2 stop simple 2>/dev/null || true
pm2 delete simple 2>/dev/null || true
pm2 start /tmp/mgmt-api.js --name mgmt-api
pm2 save

echo "✅ Deployment complete!"
pm2 status
DEPLOY_SCRIPT

# 실행 및 정리
chmod +x /tmp/deploy-api.sh && /tmp/deploy-api.sh && rm /tmp/deploy-api.sh

# 4. 테스트:
curl http://localhost:10000/health