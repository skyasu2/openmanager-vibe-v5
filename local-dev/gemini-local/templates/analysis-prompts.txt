# Gemini CLI 분석 프롬프트 템플릿

## 코드 분석 프롬프트

### 인증 로직 분석
"이 코드의 인증 흐름을 분석하고 문제점 3가지를 지적해주세요."

### 성능 최적화
"Vercel 무료 티어(메모리 512MB)에서 이 코드의 성능 문제점과 해결책을 제시해주세요."

### 에러 디버깅
"이 에러의 원인과 해결 방법을 3줄로 설명해주세요."

## 파일 구조 파악

### 주요 컴포넌트 파악
"이 파일들의 주요 역할을 한 줄씩 설명해주세요."

### 의존성 분석
"이 컴포넌트가 사용하는 외부 의존성과 그 용도를 나열해주세요."

## 코드 생성 프롬프트

### 컴포넌트 생성
"TypeScript와 Tailwind CSS를 사용하여 [컴포넌트명] 컴포넌트를 생성해주세요. 기존 코드 스타일을 따라주세요."

### 유틸리티 함수
"한국 시간(KST)을 'YYYY-MM-DD HH:mm:ss' 형식으로 반환하는 함수를 작성해주세요."

### 테스트 코드
"이 함수에 대한 Vitest 단위 테스트를 작성해주세요."

## 문제 해결 프롬프트

### 빌드 에러
"이 TypeScript 빌드 에러의 원인과 수정 방법을 제시해주세요."

### 배포 문제
"Vercel 배포 실패 로그를 분석하고 해결책을 제시해주세요."

### 메모리 최적화
"이 코드의 메모리 사용량을 줄이는 방법 3가지를 제안해주세요."

## 효율적인 사용 팁

1. **구체적인 질문**: "분석해주세요" → "인증 로직의 문제점 3가지"
2. **컨텍스트 제공**: 파일 경로나 관련 정보 함께 전달
3. **결과물 형식 지정**: "3줄 요약", "코드로 작성", "목록으로 정리"

## 사용 예시

```bash
# 파일 분석
cat src/app/page.tsx | gemini -p "인증 후 리다이렉션 로직의 문제점과 해결책"

# 에러 해결
npm run build 2>&1 | tail -20 | gemini -p "빌드 에러 원인과 해결 방법 3줄 요약"

# 코드 생성
echo "로딩 스피너" | gemini -p "Tailwind CSS 애니메이션 포함, TypeScript 컴포넌트"
```