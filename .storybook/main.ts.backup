import type { StorybookConfig } from '@storybook/nextjs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const config: StorybookConfig = {
  stories: ['../src/**/*.stories.@(js|jsx|ts|tsx|mdx)'],

  addons: [
    '@storybook/addon-links',
    '@storybook/addon-docs',
    '@storybook/addon-a11y',
    '@storybook/addon-actions',
  ],

  framework: {
    name: '@storybook/nextjs',
    options: {
      nextConfigPath: '../next.config.mjs',
    },
  },

  typescript: {
    check: true,
    reactDocgen: 'react-docgen-typescript',
    reactDocgenTypescriptOptions: {
      shouldExtractLiteralValuesFromEnum: true,
      propFilter: prop =>
        prop.parent ? !/node_modules/.test(prop.parent.fileName) : true,
    },
  },

  core: {
    disableTelemetry: true,
  },

  docs: {},

  staticDirs: ['../public'],

  env: config => ({
    ...config,
    // 스토리북 환경에서는 안전한 목업 모드 사용
    STORYBOOK: 'true',
    NODE_ENV: 'development',
    DISABLE_CRON_JOBS: 'true',
    FORCE_MOCK_REDIS: 'true',
    FORCE_MOCK_GOOGLE_AI: 'true',
    REDIS_CONNECTION_DISABLED: 'true',
    DISABLE_HEALTH_CHECK: 'true',
    HEALTH_CHECK_CONTEXT: 'false',
    NEXT_PUBLIC_STORYBOOK_MODE: 'true',
  }),

  webpackFinal: async config => {
    if (config.resolve) {
      config.resolve.alias = {
        ...config.resolve.alias,
        '@': path.resolve(__dirname, '../src'),
      };

      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        net: false,
        tls: false,
        crypto: false,
        stream: false,
        buffer: false,
        util: false,
        url: false,
        querystring: false,
        path: false,
        os: false,
        child_process: false,
      };
    }

    // 🚀 강력한 번들 크기 최적화 설정
    if (config.optimization) {
      config.optimization = {
        ...config.optimization,
        // 코드 스플리팅 최적화 - 더 세밀한 분할
        splitChunks: {
          chunks: 'all',
          minSize: 30000, // 30KB
          maxSize: 500000, // 500KB로 현실적 조정
          maxAsyncRequests: 15,
          maxInitialRequests: 8,
          cacheGroups: {
            // React 관련 라이브러리 (최우선)
            react: {
              test: /[\\/]node_modules[\\/](react|react-dom)[\\/]/,
              name: 'react-vendor',
              chunks: 'all',
              priority: 30,
              maxSize: 300000, // 300KB
            },
            // Next.js 관련 라이브러리
            nextjs: {
              test: /[\\/]node_modules[\\/]next[\\/]/,
              name: 'nextjs-vendor',
              chunks: 'all',
              priority: 25,
              maxSize: 200000, // 200KB
            },
            // UI 라이브러리 (세분화)
            ui: {
              test: /[\\/]node_modules[\\/](@radix-ui|lucide-react|clsx|class-variance-authority)[\\/]/,
              name: 'ui-vendor',
              chunks: 'all',
              priority: 20,
              maxSize: 150000, // 150KB
            },
            // 애니메이션 라이브러리
            animation: {
              test: /[\\/]node_modules[\\/](framer-motion|lottie-react)[\\/]/,
              name: 'animation-vendor',
              chunks: 'all',
              priority: 18,
              maxSize: 120000, // 120KB
            },
            // 유틸리티 라이브러리
            utils: {
              test: /[\\/]node_modules[\\/](lodash|date-fns|uuid)[\\/]/,
              name: 'utils-vendor',
              chunks: 'all',
              priority: 15,
              maxSize: 100000, // 100KB
            },
            // 기타 vendor 라이브러리 (작게 분할)
            vendor: {
              test: /[\\/]node_modules[\\/]/,
              name: 'vendor',
              chunks: 'all',
              priority: 10,
              maxSize: 80000, // 80KB로 제한
            },
          },
        },
        // 트리 셰이킹 활성화
        usedExports: true,
        sideEffects: false,
        // 모듈 연결 최적화
        concatenateModules: true,
      };
    }

    // 🎯 강화된 성능 최적화 설정
    config.performance = {
      hints: 'warning', // 오류 대신 경고로 완화
      maxAssetSize: 400000, // 400KB로 현실적 조정
      maxEntrypointSize: 800000, // 800KB로 현실적 조정
    };

    // 📦 번들 분석기 설정 (개발 시에만)
    if (process.env.ANALYZE_BUNDLE === 'true') {
      const { BundleAnalyzerPlugin } = await import('webpack-bundle-analyzer');
      if (!config.plugins) {
        config.plugins = [];
      }
      config.plugins.push(
        new BundleAnalyzerPlugin({
          analyzerMode: 'static',
          reportFilename: 'storybook-bundle-report.html',
          openAnalyzer: false,
        })
      );
    }

    // 🚫 불필요한 모듈 제외
    config.externals = {
      ...(config.externals || {}),
      // 서버 사이드 모듈들 제외
      'fs': 'commonjs fs',
      'path': 'commonjs path',
      'crypto': 'commonjs crypto',
      'stream': 'commonjs stream',
      'buffer': 'commonjs buffer',
      'util': 'commonjs util',
      'url': 'commonjs url',
      'querystring': 'commonjs querystring',
      'os': 'commonjs os',
      'child_process': 'commonjs child_process',
    };

    return config;
  },
};

export default config;
