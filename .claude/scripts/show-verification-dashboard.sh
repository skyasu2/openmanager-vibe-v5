#!/bin/bash

# üìä AI ÍµêÏ∞® Í≤ÄÏ¶ù ÎåÄÏãúÎ≥¥Îìú
#
# Ïö©ÎèÑ: Ïã§ÏãúÍ∞Ñ Í≤ÄÏ¶ù ÏÉÅÌÉúÎ•º ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú ÌëúÏãú
# Ïã§Ìñâ: ./show-verification-dashboard.sh [--watch]

set -e

# === ÏÑ§Ï†ï ===
STATUS_FILE="/mnt/d/cursor/openmanager-vibe-v5/.claude/verification-status.json"
QUEUE_FILE="/mnt/d/cursor/openmanager-vibe-v5/.claude/cross-verification-queue.txt"
LOG_FILE="/mnt/d/cursor/openmanager-vibe-v5/.claude/cross-verification.log"
UPDATE_SCRIPT="/mnt/d/cursor/openmanager-vibe-v5/.claude/scripts/update-verification-status.sh"

# === ÏÉâÏÉÅ ÏΩîÎìú ===
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# === Ìï®Ïàò Ï†ïÏùò ===

# Ìó§Îçî ÌëúÏãú
show_header() {
    clear
    echo -e "${PURPLE}${BOLD}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}${BOLD}‚ïë     ü§ñ AI ÍµêÏ∞® Í≤ÄÏ¶ù ÏãúÏä§ÌÖú Î™®ÎãàÌÑ∞ÎßÅ ÎåÄÏãúÎ≥¥Îìú v2.0        ‚ïë${NC}"
    echo -e "${PURPLE}${BOLD}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
}

# ÌÜµÍ≥Ñ ÌëúÏãú
show_statistics() {
    if [ -f "$STATUS_FILE" ]; then
        local total_reviews=$(jq -r '.statistics.totalReviews' "$STATUS_FILE")
        local security_issues=$(jq -r '.statistics.securityIssuesFound' "$STATUS_FILE")
        local pending_count=$(jq -r '.pending | length' "$STATUS_FILE")
        
        echo -e "${CYAN}${BOLD}üìä Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ${NC}"
        echo -e "‚îú‚îÄ Ï¥ù Í≤ÄÏ¶ù ÏàòÌñâ: ${GREEN}$total_reviews${NC}Ìöå"
        echo -e "‚îú‚îÄ Î≥¥Ïïà Ïù¥Ïäà Î∞úÍ≤¨: ${RED}$security_issues${NC}Í∞ú"
        echo -e "‚îî‚îÄ ÎåÄÍ∏∞ Ï§ëÏù∏ ÌååÏùº: ${YELLOW}$pending_count${NC}Í∞ú"
        echo
    fi
}

# Î†àÎ≤®Î≥Ñ ÌÜµÍ≥Ñ
show_level_stats() {
    if [ -f "$STATUS_FILE" ]; then
        local level1=$(jq -r '.byLevel.LEVEL_1.count' "$STATUS_FILE")
        local level2=$(jq -r '.byLevel.LEVEL_2.count' "$STATUS_FILE")
        local level3=$(jq -r '.byLevel.LEVEL_3.count' "$STATUS_FILE")
        
        echo -e "${CYAN}${BOLD}üéØ Î†àÎ≤®Î≥Ñ Í≤ÄÏ¶ù ÌòÑÌô©${NC}"
        echo -e "‚îú‚îÄ Level 1 (Îπ†Î•∏ Í≤ÄÏ¶ù): ${GREEN}$level1${NC}Ìöå"
        echo -e "‚îú‚îÄ Level 2 (ÌëúÏ§Ä Í≤ÄÏ¶ù): ${YELLOW}$level2${NC}Ìöå"
        echo -e "‚îî‚îÄ Level 3 (ÏôÑÏ†Ñ Í≤ÄÏ¶ù): ${RED}$level3${NC}Ìöå"
        echo
    fi
}

# ÏàòÏ†ï ÏÉÅÌÉú ÌëúÏãú
show_fix_status() {
    if [ -f "$STATUS_FILE" ]; then
        local auto_applied=$(jq -r '.fixes.auto_applied | length' "$STATUS_FILE" 2>/dev/null || echo "0")
        local pending_confirm=$(jq -r '.fixes.pending_confirmation | length' "$STATUS_FILE" 2>/dev/null || echo "0")
        local manual_required=$(jq -r '.fixes.manual_required | length' "$STATUS_FILE" 2>/dev/null || echo "0")
        local total_fixes=$(jq -r '.fixes.statistics.total_fixes_applied' "$STATUS_FILE" 2>/dev/null || echo "0")
        local success_rate=$(jq -r '.fixes.statistics.auto_fix_success_rate' "$STATUS_FILE" 2>/dev/null || echo "0")
        
        echo -e "${CYAN}${BOLD}üîß ÏàòÏ†ï ÌòÑÌô©${NC}"
        echo -e "‚îú‚îÄ ÏûêÎèô ÏàòÏ†ï ÏôÑÎ£å: ${GREEN}$auto_applied${NC}Í∞ú"
        echo -e "‚îú‚îÄ ÌôïÏù∏ ÎåÄÍ∏∞ Ï§ë: ${YELLOW}$pending_confirm${NC}Í∞ú"
        echo -e "‚îú‚îÄ ÏàòÎèô ÏàòÏ†ï ÌïÑÏöî: ${RED}$manual_required${NC}Í∞ú"
        echo -e "‚îú‚îÄ Ï¥ù ÏàòÏ†ï Ï†ÅÏö©: ${BLUE}$total_fixes${NC}Í∞ú"
        echo -e "‚îî‚îÄ ÏûêÎèô ÏàòÏ†ï ÏÑ±Í≥µÎ•†: ${PURPLE}${success_rate}%${NC}"
        echo
        
        # ÎåÄÍ∏∞ Ï§ëÏù∏ ÌôïÏù∏ Ìï≠Î™© ÌëúÏãú
        if [ "$pending_confirm" -gt 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è ÌôïÏù∏Ïù¥ ÌïÑÏöîÌïú ÏàòÏ†ïÏÇ¨Ìï≠:${NC}"
            jq -r '.fixes.pending_confirmation[]' "$STATUS_FILE" 2>/dev/null | head -3 | while IFS= read -r item; do
                echo -e "  ‚Ä¢ $item"
            done
            if [ "$pending_confirm" -gt 3 ]; then
                echo -e "  ... Ïô∏ $((pending_confirm - 3))Í∞ú"
            fi
            echo
        fi
    fi
}

# AI Ìï†Îãπ ÌÜµÍ≥Ñ ÌëúÏãú
show_ai_assignments() {
    if [ -f "$STATUS_FILE" ]; then
        # AIÎ≥Ñ Ìï†Îãπ ÌÜµÍ≥Ñ
        local gemini_assigned=$(jq -r '.ai_assignments.gemini.assigned_count' "$STATUS_FILE" 2>/dev/null || echo "0")
        local gemini_completed=$(jq -r '.ai_assignments.gemini.completed_count' "$STATUS_FILE" 2>/dev/null || echo "0")
        local codex_assigned=$(jq -r '.ai_assignments.codex.assigned_count' "$STATUS_FILE" 2>/dev/null || echo "0")
        local codex_completed=$(jq -r '.ai_assignments.codex.completed_count' "$STATUS_FILE" 2>/dev/null || echo "0")
        local qwen_assigned=$(jq -r '.ai_assignments.qwen.assigned_count' "$STATUS_FILE" 2>/dev/null || echo "0")
        local qwen_completed=$(jq -r '.ai_assignments.qwen.completed_count' "$STATUS_FILE" 2>/dev/null || echo "0")
        
        echo -e "${CYAN}${BOLD}ü§ñ AI Ìï†Îãπ ÌòÑÌô© (ÎùºÏö¥Îìú Î°úÎπà)${NC}"
        
        # Ìï†Îãπ ÎπÑÏú® Í≥ÑÏÇ∞
        local total_assigned=$((gemini_assigned + codex_assigned + qwen_assigned))
        if [ "$total_assigned" -gt 0 ]; then
            local gemini_percent=$((gemini_assigned * 100 / total_assigned))
            local codex_percent=$((codex_assigned * 100 / total_assigned))
            local qwen_percent=$((qwen_assigned * 100 / total_assigned))
            
            echo -e "‚îú‚îÄ ${GREEN}Gemini${NC}: $gemini_assigned/$gemini_completed (${gemini_percent}%)"
            echo -e "‚îú‚îÄ ${YELLOW}Codex${NC}: $codex_assigned/$codex_completed (${codex_percent}%)"
            echo -e "‚îú‚îÄ ${BLUE}Qwen${NC}: $qwen_assigned/$qwen_completed (${qwen_percent}%)"
            echo -e "‚îî‚îÄ Ï¥ù Ìï†Îãπ: ${PURPLE}$total_assigned${NC}Í∞ú ÏûëÏóÖ"
            
            # Í∑†Îì± Î∂ÑÎ∞∞ ÌôïÏù∏
            local variance=$((gemini_percent > codex_percent ? gemini_percent - codex_percent : codex_percent - gemini_percent))
            local variance2=$((codex_percent > qwen_percent ? codex_percent - qwen_percent : qwen_percent - codex_percent))
            local max_variance=$((variance > variance2 ? variance : variance2))
            
            if [ "$max_variance" -le 10 ]; then
                echo -e "   ${GREEN}‚úÖ Í∑†Îì± Î∂ÑÎ∞∞ ÏñëÌò∏ (Ìé∏Ï∞® ${max_variance}%)${NC}"
            else
                echo -e "   ${YELLOW}‚ö†Ô∏è Î∂ÑÎ∞∞ Î∂àÍ∑†Ìòï Í∞êÏßÄ (Ìé∏Ï∞® ${max_variance}%)${NC}"
            fi
        else
            echo -e "‚îú‚îÄ Gemini: -/-"
            echo -e "‚îú‚îÄ Codex: -/-"
            echo -e "‚îú‚îÄ Qwen: -/-"
            echo -e "‚îî‚îÄ ${YELLOW}ÏïÑÏßÅ Ìï†ÎãπÎêú ÏûëÏóÖ ÏóÜÏùå${NC}"
        fi
        echo
    fi
}

# ÎåÄÍ∏∞ ÌÅê ÌëúÏãú
show_pending_queue() {
    echo -e "${CYAN}${BOLD}üìã Í≤ÄÏ¶ù ÎåÄÍ∏∞ ÌÅê${NC}"
    
    if [ -f "$QUEUE_FILE" ] && [ -s "$QUEUE_FILE" ]; then
        local count=0
        while IFS=: read -r file level timestamp tool; do
            if [ -n "$file" ]; then
                count=$((count + 1))
                # ÌååÏùºÎ™ÖÎßå Ï∂îÏ∂ú (Í≤ΩÎ°ú Ï†úÍ±∞)
                local filename=$(basename "$file" 2>/dev/null || echo "$file")
                
                # Î†àÎ≤®Ïóê Îî∞Î•∏ ÏÉâÏÉÅ
                local level_color=""
                case "$level" in
                    "LEVEL_1") level_color="${GREEN}" ;;
                    "LEVEL_2") level_color="${YELLOW}" ;;
                    "LEVEL_3"|"LEVEL_3_CRITICAL") level_color="${RED}" ;;
                    *) level_color="${NC}" ;;
                esac
                
                echo -e "‚îú‚îÄ $count. ${filename} ${level_color}[$level]${NC} (ÎèÑÍµ¨: $tool)"
            fi
        done < "$QUEUE_FILE"
        echo -e "‚îî‚îÄ Ï¥ù ${YELLOW}$count${NC}Í∞ú ÌååÏùº ÎåÄÍ∏∞ Ï§ë"
    else
        echo -e "‚îî‚îÄ ${GREEN}ÎåÄÍ∏∞ Ï§ëÏù∏ ÌååÏùº ÏóÜÏùå${NC}"
    fi
    echo
}

# ÏµúÍ∑º ÌôúÎèô ÌëúÏãú
show_recent_activity() {
    echo -e "${CYAN}${BOLD}üîÑ ÏµúÍ∑º ÌôúÎèô${NC}"
    
    if [ -f "$LOG_FILE" ]; then
        # ÏµúÍ∑º 5Í∞ú Ìï≠Î™©Îßå ÌëúÏãú
        tail -5 "$LOG_FILE" | while IFS= read -r line; do
            # ANSI ÏÉâÏÉÅ ÏΩîÎìú Ï†úÍ±∞ÌïòÍ≥† ÌëúÏãú
            clean_line=$(echo "$line" | sed 's/\\033\[[0-9;]*m//g')
            
            # ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ï∂îÏ∂ú
            if [[ "$clean_line" =~ \[([^\]]+)\] ]]; then
                timestamp="${BASH_REMATCH[1]}"
                message="${clean_line#*] }"
                
                # Î©îÏãúÏßÄ ÌÉÄÏûÖÏóê Îî∞Î•∏ ÏïÑÏù¥ÏΩò
                icon="‚Ä¢"
                if [[ "$message" == *"Î≥¥Ïïà"* ]]; then
                    icon="üîê"
                elif [[ "$message" == *"ÏôÑÎ£å"* ]]; then
                    icon="‚úÖ"
                elif [[ "$message" == *"ÎåÄÍ∏∞"* ]]; then
                    icon="üìã"
                elif [[ "$message" == *"ÌôúÏÑ±Ìôî"* ]]; then
                    icon="üîÑ"
                fi
                
                echo -e "‚îú‚îÄ $icon ${BLUE}[$timestamp]${NC} $message"
            fi
        done
        echo -e "‚îî‚îÄ ${GREEN}Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...${NC}"
    else
        echo -e "‚îî‚îÄ ${YELLOW}Î°úÍ∑∏ ÌååÏùº ÏóÜÏùå${NC}"
    fi
    echo
}

# Ïã§Ìñâ Í∞ÄÎä•Ìïú Î™ÖÎ†πÏñ¥ ÌëúÏãú
show_commands() {
    echo -e "${CYAN}${BOLD}üöÄ Ïã§Ìñâ Í∞ÄÎä•Ìïú Î™ÖÎ†πÏñ¥${NC}"
    echo -e "‚îú‚îÄ ${GREEN}Task verification-specialist \"ÌååÏùºÎ™Ö Level 1\"${NC} - Îπ†Î•∏ Í≤ÄÏ¶ù"
    echo -e "‚îú‚îÄ ${YELLOW}Task ai-verification-coordinator \"Level 2 Í≤ÄÏ¶ù\"${NC} - ÌëúÏ§Ä Í≤ÄÏ¶ù"
    echo -e "‚îú‚îÄ ${RED}Task external-ai-orchestrator \"4-AI ÍµêÏ∞® Í≤ÄÏ¶ù\"${NC} - ÏôÑÏ†Ñ Í≤ÄÏ¶ù"
    echo -e "‚îú‚îÄ ${PURPLE}./auto-fix-from-verification.sh${NC} - ÏûêÎèô ÏàòÏ†ï Ïã§Ìñâ"
    echo -e "‚îú‚îÄ ${CYAN}./auto-fix-from-verification.sh --dry-run${NC} - ÏàòÏ†ï ÎØ∏Î¶¨Î≥¥Í∏∞"
    echo -e "‚îú‚îÄ ${BLUE}./auto-fix-from-verification.sh --auto${NC} - Î¨¥Ïù∏ ÏûêÎèô ÏàòÏ†ï"
    echo -e "‚îî‚îÄ ${BLUE}./show-verification-dashboard.sh --watch${NC} - Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ"
    echo
}

# ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ ÌëúÏãú
show_update_time() {
    if [ -f "$STATUS_FILE" ]; then
        local last_updated=$(jq -r '.lastUpdated' "$STATUS_FILE")
        echo -e "${BLUE}ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: $last_updated${NC}"
    fi
}

# === Î©îÏù∏ Î°úÏßÅ ===

# ÏÉÅÌÉú ÌååÏùº ÏóÖÎç∞Ïù¥Ìä∏
if [ -f "$UPDATE_SCRIPT" ]; then
    bash "$UPDATE_SCRIPT" 2>/dev/null || true
fi

# Watch Î™®Îìú ÌôïÏù∏
if [ "$1" == "--watch" ]; then
    # Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ Î™®Îìú
    while true; do
        show_header
        show_statistics
        show_level_stats
        show_ai_assignments
        show_fix_status
        show_pending_queue
        show_recent_activity
        show_commands
        show_update_time
        
        echo
        echo -e "${YELLOW}5Ï¥àÎßàÎã§ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®... (Ctrl+CÎ°ú Ï¢ÖÎ£å)${NC}"
        
        # ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if [ -f "$UPDATE_SCRIPT" ]; then
            bash "$UPDATE_SCRIPT" 2>/dev/null || true
        fi
        
        sleep 5
    done
else
    # Îã®Ïùº Ïã§Ìñâ Î™®Îìú
    show_header
    show_statistics
    show_level_stats
    show_ai_assignments
    show_fix_status
    show_pending_queue
    show_recent_activity
    show_commands
    show_update_time
fi