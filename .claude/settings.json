{
  "permissions": {
    "allow": [
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(claude mcp:*)",
      "Bash(pip install:*)",
      "Bash(source:*)",
      "Bash(uvx:*)",
      "Bash(mkdir:*)",
      "Bash(claude api restart)",
      "Bash(cp:*)",
      "Bash(bash scripts/mcp/reset.sh:*)",
      "Bash(cat:*)",
      "Bash(npx:*)",
      "Bash(NODE_OPTIONS='--max-old-space-size=8192' npx next dev)",
      "Bash(rm:*)",
      "Bash(NODE_OPTIONS='--max-old-space-size=8192' ./node_modules/.bin/next dev)",
      "Bash(NODE_OPTIONS='--max-old-space-size=8192' node node_modules/next/dist/bin/next dev)",
      "Bash(NODE_OPTIONS='--max-old-space-size=8192' npx next@15 dev)",
      "Bash(yarn install:*)",
      "Bash(pnpm install:*)",
      "Bash(mount)",
      "Bash(time touch:*)",
      "Bash(git config:*)",
      "Bash(sudo rm:*)",
      "Bash(echo:*)",
      "Bash(apt list:*)",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_close",
      "Bash(grep:*)",
      "Bash(uv:*)",
      "Bash(pip3 list:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(pip3 install:*)",
      "Bash(pipx:*)",
      "mcp__memory__search_nodes",
      "Bash(pip3:*)",
      "Bash(curl:*)",
      "Bash(bash scripts/security/check-hardcoded-secrets.sh:*)",
      "Bash(NEXT_PUBLIC_SUPABASE_URL=https://vnswjnltnhpsueosfhmw.supabase.co NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZuc3dqbmx0bmhwc3Vlb3NmaG13Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc5MjMzMjcsImV4cCI6MjA2MzQ5OTMyN30.09ApSnuXNv_yYVJWQWGpOFWw3tkLbxSA21k5sroChGU npm run dev)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(timeout 15s npm run dev)",
      "Bash(true)",
      "Bash(find:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "mcp__github__list_commits",
      "Bash(git fetch:*)",
      "mcp__filesystem__list_allowed_directories",
      "mcp__filesystem__directory_tree",
      "mcp__filesystem__create_directory",
      "mcp__filesystem__write_file",
      "mcp__memory__create_entities",
      "mcp__memory__create_relations",
      "mcp__memory__read_graph",
      "mcp__github__search_repositories",
      "mcp__time__get_current_time",
      "mcp__time__convert_time",
      "mcp__supabase__list_tables",
      "mcp__tavily-mcp__tavily-search",
      "mcp__tavily-mcp__tavily-extract",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__activate_project",
      "mcp__serena__find_symbol",
      "mcp__serena__find_referencing_symbols",
      "mcp__serena__search_for_pattern",
      "mcp__shadcn-ui__list_components",
      "mcp__shadcn-ui__get_component",
      "mcp__shadcn-ui__get_component_demo",
      "mcp__shadcn-ui__list_blocks",
      "mcp__shadcn-ui__get_component_metadata",
      "Bash(env)",
      "Bash(export:*)",
      "mcp__supabase__get_project_url",
      "mcp__supabase__get_anon_key",
      "mcp__supabase__search_docs",
      "mcp__supabase__execute_sql",
      "mcp__supabase__generate_typescript_types",
      "mcp__github__get_file_contents",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(claude --version)",
      "Bash(for i in {1..3})",
      "Bash(do echo \"진행 중... $i/3\")",
      "Bash(done)",
      "WebFetch(domain:ccusage.com)",
      "Bash(claude /security-review)",
      "Bash(claude:*)",
      "Bash(timeout:*)",
      "mcp__filesystem__list_directory",
      "mcp__filesystem__read_text_file",
      "Bash(time grep -r \"(api_key|secret|password|token)\\s*[:=]\\s*[''''\"\"][a-zA-Z0-9]{10,}[''''\"\"]\" src/ --include=\"*.ts\" --include=\"*.tsx\" --include=\"*.js\")",
      "Bash(time npm run test:quick)",
      "Bash(vercel:*)",
      "WebFetch(domain:openmanager-vibe-v5.vercel.app)",
      "WebFetch(domain:vercel.com)",
      "WebFetch(domain:status.vercel.com)",
      "WebFetch(domain:vercel-status.com)",
      "Bash(time curl:*)",
      "Bash(tmux ls:*)",
      "Bash(tmux:*)",
      "Bash(lsof:*)",
      "Bash(gcloud compute instances describe:*)",
      "Bash(nmap:*)",
      "Bash(nc:*)",
      "Bash(ping:*)",
      "Bash(gcloud:*)",
      "Bash(tar:*)",
      "Bash(apt-get:*)",
      "Bash(apt-get install:*)",
      "Bash(sudo snap install:*)",
      "Bash(git reset:*)",
      "Bash(gh auth:*)",
      "Bash(git remote get-url:*)",
      "Bash(gh repo view:*)",
      "Bash(git rev-parse:*)",
      "mcp__github__create_or_update_file",
      "mcp__github__push_files",
      "Bash(git remote set-url:*)",
      "Bash(git update-index:*)",
      "Bash(git gc:*)",
      "Bash(git commit:*)",
      "Bash(HUSKY=0 git commit -m \"fix: quickBenchmark 함수 반환 타입 수정 - BenchmarkReport에 type 속성 추가\")",
      "Bash(git check-ignore:*)"
    ],
    "deny": []
  },
  "statusLine": {
    "type": "command",
    "command": "input=$(cat); model_name=$(echo \"$input\" | jq -r '.model.display_name // \"Claude\"'); current_dir=$(echo \"$input\" | jq -r '.workspace.current_dir // \"unknown\"'); current_folder=$(basename \"$current_dir\" 2>/dev/null || echo \"workspace\"); username=$(whoami 2>/dev/null || echo \"user\"); git_info=\"\"; if [[ -d \".git\" ]] || git rev-parse --git-dir > /dev/null 2>&1; then branch=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null || \"detached\"); if [[ -n $(git status --porcelain 2>/dev/null) ]]; then git_status=\"*\"; else git_status=\"✓\"; fi; git_info=\" | 🌿 $branch$git_status\"; fi; printf \"🤖 %s | 📁 %s | 👤 %s%s\" \"$model_name\" \"$current_folder\" \"$username\" \"$git_info\""
  }
}