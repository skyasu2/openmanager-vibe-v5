#!/usr/bin/env node

/**
 * 🚀 g - Gemini 개발 도구 빠른 실행기
 * 
 * 사용법:
 *   ./tools/g "질문내용"                     # 빠른 채팅
 *   ./tools/g file src/app/page.tsx          # 파일 분석
 *   ./tools/g diff                           # Git diff 리뷰
 *   ./tools/g stats                          # 사용량 확인
 *   ./tools/g health                         # 헬스체크
 */

import GeminiDevTools from './gemini-dev-tools.js';

const tool = new GeminiDevTools();
const args = process.argv.slice(2);

// stdin 입력 감지 및 읽기
async function readStdin() {
  // TTY가 아니거나 readable이면 파이프 입력 가능성이 있음
  if (process.stdin.isTTY === true) {
    return null; // 파이프 입력이 없음
  }
  
  // stdin이 readable한 상태인지 확인
  if (!process.stdin.readable) {
    return null;
  }
  
  return new Promise((resolve, reject) => {
    let data = '';
    let resolved = false;
    const chunks = [];
    
    process.stdin.setEncoding('utf8');
    
    // 데이터가 있는지 즉시 확인
    process.stdin.on('readable', () => {
      let chunk;
      while (null !== (chunk = process.stdin.read())) {
        chunks.push(chunk);
      }
    });
    
    process.stdin.on('end', () => {
      if (!resolved) {
        resolved = true;
        data = chunks.join('');
        resolve(data.trim() || null);
      }
    });
    
    process.stdin.on('error', (err) => {
      if (!resolved) {
        resolved = true;
        resolve(null);
      }
    });
    
    // 타임아웃 설정
    setTimeout(() => {
      if (!resolved) {
        resolved = true;
        data = chunks.join('');
        resolve(data.trim() || null);
      }
    }, 100);
  });
}

async function showUsage() {
  console.log(`
🚀 g - Gemini 개발 도구 빠른 실행기

사용법:
  ./tools/g "질문내용"              빠른 채팅
  ./tools/g file <파일경로>         파일 분석
  ./tools/g diff                    Git diff 리뷰
  ./tools/g stats                   사용량 확인
  ./tools/g health                  헬스체크
  ./tools/g clear                   컨텍스트 초기화
  ./tools/g memory [cmd]            메모리 관리

파이프 입력:
  echo "코드" | ./tools/g
  git diff | ./tools/g "리뷰해주세요"
  cat file.txt | ./tools/g

예시:
  ./tools/g "TypeScript 에러 해결법"
  ./tools/g file src/app/page.tsx
  ./tools/g diff "SOLID 원칙 관점에서"
  `);
}

async function run() {
  try {
    // stdin 입력 확인
    const stdinInput = await readStdin();
    
    // 파이프 입력이 있고 인자가 없으면 사용법 표시 대신 바로 처리
    if (stdinInput && args.length === 0) {
      const result = await tool.executeGemini([], { 
        pipeInput: stdinInput 
      });
      console.log(result.stdout);
      return;
    }
    
    // 인자가 없고 파이프 입력도 없으면 사용법 표시
    if (args.length === 0 && !stdinInput) {
      await showUsage();
      process.exit(0);
    }
    
    const command = args[0];
    
    switch (command) {
      case 'file':
        if (args.length < 2) {
          console.error('❌ 파일 경로를 입력해주세요');
          process.exit(1);
        }
        const filePath = args[1];
        const question = args.slice(2).join(' ') || "이 파일을 분석해주세요";
        const result = await tool.analyzeFile(filePath, question);
        console.log(result);
        break;
        
      case 'diff':
        const diffMessage = args.slice(1).join(' ') || "변경사항을 리뷰해주세요";
        const diffResult = await tool.analyzeGitDiff(diffMessage);
        console.log(diffResult);
        break;
        
      case 'stats':
        const stats = await tool.getStats();
        console.log(stats);
        break;
        
      case 'health':
        const health = await tool.healthCheck();
        console.log(JSON.stringify(health, null, 2));
        break;
        
      case 'clear':
        const clearResult = await tool.clearContext();
        console.log(clearResult);
        break;
        
      case 'compress':
        const compressResult = await tool.compressContext();
        console.log(compressResult);
        break;
        
      case 'memory':
        const memoryArgs = args.slice(1);
        const memoryResult = await tool.systemCommands.memoryCommand(...memoryArgs);
        console.log(memoryResult);
        break;
        
      default:
        // 파이프 입력이 있으면 합쳐서 처리
        if (stdinInput) {
          const prompt = args.join(' ');
          const combinedInput = prompt ? `${stdinInput}\n\n${prompt}` : stdinInput;
          const result = await tool.executeGemini([], { 
            pipeInput: combinedInput 
          });
          console.log(result.stdout);
        } else {
          // 기본적으로 채팅으로 처리
          const chatResult = await tool.quickChat(args.join(' '));
          console.log(chatResult);
        }
    }
  } catch (error) {
    console.error('❌ 오류:', error.message);
    process.exit(1);
  }
}

run();