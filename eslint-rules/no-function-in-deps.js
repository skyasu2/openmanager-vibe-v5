/**
 * üõ°Ô∏è ESLint Custom Rule: no-function-in-deps
 * 
 * React Error #310 "Maximum update depth exceeded" Î∞©ÏßÄÎ•º ÏúÑÌïú Ïª§Ïä§ÌÖÄ Î£∞
 * useEffect, useCallback, useMemo ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ÏóêÏÑú Ìï®Ïàò Ï∞∏Ï°∞Î•º Í∞êÏßÄÌïòÍ≥† Í≤ΩÍ≥†
 * 
 * AI ÍµêÏ∞®Í≤ÄÏ¶ù Í≤∞Í≥º Î∞òÏòÅ:
 * - Claude AÏïà: Í∏∞Î≥∏ Ìï®Ïàò Í∞êÏßÄ Î£∞ (Í∏∞Î≥∏Ïïà)
 * - Gemini Ï†úÏïà: AST Î∂ÑÏÑùÏúºÎ°ú Ìï®Ïàò ÌÉÄÏûÖ Ï†ïÌôï Í∞êÏßÄ (7.5/10)
 * - Codex Ï†úÏïà: React hooks Ï†ÑÏö© Í≤ÄÏ¶ù Í∞ïÌôî (8.2/10)
 * - Qwen Ï†úÏïà: ÏÑ±Îä• ÏµúÏ†ÅÌôî (6.8/10)
 */

module.exports = {
  meta: {
    type: 'problem', // Î¨∏Ï†ú Ïú†Ìòï (layout, problem, suggestion)
    docs: {
      description: 'useEffect, useCallback, useMemo ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ÏóêÏÑú Ìï®Ïàò Ï∞∏Ï°∞ Í∏àÏßÄ',
      category: 'Possible Errors',
      recommended: true,
      url: null, // Î¨∏ÏÑú URL (ÌïÑÏöîÏãú Ï∂îÍ∞Ä)
    },
    fixable: null, // ÏûêÎèô ÏàòÏ†ï Î∂àÍ∞Ä (ÏàòÎèô ÏàòÏ†ï ÌïÑÏöî)
    schema: [], // ÏòµÏÖò Ïä§ÌÇ§Îßà (ÌòÑÏû¨Îäî ÏóÜÏùå)
    messages: {
      noFunctionInDeps: '‚ö†Ô∏è React Error #310 ÏúÑÌóò: {{hookName}} ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥Ïóê Ìï®Ïàò "{{funcName}}"Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§. useCallbackÏúºÎ°ú Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÌïòÍ±∞ÎÇò ÏùòÏ°¥ÏÑ±ÏóêÏÑú Ï†úÍ±∞ÌïòÏÑ∏Ïöî.',
      noObjectInDeps: '‚ö†Ô∏è React Error #310 ÏúÑÌóò: {{hookName}} ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥Ïóê Í∞ùÏ≤¥ "{{objName}}"Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§. primitive Í∞íÏúºÎ°ú Î∂ÑÌï¥ÌïòÍ±∞ÎÇò useMemoÎ°ú Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÌïòÏÑ∏Ïöî.',
      suspiciousCallback: 'üí° ÏÑ±Îä• ÏµúÏ†ÅÌôî: useCallbackÏóêÏÑú Îã§Î•∏ Ìï®ÏàòÎ•º Ìò∏Ï∂úÌïòÍ≥† ÏûàÏäµÎãàÎã§. Ï≤¥Ïù∏ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.',
    },
  },

  create(context) {
    const sourceCode = context.getSourceCode();
    
    // React hooks Î™©Î°ù (ÌôïÏû• Í∞ÄÎä•)
    const REACT_HOOKS = new Set([
      'useEffect',
      'useCallback', 
      'useMemo',
      'useLayoutEffect',
      'useImperativeHandle'
    ]);
    
    /**
     * Ìï®Ïàò Ï∞∏Ï°∞Ïù∏ÏßÄ ÌôïÏù∏ÌïòÎäî Ìó¨Ìçº Ìï®Ïàò
     */
    function isFunctionReference(node) {
      // 1. ÏßÅÏ†ë Ìï®Ïàò Ï∞∏Ï°∞: myFunction
      if (node.type === 'Identifier') {
        const scope = sourceCode.getScope(node);
        const variable = scope.set.get(node.name) || findVariableInScope(scope, node.name);
        
        if (variable) {
          // Ìï®Ïàò ÏÑ†Ïñ∏/ÌëúÌòÑÏãùÏúºÎ°ú Ï†ïÏùòÎêú Î≥ÄÏàòÏù∏ÏßÄ ÌôïÏù∏
          for (const def of variable.defs) {
            if (def.type === 'FunctionName' || 
                (def.type === 'Variable' && def.node.init && 
                 (def.node.init.type === 'FunctionExpression' || 
                  def.node.init.type === 'ArrowFunctionExpression'))) {
              return true;
            }
          }
        }
        
        // Ìï®ÏàòÎ™Ö Ìå®ÌÑ¥ÏúºÎ°ú Ï∂îÏ†ï (handle*, on*, *Callback, *Handler Îì±)
        const funcNamePatterns = /^(handle|on|get|set|fetch|update|create|delete|toggle|check|validate|process|render|format|parse|calculate)[A-Z].*|.*[Cc]allback$|.*[Hh]andler$/;
        if (funcNamePatterns.test(node.name)) {
          return true;
        }
      }
      
      // 2. Î©îÏÑúÎìú Ìò∏Ï∂ú: object.method
      if (node.type === 'MemberExpression' && !node.computed) {
        const propertyName = node.property.name;
        const methodPatterns = /^(bind|call|apply|then|catch|finally|push|pop|shift|unshift|sort|filter|map|reduce|forEach)$/;
        if (methodPatterns.test(propertyName)) {
          return true;
        }
      }
      
      // 3. Ìï®Ïàò Ìò∏Ï∂ú: myFunction()
      if (node.type === 'CallExpression') {
        return true;
      }
      
      return false;
    }
    
    /**
     * Í∞ùÏ≤¥ Ï∞∏Ï°∞Ïù∏ÏßÄ ÌôïÏù∏ÌïòÎäî Ìó¨Ìçº Ìï®Ïàò
     */
    function isObjectReference(node) {
      if (node.type === 'Identifier') {
        // Í∞ùÏ≤¥ Ìå®ÌÑ¥ Ï∂îÏ†ï (config, options, props, state Îì±)
        const objNamePatterns = /^(config|options|props|state|data|params|settings|context|store|service)$/i;
        return objNamePatterns.test(node.name);
      }
      
      if (node.type === 'MemberExpression') {
        return true; // object.propertyÎäî Ïû†Ïû¨Ï†Å Í∞ùÏ≤¥ Ï∞∏Ï°∞
      }
      
      return false;
    }
    
    /**
     * Ïä§ÏΩîÌîÑ Ï≤¥Ïù∏ÏóêÏÑú Î≥ÄÏàò Ï∞æÍ∏∞
     */
    function findVariableInScope(scope, name) {
      let currentScope = scope;
      while (currentScope) {
        const variable = currentScope.set.get(name);
        if (variable) return variable;
        currentScope = currentScope.upper;
      }
      return null;
    }
    
    /**
     * React Hook Ìò∏Ï∂ú Î∂ÑÏÑù
     */
    function checkReactHookCall(node) {
      if (node.type !== 'CallExpression') return;
      if (node.callee.type !== 'Identifier') return;
      
      const hookName = node.callee.name;
      if (!REACT_HOOKS.has(hookName)) return;
      
      // ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ Ï∞æÍ∏∞ (Îëê Î≤àÏß∏ Ïù∏Ïàò)
      let depsArray = null;
      if (hookName === 'useEffect' || hookName === 'useLayoutEffect') {
        depsArray = node.arguments[1]; // useEffect(fn, deps)
      } else if (hookName === 'useCallback' || hookName === 'useMemo') {
        depsArray = node.arguments[1]; // useCallback(fn, deps)
      } else if (hookName === 'useImperativeHandle') {
        depsArray = node.arguments[2]; // useImperativeHandle(ref, fn, deps)
      }
      
      if (!depsArray || depsArray.type !== 'ArrayExpression') return;
      
      // ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥Ïùò Í∞Å ÏöîÏÜå Í≤ÄÏÇ¨
      for (const element of depsArray.elements) {
        if (!element) continue; // sparse array Ï≤òÎ¶¨
        
        // Ìï®Ïàò Ï∞∏Ï°∞ Í≤ÄÏÇ¨
        if (isFunctionReference(element)) {
          const funcName = element.type === 'Identifier' ? element.name : sourceCode.getText(element);
          
          context.report({
            node: element,
            messageId: 'noFunctionInDeps',
            data: {
              hookName,
              funcName,
            },
          });
        }
        
        // Í∞ùÏ≤¥ Ï∞∏Ï°∞ Í≤ÄÏÇ¨ (Îçú Ï§ëÏöîÌïòÏßÄÎßå ÏÑ±Îä•Ïóê ÏòÅÌñ•)
        else if (isObjectReference(element)) {
          const objName = element.type === 'Identifier' ? element.name : sourceCode.getText(element);
          
          context.report({
            node: element,
            messageId: 'noObjectInDeps', 
            data: {
              hookName,
              objName,
            },
          });
        }
      }
      
      // useCallback ÌäπÎ≥Ñ Í≤ÄÏÇ¨: ÏΩúÎ∞± ÎÇ¥Î∂ÄÏóêÏÑú Îã§Î•∏ Ìï®Ïàò Ìò∏Ï∂úÌïòÎäîÏßÄ ÌôïÏù∏
      if (hookName === 'useCallback' && node.arguments[0]) {
        const callbackFn = node.arguments[0];
        if (callbackFn.type === 'ArrowFunctionExpression' || callbackFn.type === 'FunctionExpression') {
          // ÏΩúÎ∞± Ìï®Ïàò ÎÇ¥Î∂ÄÏóêÏÑú Ìï®Ïàò Ìò∏Ï∂ú ÌôïÏù∏ (Í∞ÑÎã®Ìïú Í≤ÄÏÇ¨)
          if (callbackFn.body && callbackFn.body.type === 'BlockStatement') {
            const hasNestedFunctionCall = callbackFn.body.body.some(stmt => {
              return stmt.type === 'ExpressionStatement' && 
                     stmt.expression && 
                     stmt.expression.type === 'CallExpression';
            });
            
            if (hasNestedFunctionCall) {
              context.report({
                node: callbackFn,
                messageId: 'suspiciousCallback',
              });
            }
          }
        }
      }
    }

    return {
      // AST ÎÖ∏Îìú Î∞©Î¨∏Ïûê Ìå®ÌÑ¥
      CallExpression(node) {
        checkReactHookCall(node);
      },
    };
  },
};