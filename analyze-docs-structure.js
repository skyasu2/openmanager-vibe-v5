const fs = require('fs');
const path = require('path');

function analyzeDocsStructure() {
    const docsPath = path.join(process.cwd(), 'docs');
    
    // Ï†ÑÏ≤¥ Î∂ÑÏÑù Í≤∞Í≥º
    const analysis = {
        totalFiles: 0,
        totalDirectories: 0,
        filesByDirectory: {},
        duplicateFilenames: {},
        fileSizes: {
            under1KB: 0,
            between1to10KB: 0,
            between10to50KB: 0,
            over50KB: 0
        },
        todoFiles: [],
        recentFiles: []
    };

    // Ïû¨Í∑ÄÏ†ÅÏúºÎ°ú ÎîîÎ†âÌÜ†Î¶¨ Ïä§Ï∫î
    function scanDirectory(dirPath, relativePath = '') {
        if (!fs.existsSync(dirPath)) return;
        
        const items = fs.readdirSync(dirPath);
        const dirFiles = [];
        
        items.forEach(item => {
            const itemPath = path.join(dirPath, item);
            const relativeItemPath = path.join(relativePath, item);
            const stat = fs.statSync(itemPath);
            
            if (stat.isDirectory()) {
                analysis.totalDirectories++;
                scanDirectory(itemPath, relativeItemPath);
            } else if (item.endsWith('.md')) {
                analysis.totalFiles++;
                dirFiles.push(item);
                
                // ÌååÏùº ÌÅ¨Í∏∞ Î∂ÑÏÑù
                const sizeKB = stat.size / 1024;
                if (sizeKB < 1) analysis.fileSizes.under1KB++;
                else if (sizeKB < 10) analysis.fileSizes.between1to10KB++;
                else if (sizeKB < 50) analysis.fileSizes.between10to50KB++;
                else analysis.fileSizes.over50KB++;
                
                // Ï§ëÎ≥µ ÌååÏùºÎ™Ö Ï≤¥ÌÅ¨
                const basename = path.basename(item);
                if (!analysis.duplicateFilenames[basename]) {
                    analysis.duplicateFilenames[basename] = [];
                }
                analysis.duplicateFilenames[basename].push({
                    path: relativeItemPath,
                    size: stat.size
                });
                
                // ÏµúÍ∑º ÏàòÏ†ï ÌååÏùº
                analysis.recentFiles.push({
                    path: relativeItemPath,
                    mtime: stat.mtime,
                    size: stat.size
                });
                
                // TODO/FIXME ÌååÏùº Ï≤¥ÌÅ¨
                try {
                    const content = fs.readFileSync(itemPath, 'utf-8');
                    if (/TODO|FIXME|ÏóÖÎç∞Ïù¥Ìä∏|outdated|deprecated/i.test(content)) {
                        analysis.todoFiles.push(relativeItemPath);
                    }
                } catch (err) {
                    // ÌååÏùº ÏùΩÍ∏∞ Ïã§Ìå® Ïãú Î¨¥Ïãú
                }
            }
        });
        
        if (dirFiles.length > 0) {
            analysis.filesByDirectory[relativePath || 'docs'] = dirFiles.length;
        }
    }
    
    scanDirectory(docsPath);
    
    // Ï§ëÎ≥µ ÌååÏùºÎ™ÖÏóêÏÑú Îã®Ïùº ÌååÏùº Ï†úÍ±∞
    Object.keys(analysis.duplicateFilenames).forEach(filename => {
        if (analysis.duplicateFilenames[filename].length === 1) {
            delete analysis.duplicateFilenames[filename];
        }
    });
    
    // ÏµúÍ∑º ÌååÏùº Ï†ïÎ†¨ (ÏµúÏã†Ïàú)
    analysis.recentFiles.sort((a, b) => b.mtime - a.mtime);
    analysis.recentFiles = analysis.recentFiles.slice(0, 10);
    
    return analysis;
}

// Î∂ÑÏÑù Ïã§Ìñâ
const analysis = analyzeDocsStructure();

console.log('=== docs ÎîîÎ†âÌÜ†Î¶¨ Ï†ÑÏ≤¥ Íµ¨Ï°∞ Î∂ÑÏÑù ===\n');

console.log('üìä Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ:');
console.log(`- Ï¥ù ÌååÏùº Ïàò: ${analysis.totalFiles}Í∞ú`);
console.log(`- Ï¥ù ÎîîÎ†âÌÜ†Î¶¨ Ïàò: ${analysis.totalDirectories}Í∞ú\n`);

console.log('üìÅ ÎîîÎ†âÌÜ†Î¶¨Î≥Ñ ÌååÏùº Ïàò:');
Object.entries(analysis.filesByDirectory)
    .sort((a, b) => b[1] - a[1])
    .forEach(([dir, count]) => {
        console.log(`  ${dir}: ${count}Í∞ú`);
    });
console.log();

console.log('üîç Ï§ëÎ≥µ ÌååÏùºÎ™Ö:');
Object.entries(analysis.duplicateFilenames).forEach(([filename, files]) => {
    console.log(`  ${filename}:`);
    files.forEach(file => {
        console.log(`    - ${file.path} (${Math.round(file.size/1024)}KB)`);
    });
    console.log();
});

console.log('üìä ÌååÏùº ÌÅ¨Í∏∞ Î∂ÑÌè¨:');
console.log(`  - 1KB ÎØ∏Îßå: ${analysis.fileSizes.under1KB}Í∞ú`);
console.log(`  - 1-10KB: ${analysis.fileSizes.between1to10KB}Í∞ú`);
console.log(`  - 10-50KB: ${analysis.fileSizes.between10to50KB}Í∞ú`);
console.log(`  - 50KB Ïù¥ÏÉÅ: ${analysis.fileSizes.over50KB}Í∞ú\n`);

console.log('‚ö†Ô∏è ÏóÖÎç∞Ïù¥Ìä∏ ÌïÑÏöî ÌååÏùº (TODO/FIXME/ÏóÖÎç∞Ïù¥Ìä∏ Ìè¨Ìï®):');
analysis.todoFiles.slice(0, 10).forEach(file => {
    console.log(`  - ${file}`);
});
if (analysis.todoFiles.length > 10) {
    console.log(`  ... Ï¥ù ${analysis.todoFiles.length}Í∞ú`);
}
console.log();

console.log('üìÖ ÏµúÍ∑º ÏàòÏ†ïÎêú ÌååÏùº (ÏµúÏã† 10Í∞ú):');
analysis.recentFiles.forEach(file => {
    const date = file.mtime.toISOString().slice(0, 16).replace('T', ' ');
    console.log(`  ${date} - ${file.path} (${Math.round(file.size/1024)}KB)`);
});