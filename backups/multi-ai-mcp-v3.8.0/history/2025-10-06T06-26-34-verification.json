{
  "timestamp": "2025-10-06T06:26:34.256Z",
  "query": "Multi-AI MCP v1.9.0 최종 검증: 현재 설정된 타임아웃 값 확인. 각 AI는 간단히 \"OK\" + 자신의 최대 타임아웃만 답변",
  "mode": {
    "codex": true,
    "gemini": true,
    "qwen": false,
    "qwenPlanMode": true
  },
  "results": {
    "codex": {
      "provider": "codex",
      "response": "OpenAI Codex v0.44.0 (research preview)\n--------\n\u001b[1mprovider:\u001b[0m openai\n\u001b[1mapproval:\u001b[0m never\n\u001b[1msandbox:\u001b[0m read-only\n\u001b[1mreasoning effort:\u001b[0m none\n\u001b[1mreasoning summaries:\u001b[0m auto\n\u001b[1msession id:\u001b[0m 0199b832-0f27-70e2-929e-f39134abbd93\n--------\n\u001b[36muser\u001b[0m\nMulti-AI MCP v1.9.0 최종 검증: 현재 설정된 타임아웃 값 확인. 각 AI는 간단히 \"OK\" + 자신의 최대 타임아웃만 답변\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Investigating timeout configurations**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc \"sed -n '1,200p' scripts/ai-subagents/codex-wrapper.sh\"\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 28ms:\u001b[0m\n\u001b[2m#!/bin/bash\n\n# Codex CLI Wrapper - 적응형 타임아웃 및 재시도 로직\n# 버전: 1.0.0\n# 날짜: 2025-10-05\n\nset -euo pipefail\n\n# 색상 정의\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nCYAN='\\033[0;36m'\nNC='\\033[0m' # No Color\n\n# 로그 디렉터리\nLOG_DIR=\"/mnt/d/cursor/openmanager-vibe-v5/logs/ai-perf\"\nLOG_FILE=\"$LOG_DIR/codex-perf-$(date +%F).log\"\nmkdir -p \"$LOG_DIR\"\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Checking max timeout configuration**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc 'rg \"Multi-AI MCP\" -n'\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 1.45s:\u001b[0m\n\u001b[2mAGENTS.md:13:> **다른 AI 도구**: `CLAUDE.md` (Claude Code/Multi-AI MCP), `GEMINI.md` (Gemini), `QWEN.md` (Qwen)\nAGENTS.md:22:- **다른 AI는 별도 문서**: Gemini는 GEMINI.md, Qwen은 QWEN.md, Claude Code/Multi-AI MCP는 CLAUDE.md 참조\nAGENTS.md:75:| Claude Code / Multi-AI MCP | `CLAUDE.md` |\npackages/multi-ai-mcp/TROUBLESHOOTING.md:1:# Multi-AI MCP 트러블슈팅 가이드\npackages/multi-ai-mcp/TROUBLESHOOTING.md:401:  - Multi-AI MCP: v1.8.0\npackages/multi-ai-mcp/TEST-RESULTS.md:1:# Multi-AI MCP v1.5.0 테스트 결과\npackages/multi-ai-mcp/TEST-RESULTS.md:237:**Multi-AI MCP v1.5.0 Progress Notification 기능이 완벽하게 구현되었습니다.**\npackages/multi-ai-mcp/src/types.ts:2: * Multi-AI MCP Server Types\npackages/multi-ai-mcp/package.json:4:  \"description\": \"Multi-AI MCP Server for Claude Code - Integrates Codex, Gemini, and Qwen with Progress Notifications\",\npackages/multi-ai-mcp/CHANGELOG.md:3:All notable changes to the Multi-AI MCP Server will be documented in this file.\npackages/multi-ai-mcp/CHANGELOG.md:218:- ❌ Multi-AI MCP 자체 교차검증 불가능\npackages/multi-ai-mcp/CHANGELOG.md:223:- ✅ Multi-AI MCP 자체 교차검증 가능\npackages/multi-ai-mcp/src/index.ts:2: * Multi-AI MCP Server\npackages/multi-ai-mcp/src/index.ts:551:  console.error('Multi-AI MCP Server running on stdio');\npackages/multi-ai-mcp/.env.example:1:# Multi-AI MCP Server Configuration\npackages/multi-ai-mcp/MCP-BEST-PRACTICES.md:5:**프로젝트**: Multi-AI MCP Server\npackages/multi-ai-mcp/MCP-BEST-PRACTICES.md:205:## 📊 성능 비교 (평균 MCP vs Multi-AI MCP)\npackages/multi-ai-mcp/MCP-BEST-PRACTICES.md:216:### Multi-AI MCP v1.5.0\npackages/multi-ai-mcp/MCP-BEST-PRACTICES.md:243:**Multi-AI MCP** (CLI 직접 연동):\npackages/multi-ai-mcp/MCP-BEST-PRACTICES.md:257:**Multi-AI MCP**:\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Checking config file for Multi-AI MCP**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc \"sed -n '1,200p' packages/multi-ai-mcp/src/config.ts\"\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 29ms:\u001b[0m\n\u001b[2m/**\n * Configuration management for Multi-AI MCP Server\n *\n * Environment variables:\n * - MULTI_AI_CWD: Working directory for AI CLI execution (default: process.cwd())\n * - MULTI_AI_MAX_BUFFER: Max buffer size for CLI output (default: 10MB)\n * - MULTI_AI_CODEX_TIMEOUT_SIMPLE: Codex timeout for simple queries (default: 60s)\n * - MULTI_AI_CODEX_TIMEOUT_MEDIUM: Codex timeout for medium queries (default: 90s)\n * - MULTI_AI_CODEX_TIMEOUT_COMPLEX: Codex timeout for complex queries (default: 120s)\n * - MULTI_AI_GEMINI_TIMEOUT: Gemini timeout (default: 300s, sufficient for complex analysis)\n * - MULTI_AI_QWEN_TIMEOUT_NORMAL: Qwen normal mode timeout (default: 180s, increased from 120s)\n * - MULTI_AI_QWEN_TIMEOUT_PLAN: Qwen plan mode timeout (default: 300s, sufficient for complex planning)\n * - MULTI_AI_MCP_TIMEOUT: MCP request timeout (default: 360s, 6min for 3-AI parallel execution)\n * - MULTI_AI_ENABLE_PROGRESS: Enable progress notifications (default: true)\n * - MULTI_AI_DEBUG: Enable debug logging (default: false)\n * - MULTI_AI_MAX_RETRY_ATTEMPTS: Maximum retry attempts (default: 2)\n * - MULTI_AI_RETRY_BACKOFF_BASE: Retry backoff base in ms (default: 1000)\n */\n\ninterface MultiAIConfig {\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Searching for timeout configurations**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc 'rg \"MULTI_AI_CODEX_TIMEOUT\" -n'\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 1.38s:\u001b[0m\n\u001b[2mpackages/multi-ai-mcp/TROUBLESHOOTING.md:178:export MULTI_AI_CODEX_TIMEOUT_COMPLEX=240000  # 4분\npackages/multi-ai-mcp/src/__tests__/config.test.ts:33:      process.env.MULTI_AI_CODEX_TIMEOUT_SIMPLE = 'not-a-number';\npackages/multi-ai-mcp/src/__tests__/config.test.ts:36:        'Invalid MULTI_AI_CODEX_TIMEOUT_SIMPLE: \"not-a-number\" is not a valid number'\npackages/multi-ai-mcp/src/__tests__/config.test.ts:182:      process.env.MULTI_AI_CODEX_TIMEOUT_SIMPLE = '20000';\npackages/multi-ai-mcp/src/config.ts:7: * - MULTI_AI_CODEX_TIMEOUT_SIMPLE: Codex timeout for simple queries (default: 60s)\npackages/multi-ai-mcp/src/config.ts:8: * - MULTI_AI_CODEX_TIMEOUT_MEDIUM: Codex timeout for medium queries (default: 90s)\npackages/multi-ai-mcp/src/config.ts:9: * - MULTI_AI_CODEX_TIMEOUT_COMPLEX: Codex timeout for complex queries (default: 120s)\npackages/multi-ai-mcp/src/config.ts:103:        process.env.MULTI_AI_CODEX_TIMEOUT_SIMPLE,\npackages/multi-ai-mcp/src/config.ts:107:        'MULTI_AI_CODEX_TIMEOUT_SIMPLE'\npackages/multi-ai-mcp/src/config.ts:110:        process.env.MULTI_AI_CODEX_TIMEOUT_MEDIUM,\npackages/multi-ai-mcp/src/config.ts:114:        'MULTI_AI_CODEX_TIMEOUT_MEDIUM'\npackages/multi-ai-mcp/src/config.ts:117:        process.env.MULTI_AI_CODEX_TIMEOUT_COMPLEX,\npackages/multi-ai-mcp/src/config.ts:121:        'MULTI_AI_CODEX_TIMEOUT_COMPLEX'\npackages/multi-ai-mcp/README.md:145:| `MULTI_AI_CODEX_TIMEOUT_SIMPLE` | Codex 단순 쿼리 타임아웃 | `30000` (30초) |\npackages/multi-ai-mcp/README.md:146:| `MULTI_AI_CODEX_TIMEOUT_MEDIUM` | Codex 중간 쿼리 타임아웃 | `90000` (90초) |\npackages/multi-ai-mcp/README.md:147:| `MULTI_AI_CODEX_TIMEOUT_COMPLEX` | Codex 복잡 쿼리 타임아웃 | `120000` (120초) |\npackages/multi-ai-mcp/MCP-BEST-PRACTICES.md:175:MULTI_AI_CODEX_TIMEOUT_SIMPLE=60000    # 60s (기본값)\npackages/multi-ai-mcp/MCP-BEST-PRACTICES.md:176:MULTI_AI_CODEX_TIMEOUT_MEDIUM=90000    # 90s\npackages/multi-ai-mcp/MCP-BEST-PRACTICES.md:177:MULTI_AI_CODEX_TIMEOUT_COMPLEX=120000  # 120s\npackages/multi-ai-mcp/.env.example:14:MULTI_AI_CODEX_TIMEOUT_SIMPLE=30000\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Checking version in CHANGELOG.md**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc 'head -n 40 packages/multi-ai-mcp/CHANGELOG.md'\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 24ms:\u001b[0m\n\u001b[2m# Changelog\n\nAll notable changes to the Multi-AI MCP Server will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n---\n\n## [1.9.0] - 2025-10-06\n\n### Fixed 🐛\n\n**Codex 타임아웃 재시도 차단 문제 해결** - \"동작중이면 답을 받을 때까지 기다려야 함\"\n\n#### 문제 분석\n\n사용자 피드백:\n> \"내가 말한대로 타임아웃은 더 길게 주고 진행중이면 답변을 기다리게 만들었는데 왜 자꾸 타임아웃 시키는거지\"\n\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Investigating timeout configurations**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc 'ls -a packages/multi-ai-mcp'\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 27ms:\u001b[0m\n\u001b[2m.\n..\n.env.example\nCHANGELOG.md\nMCP-BEST-PRACTICES.md\nREADME.md\nSETUP-GUIDE.md\nTEST-RESULTS.md\nTIMEOUT-IMPROVEMENTS.md\nTROUBLESHOOTING.md\ndist\nhistory\nnode_modules\npackage-lock.json\npackage.json\npackages\nsrc\ntests\ntsconfig.json\nvitest.config.ts\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Checking for configuration files**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc 'head -n 120 packages/multi-ai-mcp/TIMEOUT-IMPROVEMENTS.md'\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 19ms:\u001b[0m\n\u001b[2m# 타임아웃 개선 방안 (Timeout Improvement Plan)\n\n**날짜**: 2025-10-05\n**버전**: v1.1.0 (계획)\n\n---\n\n## 📊 문제 분석\n\n### 현재 상태\n- **MCP 기본 타임아웃**: 60초 (TypeScript SDK 하드 리미트)\n- **개별 AI 타임아웃**: Codex 30-120초, Gemini 30초, Qwen 30-60초\n- **3-AI 병렬 실행**: 최대 120초 소요 가능 → MCP 60초 초과 시 실패\n- **재시도 메커니즘**: 없음\n- **진행 상황 알림**: 없음\n\n### 발견된 문제\n```\n❌ MCP error -32001: Request timed out\n→ 원인: 3-AI 병렬 실행이 60초 초과\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Verifying AI timeout configurations**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc 'rg \"config.codex\" packages/multi-ai-mcp/src -n'\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 83ms:\u001b[0m\n\u001b[2mpackages/multi-ai-mcp/src/config.ts:196:      ? { ...config.codex, ...newConfig.codex }\npackages/multi-ai-mcp/src/config.ts:197:      : config.codex,\npackages/multi-ai-mcp/src/__tests__/config.test.ts:125:      const initialSimple = config.codex.simple;\npackages/multi-ai-mcp/src/__tests__/config.test.ts:126:      const initialMedium = config.codex.medium;\npackages/multi-ai-mcp/src/__tests__/config.test.ts:135:      expect(config.codex.complex).toBe(150000); // Updated\npackages/multi-ai-mcp/src/__tests__/config.test.ts:136:      expect(config.codex.simple).toBe(initialSimple); // Preserved\npackages/multi-ai-mcp/src/__tests__/config.test.ts:137:      expect(config.codex.medium).toBe(initialMedium); // Preserved\npackages/multi-ai-mcp/src/__tests__/config.test.ts:188:      expect(config.codex.simple).toBe(20000);\npackages/multi-ai-mcp/src/ai-clients/codex.ts:113:  const baseTimeout = getAdaptiveTimeout(complexity, config.codex);\npackages/multi-ai-mcp/src/utils/query-analyzer.ts:110:        ? config.codex.simple\npackages/multi-ai-mcp/src/utils/query-analyzer.ts:112:        ? config.codex.medium\npackages/multi-ai-mcp/src/utils/query-analyzer.ts:113:        : config.codex.complex,\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Checking ai-clients code**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc \"sed -n '1,200p' packages/multi-ai-mcp/src/ai-clients/codex.ts\"\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 27ms:\u001b[0m\n\u001b[2m/**\n * Codex AI Client\n *\n * Executes installed `codex` CLI from WSL\n * No API calls - uses local authentication\n */\n\nimport { execFile } from 'child_process';\nimport { promisify } from 'util';\nimport type { AIResponse, ProgressCallback } from '../types.js';\nimport { withTimeout, detectQueryComplexity, getAdaptiveTimeout } from '../utils/timeout.js';\nimport { validateQuery } from '../utils/validation.js';\nimport { withRetry } from '../utils/retry.js';\nimport { config } from '../config.js';\n\nconst execFileAsync = promisify(execFile);\n\n/**\n * Execute Codex CLI query (internal implementation)\n * @internal\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Inspecting timeout utility**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc \"sed -n '1,200p' packages/multi-ai-mcp/src/utils/timeout.ts\"\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 22ms:\u001b[0m\n\u001b[2m/**\n * Adaptive Timeout Management\n *\n * Based on codex-wrapper.sh logic\n * P95 response time + 1.67x safety coefficient\n */\n\nimport type { QueryComplexity, TimeoutConfig } from '../types.js';\n\nexport function detectQueryComplexity(query: string): QueryComplexity {\n  const length = query.length;\n\n  if (length < 50) {\n    return 'simple';\n  } else if (length < 200) {\n    return 'medium';\n  } else {\n    return 'complex';\n  }\n}\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Searching for timeout overrides in environment files**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc 'rg \"MULTI_AI_QWEN_TIMEOUT\" -n'\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 1.43s:\u001b[0m\n\u001b[2mpackages/multi-ai-mcp/TROUBLESHOOTING.md:180:export MULTI_AI_QWEN_TIMEOUT_PLAN=360000      # 6분\npackages/multi-ai-mcp/src/config.ts:11: * - MULTI_AI_QWEN_TIMEOUT_NORMAL: Qwen normal mode timeout (default: 180s, increased from 120s)\npackages/multi-ai-mcp/src/config.ts:12: * - MULTI_AI_QWEN_TIMEOUT_PLAN: Qwen plan mode timeout (default: 300s, sufficient for complex planning)\npackages/multi-ai-mcp/src/config.ts:135:        process.env.MULTI_AI_QWEN_TIMEOUT_NORMAL,\npackages/multi-ai-mcp/src/config.ts:139:        'MULTI_AI_QWEN_TIMEOUT_NORMAL'\npackages/multi-ai-mcp/src/config.ts:142:        process.env.MULTI_AI_QWEN_TIMEOUT_PLAN,\npackages/multi-ai-mcp/src/config.ts:146:        'MULTI_AI_QWEN_TIMEOUT_PLAN'\npackages/multi-ai-mcp/MCP-BEST-PRACTICES.md:183:MULTI_AI_QWEN_TIMEOUT_NORMAL=60000      # 60s\npackages/multi-ai-mcp/MCP-BEST-PRACTICES.md:184:MULTI_AI_QWEN_TIMEOUT_PLAN=120000       # 120s (P95 × 2)\npackages/multi-ai-mcp/README.md:149:| `MULTI_AI_QWEN_TIMEOUT_NORMAL` | Qwen 일반 모드 타임아웃 | `30000` (30초) |\npackages/multi-ai-mcp/README.md:150:| `MULTI_AI_QWEN_TIMEOUT_PLAN` | Qwen Plan 모드 타임아웃 | `60000` (60초) |\npackages/multi-ai-mcp/CHANGELOG.md:361:export MULTI_AI_QWEN_TIMEOUT_PLAN=600000  # 10분\npackages/multi-ai-mcp/CHANGELOG.md:366:MULTI_AI_QWEN_TIMEOUT_PLAN=600000\npackages/multi-ai-mcp/.env.example:30:MULTI_AI_QWEN_TIMEOUT_NORMAL=30000\npackages/multi-ai-mcp/.env.example:34:MULTI_AI_QWEN_TIMEOUT_PLAN=60000\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Verifying timeout defaults and units**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc 'rg \"calculateRetryTimeout\" -n packages/multi-ai-mcp/src'\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 88ms:\u001b[0m\n\u001b[2mpackages/multi-ai-mcp/src/utils/timeout.ts:29:export function calculateRetryTimeout(\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Searching for unused definitions**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc 'rg \"calculateRetryTimeout\" -n'\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 1.31s:\u001b[0m\n\u001b[2mpackages/multi-ai-mcp/tests/timeout.test.ts:2:import { detectQueryComplexity, getAdaptiveTimeout, withTimeout, calculateRetryTimeout } from '../src/utils/timeout.js';\npackages/multi-ai-mcp/tests/timeout.test.ts:36:  describe('calculateRetryTimeout', () => {\npackages/multi-ai-mcp/tests/timeout.test.ts:38:      expect(calculateRetryTimeout(100, 1)).toBe(150);\npackages/multi-ai-mcp/tests/timeout.test.ts:39:      expect(calculateRetryTimeout(100, 2)).toBe(200);\npackages/multi-ai-mcp/tests/timeout.test.ts:40:      expect(calculateRetryTimeout(100, 3)).toBe(250);\npackages/multi-ai-mcp/src/utils/timeout.ts:29:export function calculateRetryTimeout(\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Checking usage of calculateRetryTimeout function**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc \"sed -n '1,200p' packages/multi-ai-mcp/src/utils/retry.ts\"\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 24ms:\u001b[0m\n\u001b[2m/**\n * Retry utility with exponential backoff\n *\n * Implements automatic retry mechanism for AI CLI calls\n * with exponential backoff to handle transient failures\n */\n\nexport interface RetryOptions {\n  /** Maximum number of retry attempts (including initial attempt) */\n  maxAttempts: number;\n  /** Base delay in milliseconds for exponential backoff */\n  backoffBase: number;\n  /** Callback invoked on retry attempts */\n  onRetry?: (attempt: number, error: Error) => void;\n}\n\n/**\n * Check if an error is fatal and should not be retried\n *\n * Fatal errors include:\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Verifying AI timeout configurations**\n\u001b[35m\u001b[3mexec\u001b[0m\u001b[0m\n\u001b[1mbash -lc \"nl -ba packages/multi-ai-mcp/src/config.ts | sed -n '90,160p'\"\u001b[0m in /mnt/d/cursor/openmanager-vibe-v5\u001b[32m succeeded in 31ms:\u001b[0m\n\u001b[2m    90\t */\n    91\texport function getConfig(): MultiAIConfig {\n    92\t  return {\n    93\t    cwd: process.env.MULTI_AI_CWD || process.cwd(),\n    94\t    maxBuffer: parseIntWithValidation(\n    95\t      process.env.MULTI_AI_MAX_BUFFER,\n    96\t      10485760,\n    97\t      1024 * 1024, // 1MB min\n    98\t      100 * 1024 * 1024, // 100MB max\n    99\t      'MULTI_AI_MAX_BUFFER'\n   100\t    ),\n   101\t    codex: {\n   102\t      simple: parseIntWithValidation(\n   103\t        process.env.MULTI_AI_CODEX_TIMEOUT_SIMPLE,\n   104\t        120000, // 2min default\n   105\t        1000, // 1s min\n   106\t        1800000, // 30min max (increased from 10min) - allow very long operations\n   107\t        'MULTI_AI_CODEX_TIMEOUT_SIMPLE'\n   108\t      ),\n   109\t      medium: parseIntWithValidation(\u001b[0m\n\n\u001b[35m\u001b[3mthinking\u001b[0m\u001b[0m\n**Preparing timeout summary**\n\u001b[35m\u001b[3mcodex\u001b[0m\u001b[0m\nCodex: OK 360000ms  \nGemini: OK 300000ms  \nQwen: OK 300000ms  \n\n참고: `packages/multi-ai-mcp/src/config.ts:117` `packages/multi-ai-mcp/src/config.ts:127` `packages/multi-ai-mcp/src/config.ts:143`\n\u001b[3m\u001b[35mtokens used\u001b[0m\u001b[0m\n53,943",
      "responseTime": 81862,
      "success": true
    },
    "gemini": {
      "provider": "gemini",
      "response": "OK.\n*   **Claude (MCP):** 360s\n*   **Codex:** 360s\n*   **Gemini:** 300s\n*   **Qwen:** 300s",
      "responseTime": 41943,
      "success": true
    }
  },
  "synthesis": {
    "consensus": [],
    "conflicts": [],
    "totalTime": 81862,
    "successRate": 1
  },
  "metadata": {
    "version": "1.8.1",
    "environment": "development"
  }
}