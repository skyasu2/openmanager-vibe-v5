/**
 * üè† SimplifiedQueryEngine Local Query Processor
 *
 * Specialized processor for local RAG-based queries:
 * - Supabase RAG search integration
 * - Local response generation
 * - Fallback handling
 */

import type { SupabaseRAGEngine } from './supabase-rag-engine';
import { CloudContextLoader } from '../mcp/CloudContextLoader';
import { MockContextLoader } from './MockContextLoader';
import { IntentClassifier } from '../../modules/ai-agent/processors/IntentClassifier';
import type {
  AIQueryContext,
  AIQueryOptions,
  MCPContext,
} from '../../types/ai-service-types';
import type { QueryResponse } from './SimplifiedQueryEngine.types';
import { SimplifiedQueryEngineUtils } from './SimplifiedQueryEngine.utils';
import { SimplifiedQueryEngineHelpers } from './SimplifiedQueryEngine.processors.helpers';

/**
 * üè† Î°úÏª¨ ÏøºÎ¶¨ ÌîÑÎ°úÏÑ∏ÏÑú (RAG Í∏∞Î∞ò)
 */
export class LocalQueryProcessor {
  private helpers: SimplifiedQueryEngineHelpers;

  constructor(
    private utils: SimplifiedQueryEngineUtils,
    private ragEngine: SupabaseRAGEngine,
    private contextLoader: CloudContextLoader,
    private mockContextLoader: MockContextLoader,
    private intentClassifier: IntentClassifier
  ) {
    this.helpers = new SimplifiedQueryEngineHelpers(mockContextLoader);
  }

  /**
   * üîç Î°úÏª¨ RAG Í∏∞Î∞ò ÏøºÎ¶¨ Ï≤òÎ¶¨
   */
  async processLocalQuery(
    query: string,
    context: AIQueryContext,
    options: AIQueryOptions,
    mcpContext: MCPContext | null,
    thinkingSteps: QueryResponse['thinkingSteps'],
    startTime: number
  ): Promise<QueryResponse> {
    // ‚úÖ ÏïàÏ†ÑÌïú thinking steps Ï¥àÍ∏∞Ìôî
    thinkingSteps = this.utils.safeInitThinkingSteps(thinkingSteps);

    const ragStepStart = Date.now();
    thinkingSteps.push({
      step: 'Î°úÏª¨ RAG Í≤ÄÏÉâ',
      description: 'Supabase Î≤°ÌÑ∞ Í≤ÄÏÉâ Ïã§Ìñâ',
      status: 'pending',
      timestamp: ragStepStart,
    });

    let ragResult;
    const maxResults = options?.maxResults || 5;
    const threshold = options?.threshold || 0.7;

    try {
      ragResult = await this.ragEngine.searchSimilar(query, {
        maxResults,
        threshold,
        category: options?.category,
        enableMCP: false, // MCPÎäî Ïù¥ÎØ∏ Î≥ÑÎèÑÎ°ú Ï≤òÎ¶¨
      });

      // ‚úÖ ÏïàÏ†ÑÌïú Î∞∞Ïó¥ Ï†ëÍ∑º
      this.utils.safeUpdateLastThinkingStep(thinkingSteps, {
        status: 'completed',
        description: `${ragResult.totalResults}Í∞ú Í¥ÄÎ†® Î¨∏ÏÑú Î∞úÍ≤¨`,
        duration: Date.now() - ragStepStart,
      });
    } catch (ragError) {
      // RAG Í≤ÄÏÉâ Ïã§Ìå® Ïãú ÏóêÎü¨ Ï≤òÎ¶¨
      console.error('RAG Í≤ÄÏÉâ Ïã§Ìå®:', ragError);

      // ‚úÖ ÏïàÏ†ÑÌïú Î∞∞Ïó¥ Ï†ëÍ∑º
      this.utils.safeUpdateLastThinkingStep(thinkingSteps, {
        status: 'failed',
        description: 'RAG Í≤ÄÏÉâ Ïã§Ìå®',
        duration: Date.now() - ragStepStart,
      });

      // RAG Ïã§Ìå® Ïãú ÏóêÎü¨ ÏùëÎãµ Î∞òÌôò
      return {
        success: false,
        response: 'Ï£ÑÏÜ°Ìï©ÎãàÎã§. Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
        engine: 'local-rag',
        confidence: 0,
        thinkingSteps,
        error: ragError instanceof Error ? ragError.message : 'RAG Í≤ÄÏÉâ Ïã§Ìå®',
        processingTime: Date.now() - startTime,
      };
    }

    // 3Îã®Í≥Ñ: ÏùëÎãµ ÏÉùÏÑ±
    const responseStepStart = Date.now();
    thinkingSteps.push({
      step: 'Î°úÏª¨ ÏùëÎãµ ÏÉùÏÑ±',
      description: 'RAG Í≤∞Í≥º Í∏∞Î∞ò ÏùëÎãµ ÏÉùÏÑ±',
      status: 'pending',
      timestamp: responseStepStart,
    });

    const response = await this.helpers.generateLocalResponse(
      query,
      ragResult,
      mcpContext,
      context
    );

    // ‚úÖ ÏïàÏ†ÑÌïú Î∞∞Ïó¥ Ï†ëÍ∑º
    this.utils.safeUpdateLastThinkingStep(thinkingSteps, {
      status: 'completed',
      duration: Date.now() - responseStepStart,
    });

    return {
      success: true,
      response,
      engine: 'local-rag',
      confidence: this.helpers.calculateConfidence(ragResult),
      thinkingSteps,
      metadata: {
        ragResults: ragResult.totalResults,
        sources:
          ragResult.results?.map((r) => r.metadata?.source).filter(Boolean) ||
          [],
        mcpFiles: mcpContext?.files?.length || 0,
      },
      processingTime: Date.now() - startTime,
    };
  }
}
