/**
 * üè™ Store Modules Export
 * Î™®Îì† Zustand Ïä§ÌÜ†Ïñ¥ Î™®Îìà Ï§ëÏïô Í¥ÄÎ¶¨
 */

// Í∞úÎ≥Ñ Ïä§ÌÜ†Ïñ¥ import
import { useAIStore, type AIState } from './ai.store';
import { useAuthStore, type AuthState } from './auth.store';
import { useSystemStore, type SystemState } from './system.store';

// Í∞úÎ≥Ñ Ïä§ÌÜ†Ïñ¥ export
export { useAIStore, type AIAgentState, type AIState } from './ai.store';
export { useAuthStore, type AuthState } from './auth.store';
export { useSystemStore, type SystemState } from './system.store';

// ÌÜµÌï© ÏÉÅÌÉú ÌÉÄÏûÖ
export interface GlobalState {
  system: SystemState;
  auth: AuthState;
  ai: AIState;
}

// ÌÜµÌï© ÌõÖ (Î™®Îì† Ïä§ÌÜ†Ïñ¥Ïóê Ï†ëÍ∑º)
export const useGlobalState = () => {
  const system = useSystemStore();
  const auth = useAuthStore();
  const ai = useAIStore();

  return {
    system,
    auth,
    ai
  };
};

// ÌäπÏ†ï Í∏∞Îä•Î≥Ñ ÌÜµÌï© ÌõÖ
export const useSystemAuth = () => {
  const { isStarted, start, stop, getRemainingTime } = useSystemStore();
  const { isAuthenticated, authenticate, logout } = useAuthStore();

  return {
    // ÏãúÏä§ÌÖú ÏÉÅÌÉú
    isSystemStarted: isStarted,
    systemRemainingTime: getRemainingTime(),

    // Ïù∏Ï¶ù ÏÉÅÌÉú
    isAuthenticated,

    // ÌÜµÌï© Ïï°ÏÖò
    startSystem: () => {
      if (isAuthenticated) {
        start();
      } else {
        console.warn('‚ö†Ô∏è Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      }
    },

    stopSystem: stop,
    authenticate,
    logout: () => {
      if (isStarted) {
        stop();
      }
      logout();
    }
  };
};

export const useAISystem = () => {
  const { isStarted } = useSystemStore();
  const { isAuthenticated } = useAuthStore();
  const { isEnabled, enable, disable, state, metrics } = useAIStore();

  return {
    // AI ÏÉÅÌÉú
    isAIEnabled: isEnabled,
    aiState: state,
    aiMetrics: metrics,

    // Ï°∞Í±¥Î∂Ä AI Ï†úÏñ¥
    enableAI: () => {
      if (isStarted && isAuthenticated) {
        enable();
      } else {
        console.warn('‚ö†Ô∏è ÏãúÏä§ÌÖú ÏãúÏûë Î∞è Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      }
    },

    disableAI: disable,

    // ÏÉÅÌÉú Ï≤¥ÌÅ¨
    canUseAI: isStarted && isAuthenticated,
  };
};

// Ïä§ÌÜ†Ïñ¥ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî (Í∞úÎ∞úÏö©)
export const resetAllStores = () => {
  if (process.env.NODE_ENV === 'development' && typeof window !== 'undefined') {
    // localStorage ÌÅ¥Î¶¨Ïñ¥
    localStorage.removeItem('system-store');
    localStorage.removeItem('auth-store');
    localStorage.removeItem('ai-store');

    // Ïä§ÌÜ†Ïñ¥ Ïû¨ÏÑ§Ï†ï
    window.location.reload();

    console.log('üîÑ Î™®Îì† Ïä§ÌÜ†Ïñ¥ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
  }
};

// Ïä§ÌÜ†Ïñ¥ ÏÉÅÌÉú ÎîîÎ≤ÑÍπÖ (Í∞úÎ∞úÏö©)
export const debugStores = () => {
  if (process.env.NODE_ENV === 'development') {
    const system = useSystemStore.getState();
    const auth = useAuthStore.getState();
    const ai = useAIStore.getState();

    console.group('üîç Store Debug Info');
    console.log('System:', system);
    console.log('Auth:', auth);
    console.log('AI:', ai);
    console.groupEnd();

    return { system, auth, ai };
  }
  return undefined;
}; 