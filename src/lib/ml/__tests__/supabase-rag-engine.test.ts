/**
 * üß™ SupabaseRAGEngine Îã®ÏúÑ ÌÖåÏä§Ìä∏
 * RAG Í≤ÄÏÉâ Î∞è Î≤°ÌÑ∞ ÏûÑÎ≤†Îî© Í∏∞Îä• ÌÖåÏä§Ìä∏
 */

import { describe, it, expect, beforeAll, vi, afterAll } from 'vitest';
import { SupabaseRAGEngine } from '../supabase-rag-engine';

// Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î™®ÌÇπ
vi.mock('@supabase/supabase-js', () => ({
  createClient: vi.fn(() => ({
    from: vi.fn(() => ({
      select: vi.fn(() => ({
        match: vi.fn(() => ({
          order: vi.fn(() => ({
            limit: vi.fn(() => Promise.resolve({
              data: [
                {
                  id: '1',
                  content: 'CPU ÏÇ¨Ïö©Î•† ÌôïÏù∏: top, htop, mpstat Î™ÖÎ†πÏñ¥ ÏÇ¨Ïö©',
                  metadata: {
                    source: 'linux-commands',
                    category: 'monitoring',
                    tags: ['cpu', 'performance'],
                    commands: ['top', 'htop', 'mpstat'],
                    priority: 'high'
                  },
                  similarity: 0.92
                },
                {
                  id: '2',
                  content: 'Î©îÎ™®Î¶¨ ÏÉÅÌÉú ÌôïÏù∏: free -m, vmstat Î™ÖÎ†πÏñ¥Î°ú Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Î™®ÎãàÌÑ∞ÎßÅ',
                  metadata: {
                    source: 'linux-commands',
                    category: 'monitoring',
                    tags: ['memory', 'ram'],
                    commands: ['free -m', 'vmstat'],
                    priority: 'high'
                  },
                  similarity: 0.88
                }
              ],
              error: null
            }))
          }))
        }))
      })),
      insert: vi.fn(() => Promise.resolve({ error: null })),
      upsert: vi.fn(() => Promise.resolve({ error: null })),
    })),
    rpc: vi.fn((funcName) => {
      if (funcName === 'vector_search') {
        return Promise.resolve({
          data: [
            { id: '1', content: 'CPU monitoring', similarity: 0.9 },
            { id: '2', content: 'Memory monitoring', similarity: 0.85 }
          ],
          error: null
        });
      }
      return Promise.resolve({ data: null, error: null });
    })
  }))
}));

describe('SupabaseRAGEngine', () => {
  let ragEngine: SupabaseRAGEngine;

  beforeAll(async () => {
    ragEngine = new SupabaseRAGEngine();
    await ragEngine.initialize();
  });

  afterAll(() => {
    vi.clearAllMocks();
  });

  describe('Ï¥àÍ∏∞Ìôî', () => {
    it('RAG ÏóîÏßÑÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï¥àÍ∏∞ÌôîÎêòÏñ¥Ïïº Ìï®', () => {
      expect(ragEngine).toBeDefined();
      expect(ragEngine.isReady()).toBe(true);
    });
  });

  describe('Î≤°ÌÑ∞ Í≤ÄÏÉâ', () => {
    it('CPU Í¥ÄÎ†® ÏßàÏùòÏóê ÎåÄÌï¥ Í¥ÄÎ†® Î¨∏ÏÑúÎ•º Í≤ÄÏÉâÌï¥Ïïº Ìï®', async () => {
      const query = 'CPU ÏÇ¨Ïö©Î•† ÌôïÏù∏ Î∞©Î≤ï';
      
      const result = await ragEngine.search(query, {
        limit: 5,
        threshold: 0.7
      });

      expect(result.success).toBe(true);
      expect(result.results).toHaveLength(2);
      expect(result.results[0].content).toContain('CPU');
      expect(result.results[0].metadata.commands).toContain('top');
      expect(result.results[0].similarity).toBeGreaterThan(0.9);
    });

    it('Î©îÎ™®Î¶¨ Í¥ÄÎ†® ÏßàÏùòÏóê ÎåÄÌï¥ Í¥ÄÎ†® Î¨∏ÏÑúÎ•º Í≤ÄÏÉâÌï¥Ïïº Ìï®', async () => {
      const query = 'Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ ÌôïÏù∏';
      
      const result = await ragEngine.search(query, {
        limit: 5,
        threshold: 0.7
      });

      expect(result.success).toBe(true);
      expect(result.results.some(r => r.content.includes('Î©îÎ™®Î¶¨'))).toBe(true);
      expect(result.results.some(r => r.metadata.commands.includes('free -m'))).toBe(true);
    });

    it('ÏûÑÍ≥ÑÍ∞í Ïù¥ÌïòÏùò Í≤∞Í≥ºÎäî ÌïÑÌÑ∞ÎßÅÎêòÏñ¥Ïïº Ìï®', async () => {
      const query = 'Í¥ÄÎ†®ÏóÜÎäî ÏßàÏùò';
      
      // Mock low similarity results
      vi.mocked(ragEngine['supabase'].rpc).mockResolvedValueOnce({
        data: [
          { id: '1', content: 'Unrelated content', similarity: 0.3 },
          { id: '2', content: 'Another unrelated', similarity: 0.2 }
        ],
        error: null
      });

      const result = await ragEngine.search(query, {
        limit: 5,
        threshold: 0.7
      });

      expect(result.success).toBe(true);
      expect(result.results).toHaveLength(0);
      expect(result.totalResults).toBe(0);
    });
  });

  describe('Ï∫êÏã±', () => {
    it('ÎèôÏùºÌïú ÏßàÏùòÏóê ÎåÄÌï¥ Ï∫êÏãúÎêú Í≤∞Í≥ºÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', async () => {
      const query = 'CPU Î™®ÎãàÌÑ∞ÎßÅ';
      
      // Ï≤´ Î≤àÏß∏ Í≤ÄÏÉâ
      const result1 = await ragEngine.search(query);
      expect(result1.cached).toBe(false);

      // Îëê Î≤àÏß∏ Í≤ÄÏÉâ (Ï∫êÏãúÎê®)
      const result2 = await ragEngine.search(query);
      expect(result2.cached).toBe(true);
      expect(result2.results).toEqual(result1.results);
    });

    it('Ï∫êÏãú ÎßåÎ£å ÌõÑ ÏÉàÎ°úÏö¥ Í≤ÄÏÉâÏùÑ ÏàòÌñâÌï¥Ïïº Ìï®', async () => {
      const query = 'Ï∫êÏãú ÌÖåÏä§Ìä∏ ÏßàÏùò';
      
      // Ï∫êÏãú Í∞ïÏ†ú ÎßåÎ£å
      ragEngine['queryCache'].clear();
      
      const result = await ragEngine.search(query);
      expect(result.cached).toBe(false);
    });
  });

  describe('ÌïúÍµ≠Ïñ¥ Ï≤òÎ¶¨', () => {
    it('ÌïúÍµ≠Ïñ¥ ÌòïÌÉúÏÜå Î∂ÑÏÑùÏù¥ Ï†ÅÏö©ÎêòÏñ¥Ïïº Ìï®', async () => {
      const query = 'ÏÑúÎ≤ÑÏùò CPU ÏÇ¨Ïö©Î•†Ïù¥ ÎÜíÏäµÎãàÎã§';
      
      // ÌòïÌÉúÏÜå Î∂ÑÏÑù Í≤∞Í≥º ÌôïÏù∏
      const processed = await ragEngine['preprocessQuery'](query);
      
      expect(processed).toBeDefined();
      expect(processed).toContain('ÏÑúÎ≤Ñ');
      expect(processed).toContain('CPU');
      expect(processed).toContain('ÏÇ¨Ïö©Î•†');
    });

    it('ÏòÅÏñ¥ ÏßàÏùòÎèÑ Ï≤òÎ¶¨ Í∞ÄÎä•Ìï¥Ïïº Ìï®', async () => {
      const query = 'check server CPU usage';
      
      const result = await ragEngine.search(query);
      
      expect(result.success).toBe(true);
      expect(result.results.length).toBeGreaterThan(0);
    });
  });

  describe('ÏóêÎü¨ Ï≤òÎ¶¨', () => {
    it('Îπà ÏßàÏùòÏóê ÎåÄÌï¥ ÏóêÎü¨Î•º Î∞òÌôòÌï¥Ïïº Ìï®', async () => {
      const query = '';
      
      const result = await ragEngine.search(query);
      
      expect(result.success).toBe(false);
      expect(result.error).toContain('ÏßàÏùòÍ∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§');
    });

    it('Supabase ÏóêÎü¨ Ïãú Ï†ÅÏ†àÌïú ÏóêÎü¨ Î©îÏãúÏßÄÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', async () => {
      const query = 'ÏóêÎü¨ ÌÖåÏä§Ìä∏';
      
      // Mock Supabase error
      vi.mocked(ragEngine['supabase'].rpc).mockResolvedValueOnce({
        data: null,
        error: { message: 'Database connection failed' }
      });

      const result = await ragEngine.search(query);
      
      expect(result.success).toBe(false);
      expect(result.error).toContain('Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§');
    });
  });

  describe('ÏÑ±Îä• Ï∏°Ï†ï', () => {
    it('Í≤ÄÏÉâ Ï≤òÎ¶¨ ÏãúÍ∞ÑÏùÑ Ï∏°Ï†ïÌï¥Ïïº Ìï®', async () => {
      const query = 'ÏÑ±Îä• ÌÖåÏä§Ìä∏ ÏßàÏùò';
      
      const result = await ragEngine.search(query);
      
      expect(result.processingTime).toBeDefined();
      expect(result.processingTime).toBeGreaterThan(0);
      expect(result.processingTime).toBeLessThan(1000); // 1Ï¥à Ïù¥ÎÇ¥
    });
  });

  describe('MCP Ïª®ÌÖçÏä§Ìä∏ ÌÜµÌï©', () => {
    it('MCP Ïª®ÌÖçÏä§Ìä∏Í∞Ä Ìè¨Ìï®Îêú Í≤ÄÏÉâ Í≤∞Í≥ºÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', async () => {
      const query = 'ÌòÑÏû¨ ÏÑúÎ≤Ñ ÏÉÅÌÉú';
      
      // Mock MCP context
      ragEngine['mcpEnabled'] = true;
      vi.spyOn(ragEngine as any, 'queryMCPFileSystem').mockResolvedValue({
        files: [
          { path: '/monitoring/cpu.md', content: 'CPU monitoring guide', type: 'file' }
        ],
        systemContext: { totalServers: 5 },
        relevantPaths: ['/monitoring']
      });

      const result = await ragEngine.search(query, {
        includeMCPContext: true
      });
      
      expect(result.mcpContext).toBeDefined();
      expect(result.mcpContext.files).toHaveLength(1);
      expect(result.mcpContext.systemContext.totalServers).toBe(5);
    });
  });
});