/**
 * üß™ A/B ÌÖåÏä§Ìä∏ Í¥ÄÎ¶¨ API v1.0
 *
 * Ï†êÏßÑÏ†Å API ÍµêÏ≤¥Î•º ÏúÑÌïú A/B ÌÖåÏä§Ìä∏ Í¥ÄÎ¶¨ ÏóîÎìúÌè¨Ïù∏Ìä∏
 * - Ïã§ÏãúÍ∞Ñ ÏÑ±Îä• Î©îÌä∏Î¶≠ Ï°∞Ìöå
 * - Ìä∏ÎûòÌîΩ Î∂ÑÌï† Ï°∞Ï†ï
 * - ÏûêÎèô Î°§Î∞± ÏÑ§Ï†ï
 */

import { abTestManager, type ABTestGroup } from '@/lib/ab-test-manager';
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';

export const dynamic = 'force-dynamic';

/**
 * GET /api/ab-test
 *
 * A/B ÌÖåÏä§Ìä∏ ÌòÑÏû¨ ÏÉÅÌÉú Î∞è Í≤∞Í≥º Ï°∞Ìöå
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const action = searchParams.get('action') || 'status';

    switch (action) {
      case 'status':
        return await getABTestStatus();

      case 'results':
        return await getABTestResults();

      case 'metrics':
        return await getDetailedMetrics();

      case 'assign_group': {
        const userKey = searchParams.get('user_key') || 'anonymous';
        const forceGroup = searchParams.get('group') as ABTestGroup;
        const assignedGroup = await abTestManager.assignUserToGroup(
          userKey,
          forceGroup
        );

        return NextResponse.json({
          success: true,
          data: {
            userKey,
            assignedGroup,
            forceGroup: forceGroup || null,
          },
          timestamp: new Date().toISOString(),
        });
      }

      default:
        return NextResponse.json(
          {
            success: false,
            error: 'ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Ïï°ÏÖò',
            availableActions: ['status', 'results', 'metrics', 'assign_group'],
          },
          { status: 400 }
        );
    }
  } catch (error) {
    console.error('‚ùå A/B ÌÖåÏä§Ìä∏ API GET Ïò§Î•ò:', error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

/**
 * POST /api/ab-test
 *
 * A/B ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï Î∞è Ï†úÏñ¥
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { action, ...params } = body;

    switch (action) {
      case 'update_traffic':
        return await updateTrafficSplit(params);

      case 'emergency_rollback':
        return await emergencyRollback(params);

      case 'record_metric':
        return await recordMetric(params);

      case 'update_config':
        return await updateConfig(params);

      case 'cleanup':
        await abTestManager.cleanup();
        return NextResponse.json({
          success: true,
          message: 'A/B ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏôÑÎ£å',
          timestamp: new Date().toISOString(),
        });

      default:
        return NextResponse.json(
          {
            success: false,
            error: 'ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Ïï°ÏÖò',
            availableActions: [
              'update_traffic',
              'emergency_rollback',
              'record_metric',
              'update_config',
              'cleanup',
            ],
          },
          { status: 400 }
        );
    }
  } catch (error) {
    console.error('‚ùå A/B ÌÖåÏä§Ìä∏ API POST Ïò§Î•ò:', error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

// ==============================================
// üîß Ìó¨Ìçº Ìï®ÏàòÎì§
// ==============================================

async function getABTestStatus() {
  try {
    await abTestManager.initialize();

    // Í∞ÑÎã®Ìïú ÏÉÅÌÉú Ï†ïÎ≥¥
    const [legacyGroup, optimizedGroup] = await Promise.all([
      abTestManager.assignUserToGroup('status-check-legacy', 'legacy'),
      abTestManager.assignUserToGroup('status-check-optimized', 'optimized'),
    ]);

    return NextResponse.json({
      success: true,
      data: {
        enabled: true,
        groups: {
          legacy: { available: legacyGroup === 'legacy' },
          optimized: { available: optimizedGroup === 'optimized' },
        },
        message: 'A/B ÌÖåÏä§Ìä∏ ÏãúÏä§ÌÖú ÌôúÏÑ±ÌôîÎê®',
      },
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: 'ÏÉÅÌÉú Ï°∞Ìöå Ïã§Ìå®',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

async function getABTestResults() {
  try {
    await abTestManager.initialize();
    const results = await abTestManager.getResults();

    return NextResponse.json({
      success: true,
      data: {
        legacy: {
          ...results.legacy,
          description: 'Í∏∞Ï°¥ API (GCP + Redis Pipeline)',
        },
        optimized: {
          ...results.optimized,
          description: 'ÏµúÏ†ÅÌôî API (Redis Template Cache)',
        },
        comparison: results.comparison,
        analysis: {
          performanceImprovement: results.comparison.performanceGain > 0,
          significantGain: results.comparison.performanceGain > 50,
          recommendation: results.comparison.recommendation,
          rolloutReady: results.comparison.shouldRollout,
        },
      },
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: 'Í≤∞Í≥º Ï°∞Ìöå Ïã§Ìå®',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

async function getDetailedMetrics() {
  try {
    await abTestManager.initialize();
    const results = await abTestManager.getResults();

    // ÏÉÅÏÑ∏ Î©îÌä∏Î¶≠ Î∂ÑÏÑù
    const analysis = {
      performanceAnalysis: {
        avgResponseTimeImprovement: results.comparison.performanceGain,
        legacyAvgTime: results.legacy.avgResponseTime,
        optimizedAvgTime: results.optimized.avgResponseTime,
        targetAchieved: results.optimized.avgResponseTime < 10, // 10ms Î™©Ìëú
      },
      reliabilityAnalysis: {
        legacyErrorRate: results.legacy.errorRate,
        optimizedErrorRate: results.optimized.errorRate,
        errorRateImprovement:
          ((results.legacy.errorRate - results.optimized.errorRate) /
            Math.max(results.legacy.errorRate, 0.001)) *
          100,
        reliabilityTarget: results.optimized.errorRate < 0.01, // 1% Î™©Ìëú
      },
      trafficAnalysis: {
        legacyRequests: results.legacy.requestCount,
        optimizedRequests: results.optimized.requestCount,
        totalRequests:
          results.legacy.requestCount + results.optimized.requestCount,
        trafficSplit: {
          legacy:
            Math.round(
              (results.legacy.requestCount /
                (results.legacy.requestCount +
                  results.optimized.requestCount)) *
                100
            ) || 0,
          optimized:
            Math.round(
              (results.optimized.requestCount /
                (results.legacy.requestCount +
                  results.optimized.requestCount)) *
                100
            ) || 0,
        },
      },
    };

    return NextResponse.json({
      success: true,
      data: {
        rawResults: results,
        analysis,
        recommendations: generateRecommendations(analysis),
      },
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: 'ÏÉÅÏÑ∏ Î©îÌä∏Î¶≠ Ï°∞Ìöå Ïã§Ìå®',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

async function updateTrafficSplit(params: any) {
  try {
    const { legacyPercent, optimizedPercent } = params;

    if (
      typeof legacyPercent !== 'number' ||
      typeof optimizedPercent !== 'number'
    ) {
      return NextResponse.json(
        {
          success: false,
          error: 'Ïú†Ìö®Ìïú ÌçºÏÑºÌä∏ Í∞íÏù¥ ÌïÑÏöîÌï©ÎãàÎã§',
        },
        { status: 400 }
      );
    }

    await abTestManager.adjustTrafficSplit(legacyPercent, optimizedPercent);

    return NextResponse.json({
      success: true,
      message: `Ìä∏ÎûòÌîΩ Î∂ÑÌï† ÏóÖÎç∞Ïù¥Ìä∏: Legacy ${legacyPercent}%, Optimized ${optimizedPercent}%`,
      data: {
        trafficSplit: {
          legacy: legacyPercent,
          optimized: optimizedPercent,
        },
      },
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: 'Ìä∏ÎûòÌîΩ Î∂ÑÌï† ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

async function emergencyRollback(params: any) {
  try {
    const { reason } = params;

    if (!reason || typeof reason !== 'string') {
      return NextResponse.json(
        {
          success: false,
          error: 'Î°§Î∞± ÏÇ¨Ïú†Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§',
        },
        { status: 400 }
      );
    }

    await abTestManager.emergencyRollback(reason);

    return NextResponse.json({
      success: true,
      message: 'Í∏¥Í∏â Î°§Î∞± ÏôÑÎ£å',
      data: {
        reason,
        newTrafficSplit: {
          legacy: 100,
          optimized: 0,
        },
        rollbackTime: new Date().toISOString(),
      },
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: 'Í∏¥Í∏â Î°§Î∞± Ïã§Ìå®',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

async function recordMetric(params: any) {
  try {
    const { group, responseTime, success, error } = params;

    if (
      !group ||
      typeof responseTime !== 'number' ||
      typeof success !== 'boolean'
    ) {
      return NextResponse.json(
        {
          success: false,
          error: 'ÌïÑÏàò Î©îÌä∏Î¶≠ Îç∞Ïù¥ÌÑ∞Í∞Ä ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§',
        },
        { status: 400 }
      );
    }

    await abTestManager.recordMetric(group, responseTime, success, error);

    return NextResponse.json({
      success: true,
      message: 'Î©îÌä∏Î¶≠ Í∏∞Î°ù ÏôÑÎ£å',
      data: {
        group,
        responseTime,
        success,
        recordedAt: new Date().toISOString(),
      },
    });
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: 'Î©îÌä∏Î¶≠ Í∏∞Î°ù Ïã§Ìå®',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

async function updateConfig(params: any) {
  try {
    const { config } = params;

    if (!config || typeof config !== 'object') {
      return NextResponse.json(
        {
          success: false,
          error: 'Ïú†Ìö®Ìïú ÏÑ§Ï†ï Í∞ùÏ≤¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§',
        },
        { status: 400 }
      );
    }

    await abTestManager.updateConfig(config);

    return NextResponse.json({
      success: true,
      message: 'A/B ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å',
      data: {
        updatedConfig: config,
        updatedAt: new Date().toISOString(),
      },
    });
  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: 'ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}

function generateRecommendations(analysis: any): string[] {
  const recommendations: string[] = [];

  // ÏÑ±Îä• Í∏∞Î∞ò Ï∂îÏ≤ú
  if (analysis.performanceAnalysis.avgResponseTimeImprovement > 80) {
    recommendations.push('üöÄ Îß§Ïö∞ ÎÜíÏùÄ ÏÑ±Îä• Í∞úÏÑ†: Ï¶âÏãú ÏµúÏ†ÅÌôî APIÎ°ú Ï†ÑÌôò Í∂åÏû•');
  } else if (analysis.performanceAnalysis.avgResponseTimeImprovement > 50) {
    recommendations.push('‚úÖ ÎÜíÏùÄ ÏÑ±Îä• Í∞úÏÑ†: Îçî ÎßéÏùÄ ÌÖåÏä§Ìä∏ ÌõÑ Ï†ÑÌôò Í≥†Î†§');
  } else if (analysis.performanceAnalysis.avgResponseTimeImprovement > 20) {
    recommendations.push('üìä Î≥¥ÌÜµ ÏÑ±Îä• Í∞úÏÑ†: Ï∂îÍ∞Ä Î™®ÎãàÌÑ∞ÎßÅ ÌïÑÏöî');
  } else {
    recommendations.push('‚ö†Ô∏è ÎÇÆÏùÄ ÏÑ±Îä• Í∞úÏÑ†: ÏµúÏ†ÅÌôî Î∞©Î≤ï Ïû¨Í≤ÄÌÜ† ÌïÑÏöî');
  }

  // ÏïàÏ†ïÏÑ± Í∏∞Î∞ò Ï∂îÏ≤ú
  if (analysis.reliabilityAnalysis.optimizedErrorRate < 0.01) {
    recommendations.push('üõ°Ô∏è ÎÜíÏùÄ ÏïàÏ†ïÏÑ±: ÏóêÎü¨Ïú® Î™©Ìëú Îã¨ÏÑ±');
  } else if (analysis.reliabilityAnalysis.optimizedErrorRate < 0.05) {
    recommendations.push('‚ö†Ô∏è Î≥¥ÌÜµ ÏïàÏ†ïÏÑ±: ÏóêÎü¨Ïú® Í∞úÏÑ† ÌïÑÏöî');
  } else {
    recommendations.push('üö® ÎÇÆÏùÄ ÏïàÏ†ïÏÑ±: ÏµúÏ†ÅÌôî Î°úÏßÅ Ï†êÍ≤Ä ÌïÑÏöî');
  }

  // Ìä∏ÎûòÌîΩ Í∏∞Î∞ò Ï∂îÏ≤ú
  const totalRequests = analysis.trafficAnalysis.totalRequests;
  if (totalRequests < 100) {
    recommendations.push(
      'üìà Îçî ÎßéÏùÄ ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÌïÑÏöî (ÌòÑÏû¨: ' + totalRequests + 'Í∞ú ÏöîÏ≤≠)'
    );
  } else if (totalRequests > 1000) {
    recommendations.push('üìä Ï∂©Î∂ÑÌïú ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÌôïÎ≥¥: Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî Í≤∞Í≥º');
  }

  return recommendations;
}
