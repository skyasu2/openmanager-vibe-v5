/**
 * üîß ÌîÑÎ°úÌïÑ ÎìúÎ°≠Îã§Ïö¥ Ïª§Ïä§ÌÖÄ ÌõÖ
 */

import { useState, useEffect, useRef, useCallback } from 'react';
import { DropdownPosition } from '../types/ProfileTypes';

export const useProfileDropdown = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({
    top: 0,
    right: 0,
  });
  
  const dropdownRef = useRef<HTMLDivElement>(null);
  const profileButtonRef = useRef<HTMLButtonElement>(null);

  /**
   * ÎìúÎ°≠Îã§Ïö¥ ÏúÑÏπò Í≥ÑÏÇ∞
   */
  const calculateDropdownPosition = useCallback(() => {
    if (!profileButtonRef.current) return;

    const buttonRect = profileButtonRef.current.getBoundingClientRect();
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;

    // Í∏∞Î≥∏ ÏúÑÏπò: Î≤ÑÌäº ÏïÑÎûò, Ïò§Î•∏Ï™Ω Ï†ïÎ†¨
    let top = buttonRect.bottom + 8;
    let right = viewportWidth - buttonRect.right;

    // ÎìúÎ°≠Îã§Ïö¥Ïù¥ ÌôîÎ©¥ ÏïÑÎûòÎ°ú ÎÑòÏñ¥Í∞ÄÎäî Í≤ΩÏö∞ ÏúÑÏ™ΩÏóê ÌëúÏãú
    const dropdownHeight = 400; // ÏòàÏÉÅ ÎìúÎ°≠Îã§Ïö¥ ÎÜíÏù¥
    if (top + dropdownHeight > viewportHeight) {
      top = buttonRect.top - dropdownHeight - 8;
    }

    // Î™®Î∞îÏùºÏóêÏÑúÎäî Ï§ëÏïô Ï†ïÎ†¨
    if (viewportWidth < 640) {
      right = (viewportWidth - 320) / 2; // ÎìúÎ°≠Îã§Ïö¥ ÎÑàÎπÑ 320px Í∏∞Ï§Ä
      if (right < 16) right = 16; // ÏµúÏÜå Ïó¨Î∞±
    }

    setDropdownPosition({ top, right });
  }, []);

  /**
   * ÎìúÎ°≠Îã§Ïö¥ Ïó¥Í∏∞/Îã´Í∏∞
   */
  const toggleDropdown = useCallback((e?: React.MouseEvent) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }

    if (!isOpen) {
      calculateDropdownPosition();
      // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ÏúºÎ°ú ÏúÑÏπò Í≥ÑÏÇ∞ ÌõÑ Ïó¥Í∏∞
      requestAnimationFrame(() => {
        setIsOpen(true);
      });
    } else {
      setIsOpen(false);
    }
  }, [isOpen, calculateDropdownPosition]);

  /**
   * ÎìúÎ°≠Îã§Ïö¥ Îã´Í∏∞
   */
  const closeDropdown = useCallback(() => {
    setIsOpen(false);
  }, []);

  // Ïô∏Î∂Ä ÌÅ¥Î¶≠ Í∞êÏßÄ
  useEffect(() => {
    if (!isOpen) return;

    const handleClickOutside = (event: Event) => {
      const target = event.target as Node;

      // ÌîÑÎ°úÌïÑ Î≤ÑÌäº ÌÅ¥Î¶≠ÏùÄ Ï†úÏô∏
      if (profileButtonRef.current?.contains(target)) {
        return;
      }

      // ÎìúÎ°≠Îã§Ïö¥ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
      if (dropdownRef.current && !dropdownRef.current.contains(target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside, {
      passive: true,
      capture: false,
    });

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  // ESC ÌÇ§Î°ú ÎìúÎ°≠Îã§Ïö¥ Îã´Í∏∞
  useEffect(() => {
    if (!isOpen) return;

    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        e.preventDefault();
        setIsOpen(false);
      }
    };

    document.addEventListener('keydown', handleEscape, { passive: false });
    return () => document.removeEventListener('keydown', handleEscape);
  }, [isOpen]);

  // Ïä§ÌÅ¨Î°§ Ïãú ÎìúÎ°≠Îã§Ïö¥ Îã´Í∏∞ (ÎîîÎ∞îÏö¥Ïä§ Ï†ÅÏö©)
  useEffect(() => {
    if (!isOpen) return;

    let scrollTimeout: NodeJS.Timeout;
    const handleScroll = () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => setIsOpen(false), 100);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => {
      window.removeEventListener('scroll', handleScroll);
      clearTimeout(scrollTimeout);
    };
  }, [isOpen]);

  // ÏúàÎèÑÏö∞ Î¶¨ÏÇ¨Ïù¥Ï¶à Ïãú ÏúÑÏπò Ïû¨Í≥ÑÏÇ∞ (ÎîîÎ∞îÏö¥Ïä§ Ï†ÅÏö©)
  useEffect(() => {
    if (!isOpen) return;

    let resizeTimeout: NodeJS.Timeout;
    const handleResize = () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        calculateDropdownPosition();
      }, 150);
    };

    window.addEventListener('resize', handleResize, { passive: true });
    return () => {
      window.removeEventListener('resize', handleResize);
      clearTimeout(resizeTimeout);
    };
  }, [isOpen, calculateDropdownPosition]);

  return {
    isOpen,
    dropdownPosition,
    dropdownRef,
    profileButtonRef,
    toggleDropdown,
    closeDropdown,
    calculateDropdownPosition,
  };
}; 