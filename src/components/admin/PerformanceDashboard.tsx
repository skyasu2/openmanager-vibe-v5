/**
 * üìä ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÎåÄÏãúÎ≥¥Îìú v2.0
 *
 * ‚úÖ Ïã§ÏãúÍ∞Ñ AI ÏóîÏßÑ ÏÑ±Îä• Ï∂îÏ†Å
 * ‚úÖ Ìè¥Î∞± ÏãúÏä§ÌÖú Î™®ÎãàÌÑ∞ÎßÅ
 * ‚úÖ ÏÑ±Îä• ÏïåÎ¶º Î∞è Í≤ΩÍ≥†
 * ‚úÖ Ìä∏Î†åÎìú Î∂ÑÏÑù Î∞è ÏòàÏ∏°
 */

'use client';

import { AnimatePresence, motion } from 'framer-motion';
import {
  Activity,
  AlertTriangle,
  BarChart3,
  Bell,
  BellOff,
  Brain,
  CheckCircle,
  Clock,
  Download,
  Filter,
  RefreshCw,
  Search,
  Target,
  TrendingUp,
  Wifi,
  WifiOff,
  Zap,
} from 'lucide-react';
import dynamic from 'next/dynamic';
import { useCallback, useEffect, useState } from 'react';
import { Badge } from '../ui/badge';
import { Button } from '../ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';

// ÎèôÏ†Å importÎ°ú Ï∞®Ìä∏ Ïª¥Ìè¨ÎÑåÌä∏Îì§ Î°úÎìú
import type {
  AreaChart as AreaChartType,
  BarChart as BarChartType,
  LineChart as LineChartType,
  PieChart as PieChartType,
  ResponsiveContainer as ResponsiveContainerType,
  XAxis as XAxisType,
  YAxis as YAxisType,
  CartesianGrid as CartesianGridType,
  Tooltip as TooltipType,
  Area as AreaType,
  Bar as BarType,
  Line as LineType,
  Cell as CellType,
  Pie as PieType,
} from 'recharts';

const AreaChart = dynamic(
  () => import('recharts').then(mod => mod.AreaChart as any),
  { ssr: false }
) as React.ComponentType<React.ComponentProps<typeof AreaChartType>>;

const BarChart = dynamic(
  () => import('recharts').then(mod => mod.BarChart as any),
  { ssr: false }
) as React.ComponentType<React.ComponentProps<typeof BarChartType>>;

const LineChart = dynamic(
  () => import('recharts').then(mod => mod.LineChart as any),
  { ssr: false }
) as React.ComponentType<React.ComponentProps<typeof LineChartType>>;

const PieChart = dynamic(
  () => import('recharts').then(mod => mod.PieChart as any),
  { ssr: false }
) as React.ComponentType<React.ComponentProps<typeof PieChartType>>;

const ResponsiveContainer = dynamic(
  () => import('recharts').then(mod => mod.ResponsiveContainer as any),
  { ssr: false }
) as React.ComponentType<React.ComponentProps<typeof ResponsiveContainerType>>;

const XAxis = dynamic(() => import('recharts').then(mod => mod.XAxis as any), {
  ssr: false,
}) as React.ComponentType<React.ComponentProps<typeof XAxisType>>;

const YAxis = dynamic(() => import('recharts').then(mod => mod.YAxis as any), {
  ssr: false,
}) as React.ComponentType<React.ComponentProps<typeof YAxisType>>;

const CartesianGrid = dynamic(
  () => import('recharts').then(mod => mod.CartesianGrid as any),
  { ssr: false }
) as React.ComponentType<React.ComponentProps<typeof CartesianGridType>>;

const Tooltip = dynamic(
  () => import('recharts').then(mod => mod.Tooltip as any),
  { ssr: false }
) as React.ComponentType<React.ComponentProps<typeof TooltipType>>;

const Area = dynamic(() => import('recharts').then(mod => mod.Area as any), {
  ssr: false,
}) as React.ComponentType<React.ComponentProps<typeof AreaType>>;

const Bar = dynamic(() => import('recharts').then(mod => mod.Bar as any), {
  ssr: false,
}) as React.ComponentType<React.ComponentProps<typeof BarType>>;

const Line = dynamic(() => import('recharts').then(mod => mod.Line as any), {
  ssr: false,
}) as React.ComponentType<React.ComponentProps<typeof LineType>>;

const Cell = dynamic(() => import('recharts').then(mod => mod.Cell as any), {
  ssr: false,
}) as React.ComponentType<React.ComponentProps<typeof CellType>>;

const Pie = dynamic(() => import('recharts').then(mod => mod.Pie as any), {
  ssr: false,
}) as React.ComponentType<React.ComponentProps<typeof PieType>>;

// ÌÉÄÏûÖ Ï†ïÏùò
interface PerformanceMetrics {
  totalRequests: number;
  averageResponseTime: number;
  successRate: number;
  errorRate: number;
  fallbackRate: number;
  engineStats: Record<
    string,
    {
      requests: number;
      averageResponseTime: number;
      successRate: number;
      confidence: number;
    }
  >;
  modeStats: Record<
    string,
    {
      requests: number;
      averageResponseTime: number;
      successRate: number;
    }
  >;
  hourlyStats: Array<{
    hour: string;
    requests: number;
    averageResponseTime: number;
    successRate: number;
  }>;
  lastUpdated: string;
}

interface PerformanceAlert {
  id: string;
  type: 'warning' | 'critical';
  engine: string;
  message: string;
  metric: string;
  value: number;
  threshold: number;
  timestamp: string;
}

interface PerformanceData {
  stats: PerformanceMetrics;
  alerts: PerformanceAlert[];
  status: {
    enabled: boolean;
    metricsCount: number;
    alertsCount: number;
    lastMetricTime?: string;
  };
}

// ÏÉâÏÉÅ ÌåîÎ†àÌä∏
const COLORS = {
  primary: '#3B82F6',
  success: '#10B981',
  warning: '#F59E0B',
  danger: '#EF4444',
  info: '#06B6D4',
  purple: '#8B5CF6',
  pink: '#EC4899',
  indigo: '#6366F1',
};

const ENGINE_COLORS: Record<string, string> = {
  'supabase-rag': COLORS.success,
  'google-ai': COLORS.primary,
  'mcp-context': COLORS.purple,
  'korean-ai': COLORS.pink,
  transformers: COLORS.indigo,
  fallback: COLORS.warning,
  emergency: COLORS.danger,
};

export default function PerformanceDashboard() {
  const [data, setData] = useState<PerformanceData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  const [autoRefresh, setAutoRefresh] = useState(true);
  const [selectedTimeRange, setSelectedTimeRange] = useState('60'); // Î∂Ñ Îã®ÏúÑ
  const [selectedTab, setSelectedTab] = useState('overview');
  const [alertsEnabled, setAlertsEnabled] = useState(true);
  const [filterEngine, setFilterEngine] = useState<string>('all');
  const [searchQuery, setSearchQuery] = useState('');

  // üì° ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchPerformanceData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      // performance API Ï†úÍ±∞Î°ú Ïù∏Ìïú Î™®ÌÇπ (Vercel Î¨¥Î£å Ìã∞Ïñ¥ ÏµúÏ†ÅÌôî)
      await new Promise(resolve => setTimeout(resolve, 300)); // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏßÄÏó∞ ÏãúÎÆ¨Î†àÏù¥ÏÖò

      const mockData = {
        stats: {
          totalRequests: Math.floor(Math.random() * 1000) + 500,
          averageResponseTime: Math.floor(Math.random() * 100) + 120,
          successRate: (95 + Math.random() * 4) / 100,
          errorRate: (Math.random() * 3) / 100,
          fallbackRate: (Math.random() * 10) / 100,
          engineStats: {
            'google-ai': {
              requests: 150,
              averageResponseTime: 250,
              successRate: 0.98,
              confidence: 0.95,
            },
            mcp: {
              requests: 200,
              averageResponseTime: 180,
              successRate: 0.96,
              confidence: 0.93,
            },
            rag: {
              requests: 120,
              averageResponseTime: 200,
              successRate: 0.94,
              confidence: 0.89,
            },
          },
          modeStats: {
            'google-only': {
              requests: 300,
              averageResponseTime: 235,
              successRate: 0.99,
            },
            'with-fallback': {
              requests: 150,
              averageResponseTime: 280,
              successRate: 0.98,
            },
            hybrid: {
              requests: 20,
              averageResponseTime: 195,
              successRate: 0.97,
            },
          },
          hourlyStats: Array.from({ length: 24 }, (_, i) => ({
            hour: new Date(
              Date.now() - (23 - i) * 60 * 60 * 1000
            ).toISOString(),
            requests: Math.floor(Math.random() * 100) + 50,
            averageResponseTime: Math.floor(Math.random() * 200) + 150,
            successRate: 0.95 + Math.random() * 0.05,
          })),
          lastUpdated: new Date().toISOString(),
        },
        alerts: [],
        status: {
          enabled: true,
          metricsCount: Math.floor(Math.random() * 1000) + 500,
          alertsCount: 0,
          lastMetricTime: new Date().toISOString(),
        },
      };

      setData(mockData);
      setLastUpdate(new Date());

      console.log('‚úÖ ÏÑ±Îä• ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å (Î™®ÌÇπ)');
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§';
      setError(errorMessage);
      console.error('‚ùå ÏÑ±Îä• ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', err);
    } finally {
      setLoading(false);
    }
  }, [selectedTimeRange]);

  // üîÑ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®
  useEffect(() => {
    fetchPerformanceData();

    if (autoRefresh) {
      const interval = setInterval(fetchPerformanceData, 30000); // 30Ï¥àÎßàÎã§
      return () => clearInterval(interval);
    }
    return;
  }, [autoRefresh, fetchPerformanceData]);

  // üìä Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
  const getEnginePerformanceData = () => {
    if (!data?.stats.engineStats) return [];

    return Object.entries(data.stats.engineStats).map(([engine, stats]) => ({
      name: engine,
      requests: stats.requests,
      responseTime: stats.averageResponseTime,
      successRate: stats.successRate * 100,
      confidence: stats.confidence * 100,
      color: ENGINE_COLORS[engine] || COLORS.info,
    }));
  };

  const getModeDistributionData = () => {
    if (!data?.stats.modeStats) return [];

    return Object.entries(data.stats.modeStats).map(([mode, stats]) => ({
      name: mode,
      value: stats.requests,
      successRate: stats.successRate * 100,
    }));
  };

  const getHourlyTrendsData = () => {
    if (!data?.stats.hourlyStats) return [];

    return data.stats.hourlyStats.map(stat => ({
      time: new Date(stat.hour).toLocaleTimeString('ko-KR', {
        hour: '2-digit',
        minute: '2-digit',
      }),
      requests: stat.requests,
      responseTime: stat.averageResponseTime,
      successRate: stat.successRate * 100,
    }));
  };

  // üö® ÏïåÎ¶º ÌïÑÌÑ∞ÎßÅ
  const getFilteredAlerts = () => {
    if (!data?.alerts) return [];

    let filtered = data.alerts;

    if (filterEngine !== 'all') {
      filtered = filtered.filter(alert => alert.engine === filterEngine);
    }

    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(
        alert =>
          alert.message.toLowerCase().includes(query) ||
          alert.engine.toLowerCase().includes(query)
      );
    }

    return filtered.sort(
      (a, b) =>
        new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
    );
  };

  // üé® Ïª§Ïä§ÌÖÄ Ìà¥ÌåÅ
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className='bg-white p-3 border border-gray-200 rounded-lg shadow-lg'>
          <p className='font-semibold text-gray-800'>{label}</p>
          {payload.map((entry: any, index: number) => (
            <p key={index} style={{ color: entry.color }} className='text-sm'>
              {entry.name}:{' '}
              {typeof entry.value === 'number'
                ? entry.value.toFixed(1)
                : entry.value}
              {entry.name.includes('Rate') || entry.name.includes('confidence')
                ? '%'
                : ''}
            </p>
          ))}
        </div>
      );
    }
    return null;
  };

  // üéØ ÏÑ±Îä• Ï†êÏàò Í≥ÑÏÇ∞
  const calculatePerformanceScore = () => {
    if (!data?.stats) return 0;

    const { successRate, averageResponseTime, errorRate } = data.stats;

    // ÏÑ±Í≥µÎ•† (40%), ÏùëÎãµÏãúÍ∞Ñ (40%), ÏóêÎü¨Ïú® (20%) Í∞ÄÏ§ëÏπò
    const successScore = successRate * 40;
    const responseScore = Math.max(0, (5000 - averageResponseTime) / 5000) * 40;
    const errorScore = Math.max(0, (0.1 - errorRate) / 0.1) * 20;

    return Math.round(successScore + responseScore + errorScore);
  };

  // üîÑ ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ®
  const handleManualRefresh = () => {
    fetchPerformanceData();
  };

  // üì• Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ (Î™®ÌÇπ - Vercel Î¨¥Î£å Ìã∞Ïñ¥ ÏµúÏ†ÅÌôî)
  const handleExportData = async () => {
    try {
      // ÌòÑÏû¨ ÌëúÏãúÎêú Îç∞Ïù¥ÌÑ∞Î•º JSONÏúºÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞
      const exportData = {
        timestamp: new Date().toISOString(),
        timeRange: selectedTimeRange,
        data: data,
        source: 'portfolio-demo',
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], {
        type: 'application/json',
      });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `performance-data-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïã§Ìå®:', error);
    }
  };

  // Î°úÎî© ÏÉÅÌÉú
  if (loading && !data) {
    return (
      <div className='p-6 space-y-6'>
        <div className='flex items-center justify-center h-64'>
          <div className='flex items-center gap-2 text-blue-600'>
            <RefreshCw className='w-6 h-6 animate-spin' />
            <span>ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...</span>
          </div>
        </div>
      </div>
    );
  }

  // ÏóêÎü¨ ÏÉÅÌÉú
  if (error) {
    return (
      <div className='p-6'>
        <div className='bg-red-50 border border-red-200 rounded-lg p-6 text-center'>
          <AlertTriangle className='w-12 h-12 text-red-500 mx-auto mb-4' />
          <h3 className='text-lg font-semibold text-red-800 mb-2'>
            Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®
          </h3>
          <p className='text-red-600 mb-4'>{error}</p>
          <Button onClick={handleManualRefresh} variant='destructive'>
            <RefreshCw className='w-4 h-4 mr-2' />
            Îã§Ïãú ÏãúÎèÑ
          </Button>
        </div>
      </div>
    );
  }

  if (!data) return null;

  const performanceScore = calculatePerformanceScore();
  const engineData = getEnginePerformanceData();
  const modeData = getModeDistributionData();
  const trendsData = getHourlyTrendsData();
  const filteredAlerts = getFilteredAlerts();

  return (
    <div className='p-6 space-y-6 bg-gray-50 min-h-screen'>
      {/* Ìó§Îçî */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className='flex items-center justify-between'
      >
        <div>
          <h1 className='text-3xl font-bold text-gray-900 flex items-center gap-3'>
            <div className='w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center'>
              <Activity className='w-6 h-6 text-white' />
            </div>
            AI ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÎåÄÏãúÎ≥¥Îìú
          </h1>
          <p className='text-gray-600 mt-1'>Ïã§ÏãúÍ∞Ñ AI ÏóîÏßÑ ÏÑ±Îä• Ï∂îÏ†Å Î∞è Î∂ÑÏÑù</p>
        </div>

        <div className='flex items-center gap-4'>
          {/* ÏãúÍ∞Ñ Î≤îÏúÑ ÏÑ†ÌÉù */}
          <select
            value={selectedTimeRange}
            onChange={e => setSelectedTimeRange(e.target.value)}
            className='px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500'
          >
            <option value='30'>ÏµúÍ∑º 30Î∂Ñ</option>
            <option value='60'>ÏµúÍ∑º 1ÏãúÍ∞Ñ</option>
            <option value='360'>ÏµúÍ∑º 6ÏãúÍ∞Ñ</option>
            <option value='1440'>ÏµúÍ∑º 24ÏãúÍ∞Ñ</option>
          </select>

          {/* ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® ÌÜ†Í∏Ä */}
          <Button
            variant={autoRefresh ? 'default' : 'outline'}
            size='sm'
            onClick={() => setAutoRefresh(!autoRefresh)}
          >
            {autoRefresh ? (
              <Wifi className='w-4 h-4 mr-2' />
            ) : (
              <WifiOff className='w-4 h-4 mr-2' />
            )}
            ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® {autoRefresh ? 'ON' : 'OFF'}
          </Button>

          {/* ÏïåÎ¶º ÌÜ†Í∏Ä */}
          <Button
            variant={alertsEnabled ? 'default' : 'outline'}
            size='sm'
            onClick={() => setAlertsEnabled(!alertsEnabled)}
          >
            {alertsEnabled ? (
              <Bell className='w-4 h-4 mr-2' />
            ) : (
              <BellOff className='w-4 h-4 mr-2' />
            )}
            ÏïåÎ¶º {alertsEnabled ? 'ON' : 'OFF'}
          </Button>

          {/* ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ® */}
          <Button
            variant='outline'
            size='sm'
            onClick={handleManualRefresh}
            disabled={loading}
          >
            <RefreshCw
              className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`}
            />
            ÏÉàÎ°úÍ≥†Ïπ®
          </Button>

          {/* Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ */}
          <Button variant='outline' size='sm' onClick={handleExportData}>
            <Download className='w-4 h-4 mr-2' />
            ÎÇ¥Î≥¥ÎÇ¥Í∏∞
          </Button>
        </div>
      </motion.div>

      {/* ÏöîÏïΩ Î©îÌä∏Î¶≠ Ïπ¥Îìú */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4'
      >
        {/* ÏÑ±Îä• Ï†êÏàò */}
        <Card className='bg-gradient-to-r from-blue-500 to-purple-600 text-white'>
          <CardContent className='p-6'>
            <div className='flex items-center justify-between'>
              <div>
                <p className='text-blue-100 text-sm'>ÏÑ±Îä• Ï†êÏàò</p>
                <p className='text-3xl font-bold'>{performanceScore}</p>
                <p className='text-blue-100 text-xs'>/ 100</p>
              </div>
              <Target className='w-8 h-8 text-blue-200' />
            </div>
          </CardContent>
        </Card>

        {/* Ï¥ù ÏöîÏ≤≠ Ïàò */}
        <Card>
          <CardContent className='p-6'>
            <div className='flex items-center justify-between'>
              <div>
                <p className='text-gray-600 text-sm'>Ï¥ù ÏöîÏ≤≠</p>
                <p className='text-2xl font-bold text-gray-900'>
                  {data.stats.totalRequests.toLocaleString()}
                </p>
              </div>
              <BarChart3 className='w-6 h-6 text-blue-500' />
            </div>
          </CardContent>
        </Card>

        {/* ÌèâÍ∑† ÏùëÎãµÏãúÍ∞Ñ */}
        <Card>
          <CardContent className='p-6'>
            <div className='flex items-center justify-between'>
              <div>
                <p className='text-gray-600 text-sm'>ÌèâÍ∑† ÏùëÎãµÏãúÍ∞Ñ</p>
                <p className='text-2xl font-bold text-gray-900'>
                  {Math.round(data.stats.averageResponseTime)}ms
                </p>
              </div>
              <Clock className='w-6 h-6 text-orange-500' />
            </div>
          </CardContent>
        </Card>

        {/* ÏÑ±Í≥µÎ•† */}
        <Card>
          <CardContent className='p-6'>
            <div className='flex items-center justify-between'>
              <div>
                <p className='text-gray-600 text-sm'>ÏÑ±Í≥µÎ•†</p>
                <p className='text-2xl font-bold text-green-600'>
                  {(data.stats.successRate * 100).toFixed(1)}%
                </p>
              </div>
              <CheckCircle className='w-6 h-6 text-green-500' />
            </div>
          </CardContent>
        </Card>

        {/* Ìè¥Î∞±Î•† */}
        <Card>
          <CardContent className='p-6'>
            <div className='flex items-center justify-between'>
              <div>
                <p className='text-gray-600 text-sm'>Ìè¥Î∞±Î•†</p>
                <p className='text-2xl font-bold text-yellow-600'>
                  {(data.stats.fallbackRate * 100).toFixed(1)}%
                </p>
              </div>
              <Zap className='w-6 h-6 text-yellow-500' />
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Î©îÏù∏ ÎåÄÏãúÎ≥¥Îìú ÌÉ≠ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
      >
        <Tabs value={selectedTab} onValueChange={setSelectedTab}>
          <TabsList className='grid w-full grid-cols-4'>
            <TabsTrigger value='overview'>üìä Í∞úÏöî</TabsTrigger>
            <TabsTrigger value='engines'>ü§ñ ÏóîÏßÑ ÏÑ±Îä•</TabsTrigger>
            <TabsTrigger value='trends'>üìà Ìä∏Î†åÎìú</TabsTrigger>
            <TabsTrigger value='alerts'>üö® ÏïåÎ¶º</TabsTrigger>
          </TabsList>

          {/* Í∞úÏöî ÌÉ≠ */}
          <TabsContent value='overview' className='space-y-6'>
            <div className='grid grid-cols-1 lg:grid-cols-2 gap-6'>
              {/* Î™®ÎìúÎ≥Ñ Î∂ÑÌè¨ */}
              <Card>
                <CardHeader>
                  <CardTitle className='flex items-center gap-2'>
                    <Brain className='w-5 h-5 text-purple-600' />
                    AI Î™®Îìú Î∂ÑÌè¨
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className='h-64'>
                    <ResponsiveContainer width='100%' height='100%'>
                      <PieChart>
                        <Pie
                          data={modeData}
                          cx='50%'
                          cy='50%'
                          outerRadius={80}
                          dataKey='value'
                          label={({ name, value }) => `${name}: ${value}`}
                        >
                          {modeData.map((entry, index) => (
                            <Cell
                              key={`cell-${index}`}
                              fill={
                                Object.values(COLORS)[
                                  index % Object.values(COLORS).length
                                ]
                              }
                            />
                          ))}
                        </Pie>
                        <Tooltip content={<CustomTooltip />} />
                      </PieChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>

              {/* ÏãúÍ∞ÑÎ≥Ñ ÏöîÏ≤≠ Ìä∏Î†åÎìú */}
              <Card>
                <CardHeader>
                  <CardTitle className='flex items-center gap-2'>
                    <TrendingUp className='w-5 h-5 text-blue-600' />
                    ÏãúÍ∞ÑÎ≥Ñ ÏöîÏ≤≠ Ìä∏Î†åÎìú
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className='h-64'>
                    <ResponsiveContainer width='100%' height='100%'>
                      <AreaChart data={trendsData}>
                        <CartesianGrid strokeDasharray='3 3' />
                        <XAxis dataKey='time' />
                        <YAxis />
                        <Tooltip content={<CustomTooltip />} />
                        <Area
                          type='monotone'
                          dataKey='requests'
                          stroke={COLORS.primary}
                          fill={COLORS.primary}
                          fillOpacity={0.3}
                        />
                      </AreaChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* ÏóîÏßÑ ÏÑ±Îä• ÌÉ≠ */}
          <TabsContent value='engines' className='space-y-6'>
            <Card>
              <CardHeader>
                <CardTitle className='flex items-center gap-2'>
                  <Zap className='w-5 h-5 text-yellow-600' />
                  ÏóîÏßÑÎ≥Ñ ÏÑ±Îä• ÎπÑÍµê
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className='h-96'>
                  <ResponsiveContainer width='100%' height='100%'>
                    <BarChart data={engineData}>
                      <CartesianGrid strokeDasharray='3 3' />
                      <XAxis dataKey='name' />
                      <YAxis yAxisId='left' />
                      <YAxis yAxisId='right' orientation='right' />
                      <Tooltip content={<CustomTooltip />} />
                      <Bar
                        yAxisId='left'
                        dataKey='requests'
                        fill={COLORS.primary}
                        name='ÏöîÏ≤≠ Ïàò'
                      />
                      <Bar
                        yAxisId='left'
                        dataKey='responseTime'
                        fill={COLORS.warning}
                        name='ÏùëÎãµÏãúÍ∞Ñ(ms)'
                      />
                      <Bar
                        yAxisId='right'
                        dataKey='successRate'
                        fill={COLORS.success}
                        name='ÏÑ±Í≥µÎ•†(%)'
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Ìä∏Î†åÎìú ÌÉ≠ */}
          <TabsContent value='trends' className='space-y-6'>
            <Card>
              <CardHeader>
                <CardTitle className='flex items-center gap-2'>
                  <TrendingUp className='w-5 h-5 text-green-600' />
                  ÏÑ±Îä• Ìä∏Î†åÎìú Î∂ÑÏÑù
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className='h-96'>
                  <ResponsiveContainer width='100%' height='100%'>
                    <LineChart data={trendsData}>
                      <CartesianGrid strokeDasharray='3 3' />
                      <XAxis dataKey='time' />
                      <YAxis yAxisId='left' />
                      <YAxis yAxisId='right' orientation='right' />
                      <Tooltip content={<CustomTooltip />} />
                      <Line
                        yAxisId='left'
                        type='monotone'
                        dataKey='responseTime'
                        stroke={COLORS.warning}
                        strokeWidth={2}
                        name='ÏùëÎãµÏãúÍ∞Ñ(ms)'
                      />
                      <Line
                        yAxisId='right'
                        type='monotone'
                        dataKey='successRate'
                        stroke={COLORS.success}
                        strokeWidth={2}
                        name='ÏÑ±Í≥µÎ•†(%)'
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* ÏïåÎ¶º ÌÉ≠ */}
          <TabsContent value='alerts' className='space-y-6'>
            {/* ÏïåÎ¶º ÌïÑÌÑ∞ */}
            <div className='flex items-center gap-4'>
              <div className='flex items-center gap-2'>
                <Filter className='w-4 h-4 text-gray-500' />
                <select
                  value={filterEngine}
                  onChange={e => setFilterEngine(e.target.value)}
                  className='px-3 py-2 border border-gray-300 rounded-lg'
                >
                  <option value='all'>Î™®Îì† ÏóîÏßÑ</option>
                  {Object.keys(ENGINE_COLORS).map(engine => (
                    <option key={engine} value={engine}>
                      {engine}
                    </option>
                  ))}
                </select>
              </div>

              <div className='flex items-center gap-2 flex-1'>
                <Search className='w-4 h-4 text-gray-500' />
                <input
                  type='text'
                  placeholder='ÏïåÎ¶º Í≤ÄÏÉâ...'
                  value={searchQuery}
                  onChange={e => setSearchQuery(e.target.value)}
                  className='flex-1 px-3 py-2 border border-gray-300 rounded-lg'
                />
              </div>
            </div>

            {/* ÏïåÎ¶º Î™©Î°ù */}
            <Card>
              <CardHeader>
                <CardTitle className='flex items-center gap-2'>
                  <AlertTriangle className='w-5 h-5 text-red-600' />
                  ÏÑ±Îä• ÏïåÎ¶º ({filteredAlerts.length})
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className='space-y-3 max-h-96 overflow-y-auto'>
                  <AnimatePresence>
                    {filteredAlerts.map((alert, index) => (
                      <motion.div
                        key={alert.id}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: 20 }}
                        transition={{ delay: index * 0.1 }}
                        className={`p-4 rounded-lg border-l-4 ${
                          alert.type === 'critical'
                            ? 'bg-red-50 border-red-500'
                            : 'bg-yellow-50 border-yellow-500'
                        }`}
                      >
                        <div className='flex items-start justify-between'>
                          <div className='flex-1'>
                            <div className='flex items-center gap-2 mb-1'>
                              <Badge
                                variant={
                                  alert.type === 'critical'
                                    ? 'destructive'
                                    : 'secondary'
                                }
                              >
                                {alert.type === 'critical'
                                  ? 'CRITICAL'
                                  : 'WARNING'}
                              </Badge>
                              <span className='text-sm font-medium text-gray-900'>
                                {alert.engine}
                              </span>
                            </div>
                            <p className='text-sm text-gray-700 mb-2'>
                              {alert.message}
                            </p>
                            <div className='flex items-center gap-4 text-xs text-gray-500'>
                              <span>
                                {alert.metric}: {alert.value.toFixed(2)}
                                {alert.metric.includes('Rate')
                                  ? '%'
                                  : alert.metric.includes('Time')
                                    ? 'ms'
                                    : ''}
                              </span>
                              <span>
                                ÏûÑÍ≥ÑÍ∞í: {alert.threshold}
                                {alert.metric.includes('Rate')
                                  ? '%'
                                  : alert.metric.includes('Time')
                                    ? 'ms'
                                    : ''}
                              </span>
                              <span>
                                {new Date(alert.timestamp).toLocaleString(
                                  'ko-KR'
                                )}
                              </span>
                            </div>
                          </div>
                          <AlertTriangle
                            className={`w-5 h-5 ${
                              alert.type === 'critical'
                                ? 'text-red-500'
                                : 'text-yellow-500'
                            }`}
                          />
                        </div>
                      </motion.div>
                    ))}
                  </AnimatePresence>

                  {filteredAlerts.length === 0 && (
                    <div className='text-center py-8 text-gray-500'>
                      <CheckCircle className='w-12 h-12 mx-auto mb-2 text-green-500' />
                      <p>ÌòÑÏû¨ ÌôúÏÑ± ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§.</p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </motion.div>

      {/* ÌïòÎã® ÏÉÅÌÉú Ï†ïÎ≥¥ */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.3 }}
        className='flex items-center justify-between text-sm text-gray-500 pt-4 border-t border-gray-200'
      >
        <div className='flex items-center gap-4'>
          <span>Î™®ÎãàÌÑ∞ÎßÅ ÏÉÅÌÉú: {data.status.enabled ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}</span>
          <span>Î©îÌä∏Î¶≠ Ïàò: {data.status.metricsCount.toLocaleString()}</span>
          <span>ÏïåÎ¶º Ïàò: {data.status.alertsCount}</span>
        </div>

        {lastUpdate && (
          <span>ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: {lastUpdate.toLocaleTimeString('ko-KR')}</span>
        )}
      </motion.div>
    </div>
  );
}
