import { useCallback, useEffect, useMemo, useState } from 'react';
import { safeConsoleError } from '../lib/utils-functions';

interface UseNaturalLoadingTimeProps {
  actualLoadingPromise?: Promise<unknown> | null;
  skipCondition?: boolean;
  onComplete?: () => void;
}

interface LoadingPhase {
  phase: 'system-starting' | 'data-loading' | 'completed';
  progress: number;
  message: string;
  elapsedTime: number;
}

interface LoadingState {
  isLoading: boolean;
  progress: number;
  estimatedTimeRemaining: number;
  phase: 'system-starting' | 'data-loading' | 'python-warmup' | 'completed';
  elapsedTime: number;
}

/**
 * üé¨ useNaturalLoadingTime Hook v2.1 - Ìò∏ÌôòÏÑ± Í∞úÏÑ†
 *
 * Ïã§Ï†ú ÏãúÏä§ÌÖú Í∞ÄÎèô ÏãúÍ∞ÑÏùÑ ÏûêÏó∞Ïä§ÎüΩÍ≤å Î∞òÏòÅÌïòÎäî Î°úÎî© ÌõÖ
 * - ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî (ÌååÏù¥Ïç¨ ÏóîÏßÑ Í∞ÄÎèô)
 * - Îç∞Ïù¥ÌÑ∞ Î°úÎî© (ÏÑúÎ≤Ñ Î™©Î°ù, Î©îÌä∏Î¶≠)
 * - ÏµúÏ¢Ö Ï§ÄÎπÑ ÏôÑÎ£å
 * - ÌîÑÎ°†Ìä∏ÏóîÎìú Íµ¨ÏÑ± 90% Ïú†ÏßÄÌïòÎ©¥ÏÑú Ìò∏ÌôòÏÑ± Î¨∏Ï†ú Ìï¥Í≤∞
 *
 * @param actualLoadingPromise - Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Î°úÎî© Promise
 * @param skipCondition - Ïä§ÌÇµ Ï°∞Í±¥ (URL ÌååÎùºÎØ∏ÌÑ∞ Îì±)
 * @param onComplete - ÏôÑÎ£å Ïãú Ìò∏Ï∂úÎê† ÏΩúÎ∞± Ìï®Ïàò
 */
export const useNaturalLoadingTime = ({
  actualLoadingPromise = null,
  skipCondition = false,
  onComplete,
}: UseNaturalLoadingTimeProps): LoadingState => {
  const [isLoading, setIsLoading] = useState(true);
  const [progress, setProgress] = useState(0);
  const [phase, setPhase] = useState<LoadingState['phase']>('system-starting');
  const [startTime] = useState(() => Date.now());
  const [elapsedTime, setElapsedTime] = useState(0);
  const [isCompleted, setIsCompleted] = useState(false);

  // ÏòàÏÉÅ ÎÇ®ÏùÄ ÏãúÍ∞Ñ Í≥ÑÏÇ∞ (ÏûêÏó∞Ïä§Îü¨Ïö¥ Ï∂îÏ†ï)
  const estimatedTimeRemaining = useMemo(() => {
    if (phase === 'completed') return 0;

    // Í∞Å Îã®Í≥ÑÎ≥Ñ ÏòàÏÉÅ ÏãúÍ∞Ñ
    const phaseEstimates = {
      'system-starting': 2000, // ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ~2Ï¥à
      'data-loading': 1500, // Îç∞Ïù¥ÌÑ∞ Î°úÎî© ~1.5Ï¥à
      'python-warmup': 1000, // ÌååÏù¥Ïç¨ ÏõúÏóÖ ~1Ï¥à
    };

    const currentPhaseEstimate = phaseEstimates[phase] || 1000;
    return Math.max(500, currentPhaseEstimate - (elapsedTime % 2000));
  }, [phase, elapsedTime]);

  // ÌôïÏã§Ìïú ÏôÑÎ£å Ï≤òÎ¶¨ Ìï®Ïàò (Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ)
  const handleComplete = useCallback(() => {
    if (!isCompleted) {
      console.log('üéØ useNaturalLoadingTime ÏôÑÎ£å Ï≤òÎ¶¨ ÏãúÏûë');
      setIsCompleted(true);
      setIsLoading(false);
      setPhase('completed');
      setProgress(100);

      // ÏΩúÎ∞± Ìò∏Ï∂ú (ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ÏúºÎ°ú ÏïàÏ†ïÏÑ± ÌôïÎ≥¥)
      setTimeout(() => {
        try {
          console.log('üéâ onComplete ÏΩúÎ∞± Ìò∏Ï∂ú');
          onComplete?.();
        } catch (error) {
          safeConsoleError('‚ùå onComplete ÏΩúÎ∞± Ïã§Ìñâ Ï§ë ÏóêÎü¨', error);
          // ÏΩúÎ∞± ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï¥ÎèÑ Î°úÎî©ÏùÄ ÏôÑÎ£åÎêú Í≤ÉÏúºÎ°ú Ï≤òÎ¶¨
        }
      }, 100);
    }
  }, [isCompleted, onComplete]);

  // Ïä§ÌÇµ Ï°∞Í±¥ Ï≤¥ÌÅ¨ (Ï¶âÏãú Ïã§Ìñâ)
  useEffect(() => {
    if (skipCondition && !isCompleted) {
      console.log('‚ö° Î°úÎî© Ïï†ÎãàÎ©îÏù¥ÏÖò Ïä§ÌÇµ - Ï¶âÏãú ÏôÑÎ£å');
      // Ï¶âÏãú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setIsCompleted(true);
      setIsLoading(false);
      setPhase('completed');
      setProgress(100);

      // ÏΩúÎ∞±ÎèÑ Ï¶âÏãú Ïã§Ìñâ
      setTimeout(() => {
        try {
          console.log('üéâ onComplete ÏΩúÎ∞± Ï¶âÏãú Ìò∏Ï∂ú');
          onComplete?.();
        } catch (error) {
          safeConsoleError('‚ùå onComplete ÏΩúÎ∞± Ïã§Ìñâ Ï§ë ÏóêÎü¨', error);
        }
      }, 10); // Îß§Ïö∞ ÏßßÏùÄ ÏßÄÏó∞ÏúºÎ°ú Ï¶âÏãú Ïã§Ìñâ
      return;
    }
  }, [skipCondition, isCompleted, onComplete]);

  // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§Î°ú Ï¶âÏãú ÏôÑÎ£å
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (
        (e.key === 'Enter' || e.key === ' ' || e.key === 'Escape') &&
        !isCompleted
      ) {
        console.log(`üöÄ ${e.key} ÌÇ§Î°ú Ï¶âÏãú ÏôÑÎ£å`);
        handleComplete();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [handleComplete, isCompleted]);

  // Ï†ÑÏó≠ Í∞úÎ∞úÏûê ÎèÑÍµ¨ Îì±Î°ù
  useEffect(() => {
    (window as any).debugLoadingState = {
      isLoading,
      phase,
      progress,
      isCompleted,
      elapsedTime,
      timestamp: Date.now(),
    };

    (window as any).emergencyComplete = () => {
      console.log('üö® ÎπÑÏÉÅ ÏôÑÎ£å Ïã§Ìñâ!');
      handleComplete();
    };

    (window as any).skipToServer = () => {
      console.log('üöÄ ÏÑúÎ≤Ñ ÎåÄÏãúÎ≥¥ÎìúÎ°ú Î∞îÎ°ú Ïù¥Îèô');
      window.location.href = '/dashboard?instant=true';
    };
  }, [isLoading, phase, progress, isCompleted, elapsedTime, handleComplete]);

  // ÏûêÏó∞Ïä§Îü¨Ïö¥ Î°úÎî© Î°úÏßÅ
  useEffect(() => {
    if (skipCondition || isCompleted) return;

    console.log('üé¨ ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏãúÏä§ÌÖú Î°úÎî© ÏãúÏûë');

    let intervalId: NodeJS.Timeout | undefined;
    let phaseTimer: NodeJS.Timeout | undefined;
    let cleanupTimer: NodeJS.Timeout | undefined;
    let isCleanedUp = false;

    const cleanup = () => {
      if (isCleanedUp) return;
      isCleanedUp = true;

      if (intervalId) clearInterval(intervalId);
      if (phaseTimer) clearTimeout(phaseTimer);
      if (cleanupTimer) clearTimeout(cleanupTimer);
    };

    // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏ Ïù∏ÌÑ∞Î≤å (Îß§ 100ms)
    intervalId = setInterval(() => {
      const elapsed = Date.now() - startTime;
      setElapsedTime(elapsed);

      // ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏßÑÌñâÎ•† Í≥ÑÏÇ∞ (ÏãúÍ∞Ñ Í∏∞Î∞òÏù¥ ÏïÑÎãå Îã®Í≥Ñ Í∏∞Î∞ò)
      let naturalProgress = 0;

      if (phase === 'system-starting') {
        naturalProgress = Math.min((elapsed / 2000) * 30, 30); // 0-30%
      } else if (phase === 'data-loading') {
        naturalProgress = 30 + Math.min(((elapsed - 2000) / 1500) * 40, 40); // 30-70%
      } else if (phase === 'python-warmup') {
        naturalProgress = 70 + Math.min(((elapsed - 3500) / 1000) * 30, 30); // 70-100%
      }

      setProgress(naturalProgress);
    }, 100);

    // Îã®Í≥ÑÎ≥Ñ Ï†ÑÌôò Î°úÏßÅ
    const startPhaseTransitions = () => {
      // 2Ï¥à ÌõÑ: Îç∞Ïù¥ÌÑ∞ Î°úÎî© Îã®Í≥Ñ
      setTimeout(() => {
        if (!isCleanedUp && !isCompleted) {
          console.log('üìä Îç∞Ïù¥ÌÑ∞ Î°úÎî© Îã®Í≥Ñ ÏãúÏûë');
          setPhase('data-loading');
        }
      }, 2000);

      // 3.5Ï¥à ÌõÑ: ÌååÏù¥Ïç¨ ÏõúÏóÖ Îã®Í≥Ñ
      setTimeout(() => {
        if (!isCleanedUp && !isCompleted) {
          console.log('üêç ÌååÏù¥Ïç¨ ÏãúÏä§ÌÖú ÏõúÏóÖ Îã®Í≥Ñ ÏãúÏûë');
          setPhase('python-warmup');
        }
      }, 3500);
    };

    startPhaseTransitions();

    // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Î°úÎî© Promise Ï≤òÎ¶¨
    const handleActualLoading = async () => {
      if (actualLoadingPromise) {
        try {
          console.log('üì° Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë');
          await actualLoadingPromise;
          console.log('‚úÖ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å');

          // Îç∞Ïù¥ÌÑ∞ Î°úÎî©Ïù¥ ÏôÑÎ£åÎêòÎ©¥ Îπ†Î•¥Í≤å ÏôÑÎ£å Ï≤òÎ¶¨
          if (!isCompleted) {
            setTimeout(() => {
              handleComplete();
            }, 500);
          }
        } catch (error) {
          safeConsoleError('‚ùå Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏóêÎü¨', error);
          // ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï¥ÎèÑ Î°úÎî©ÏùÄ Í≥ÑÏÜç ÏßÑÌñâ
        }
      }
    };

    handleActualLoading();

    // ÏïàÏ†ÑÏû•Ïπò: ÏµúÎåÄ 5Ï¥à ÌõÑ Í∞ïÏ†ú ÏôÑÎ£å
    cleanupTimer = setTimeout(() => {
      if (!isCompleted) {
        console.log('‚è∞ ÌÉÄÏûÑÏïÑÏõÉ - Í∞ïÏ†ú ÏôÑÎ£å');
        handleComplete();
      }
    }, 5000);

    return cleanup;
  }, [
    skipCondition,
    isCompleted,
    startTime,
    phase,
    actualLoadingPromise,
    handleComplete,
  ]);

  // ÌÅ¥Î¶≠ÏúºÎ°ú Ïä§ÌÇµ Í∏∞Îä• (3Ï¥à ÌõÑ ÌôúÏÑ±Ìôî)
  useEffect(() => {
    const enableSkipTimer = setTimeout(() => {
      const handleClick = () => {
        if (!isCompleted) {
          console.log('üëÜ ÌÅ¥Î¶≠ÏúºÎ°ú Î°úÎî© Ïä§ÌÇµ');
          handleComplete();
        }
      };

      document.addEventListener('click', handleClick);

      return () => {
        document.removeEventListener('click', handleClick);
      };
    }, 3000);

    return () => clearTimeout(enableSkipTimer);
  }, [handleComplete, isCompleted]);

  return {
    isLoading,
    progress: Math.round(progress),
    estimatedTimeRemaining,
    phase,
    elapsedTime,
  };
};

// Î≥ÑÏπ≠ export (Í∏∞Ï°¥ Ìò∏ÌôòÏÑ± Ïú†ÏßÄ)
export const useMinimumLoadingTime = useNaturalLoadingTime;

// Îç∞Ïù¥ÌÑ∞ Î°úÎî© Promise Ìó¨Ìçº
export const useDataLoadingPromise = (
  data: unknown[],
  isLoading: boolean,
  error: Error | unknown
): Promise<any[]> => {
  return useMemo(() => {
    return new Promise((resolve, reject) => {
      const checkDataReady = () => {
        if (error) {
          reject(error);
        } else if (!isLoading && data && data.length > 0) {
          resolve(data);
        } else {
          setTimeout(checkDataReady, 100);
        }
      };
      checkDataReady();
    });
  }, [data, isLoading, error]);
};
