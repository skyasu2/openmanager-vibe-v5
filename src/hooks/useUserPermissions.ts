/**
 * üîê useUserPermissions - ÏÇ¨Ïö©Ïûê Í∂åÌïú Í¥ÄÎ¶¨ ÌõÖ
 *
 * Vercel Î¨¥Î£å Ìã∞Ïñ¥ ÏµúÏ†ÅÌôî: ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÇ¨Ïù¥Îìú Í∂åÌïú Ï≤òÎ¶¨
 * GitHub Ïù∏Ï¶ù ÏÇ¨Ïö©Ïûê = Í¥ÄÎ¶¨Ïûê, Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê = ÏùºÎ∞ò ÏÇ¨Ïö©Ïûê
 */

import { useSession } from '@/hooks/useSupabaseSession';
import { useAuth } from '@/hooks/useAuth';
import { useUnifiedAdminStore } from '@/stores/useUnifiedAdminStore';
import type { UserPermissions, UserType } from '@/types/permissions.types';
import { useMemo } from 'react';

/**
 * ÏïàÏ†ÑÌïú Í∏∞Î≥∏ Í∂åÌïú ÏÉùÏÑ± Ìï®Ïàò
 * Ïò§Î•ò Î∞úÏÉù ÏãúÎÇò Ïù∏Ï¶ù ÏÉÅÌÉú Î∂àÎ™ÖÌôï Ïãú ÏÇ¨Ïö©
 */
function createSafeDefaultPermissions(
  userType: UserType,
  userName: string,
  userAvatar?: string
): UserPermissions {
  return {
    // ÏãúÏä§ÌÖú Ï†úÏñ¥ Í∂åÌïú (Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Î™®Îëê false - ÏïàÏ†ÑÌïú Í∏∞Î≥∏Í∞í)
    canControlSystem: false,
    canAccessSettings: false,
    canToggleAdminMode: false,
    canLogout: false,

    // ÏÇ¨Ïö©Ïûê Ïú†Ìòï (ÏùºÎ∞ò ÏÇ¨Ïö©ÏûêÎ°ú Í∏∞Î≥∏ ÏÑ§Ï†ï)
    isGeneralUser: true,
    isAdmin: false,
    isGitHubAuthenticated: false,

    // AI Í∂åÌïú (Î™®Îì† ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÇ¨Ïö© Í∞ÄÎä•)
    canToggleAI: true,

    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
    userType,
    userName,
    userAvatar,
  };
}

/**
 * ÏÇ¨Ïö©Ïûê Í∂åÌïúÏùÑ Í¥ÄÎ¶¨ÌïòÎäî ÌõÖ
 * Vercel Î¨¥Î£å Ìã∞Ïñ¥ ÏµúÏ†ÅÌôî: Î™®Îì† Î°úÏßÅÏù¥ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Ï≤òÎ¶¨Îê®
 */
export function useUserPermissions(): UserPermissions {
  // Í∏∞Ï°¥ Ïù∏Ï¶ù ÌõÖÎì§ ÏÇ¨Ïö© (Ïò§Î•ò Ï≤òÎ¶¨ Ìè¨Ìï®)
  const { data: session, status } = useSession();
  const { user: guestUser, isAuthenticated: isGuestAuth } = useAuth();
  const adminStore = useUnifiedAdminStore();

  // Í∂åÌïú Í≥ÑÏÇ∞ (Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÏúºÎ°ú ÏÑ±Îä• ÏµúÏ†ÅÌôî)
  const permissions = useMemo(() => {
    try {
      // Î°úÎî© Ï§ëÏù∏ Í≤ΩÏö∞ - ÏïàÏ†ÑÌïú Í∏∞Î≥∏Í∞í Î∞òÌôò
      if (status === 'loading') {
        return createSafeDefaultPermissions('loading', 'Î°úÎî© Ï§ë...');
      }

      // GitHub Ïù∏Ï¶ù ÏÇ¨Ïö©Ïûê ÌôïÏù∏ (ÏïàÏ†ÑÌïú Ï≤¥ÌÅ¨)
      const isGitHubUser = Boolean(session?.user && status === 'authenticated');
      const isGuestUser = Boolean(!isGitHubUser && isGuestAuth && guestUser);

      // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú (ÏïàÏ†ÑÌïú Í∏∞Î≥∏Í∞í Ìè¨Ìï®)
      let userName = 'ÏÇ¨Ïö©Ïûê';
      let userAvatar: string | undefined;
      let userType: UserType = 'loading';

      if (isGitHubUser && session?.user) {
        // GitHub ÏÇ¨Ïö©Ïûê - ÏïàÏ†ÑÌïú Ï†ïÎ≥¥ Ï∂îÏ∂ú
        userName =
          session.user.name ||
          session.user.email?.split('@')[0] ||
          'GitHub ÏÇ¨Ïö©Ïûê';
        userAvatar = session.user.image || undefined;
        userType = 'github';
      } else if (isGuestUser && guestUser) {
        // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê - ÏïàÏ†ÑÌïú Ï†ïÎ≥¥ Ï∂îÏ∂ú
        userName = guestUser.name || 'ÏùºÎ∞òÏÇ¨Ïö©Ïûê';
        userAvatar = guestUser.picture;
        userType = 'guest';
      } else {
        // Ïù∏Ï¶ù ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÎäî Í≤ΩÏö∞ - ÏùºÎ∞ò ÏÇ¨Ïö©ÏûêÎ°ú Ìè¥Î∞±
        console.warn(
          'üîê [Permissions] ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÏÉÅÌÉú Î∂àÎ™ÖÌôï - ÏùºÎ∞ò ÏÇ¨Ïö©Ïûê Í∂åÌïúÏúºÎ°ú Ìè¥Î∞±'
        );
        return createSafeDefaultPermissions('guest', 'ÏùºÎ∞òÏÇ¨Ïö©Ïûê');
      }

      // Í∂åÌïú Îß§Ìä∏Î¶≠Ïä§ Ï†ÅÏö©
      const isAdmin = isGitHubUser; // GitHub Ïù∏Ï¶ù ÏÇ¨Ïö©Ïûê = Í¥ÄÎ¶¨Ïûê
      const isGeneral = !isAdmin; // Í≤åÏä§Ìä∏ ÏÇ¨Ïö©Ïûê = ÏùºÎ∞ò ÏÇ¨Ïö©Ïûê

      return {
        // ÏãúÏä§ÌÖú Ï†úÏñ¥ Í∂åÌïú (Í¥ÄÎ¶¨ÏûêÎßå)
        canControlSystem: isAdmin,
        canAccessSettings: isAdmin,
        canToggleAdminMode: isAdmin,
        canLogout: isAdmin,

        // ÏÇ¨Ïö©Ïûê Ïú†Ìòï
        isGeneralUser: isGeneral,
        isAdmin: isAdmin,
        isGitHubAuthenticated: isGitHubUser,

        // AI Í∂åÌïú (Î™®Îì† ÏÇ¨Ïö©Ïûê)
        canToggleAI: true,

        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
        userType,
        userName,
        userAvatar,
      };
    } catch (error) {
      // Í∂åÌïú Í≥ÑÏÇ∞ Ï§ë Ïò§Î•ò Î∞úÏÉù Ïãú ÏïàÏ†ÑÌïú Ìè¥Î∞±
      console.error('üîê [Permissions] Í∂åÌïú Í≥ÑÏÇ∞ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
      console.warn('üîê [Permissions] ÏùºÎ∞ò ÏÇ¨Ïö©Ïûê Í∂åÌïúÏúºÎ°ú Ìè¥Î∞±');

      return createSafeDefaultPermissions('guest', 'ÏùºÎ∞òÏÇ¨Ïö©Ïûê');
    }
  }, [session, status, guestUser, isGuestAuth]);

  return permissions;
}

/**
 * Í∂åÌïú ÌôïÏù∏ Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
 */
export const PermissionUtils = {
  /**
   * ÌäπÏ†ï Í∂åÌïúÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
   */
  hasPermission: (
    permissions: UserPermissions,
    permission: keyof UserPermissions
  ): boolean => {
    return Boolean(permissions[permission]);
  },

  /**
   * Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
   */
  isAdmin: (permissions: UserPermissions): boolean => {
    return permissions.isAdmin;
  },

  /**
   * ÏùºÎ∞ò ÏÇ¨Ïö©ÏûêÏù∏ÏßÄ ÌôïÏù∏
   */
  isGeneralUser: (permissions: UserPermissions): boolean => {
    return permissions.isGeneralUser;
  },

  /**
   * ÎîîÎ≤ÑÍπÖÏö© Í∂åÌïú Ï†ïÎ≥¥ Ï∂úÎ†•
   */
  debugPermissions: (permissions: UserPermissions): void => {
    if (process.env.NODE_ENV === 'development') {
      console.group('üîê User Permissions Debug');
      console.log('User Type:', permissions.userType);
      console.log('User Name:', permissions.userName);
      console.log('Is Admin:', permissions.isAdmin);
      console.log('Is General User:', permissions.isGeneralUser);
      console.log('GitHub Authenticated:', permissions.isGitHubAuthenticated);
      console.log('Permissions:', {
        canControlSystem: permissions.canControlSystem,
        canAccessSettings: permissions.canAccessSettings,
        canToggleAdminMode: permissions.canToggleAdminMode,
        canLogout: permissions.canLogout,
        canToggleAI: permissions.canToggleAI,
      });
      console.groupEnd();
    }
  },
};
