'use client';

import { useState, useEffect, useRef, useCallback } from 'react';

export interface PerformanceMetrics {
  // API ÏÑ±Îä•
  apiResponseTime: number;
  apiSuccessRate: number;
  activeRequests: number;
  
  // Î©îÎ™®Î¶¨ Î∞è CPU
  memoryUsage: number;
  cpuUsage: number;
  
  // ÏÇ¨Ïö©Ïûê Í≤ΩÌóò
  pageLoadTime: number;
  renderTime: number;
  interactionDelay: number;
  
  // ÏóêÎü¨ Î∞è Î≥µÍµ¨
  errorRate: number;
  recoveryTime: number;
  uptime: number;
  
  // AI ÏóîÏßÑ ÏÑ±Îä•
  aiEngineStatus: 'healthy' | 'degraded' | 'offline';
  aiResponseTime: number;
  aiSuccessRate: number;
  
  timestamp: number;
}

export interface PerformanceStats {
  current: PerformanceMetrics;
  history: PerformanceMetrics[];
  trends: {
    apiResponseTime: 'improving' | 'stable' | 'degrading';
    errorRate: 'improving' | 'stable' | 'degrading';
    memoryUsage: 'improving' | 'stable' | 'degrading';
  };
  alerts: Array<{
    type: 'warning' | 'error' | 'info';
    message: string;
    timestamp: number;
  }>;
}

export function usePerformanceMonitor() {
  const [stats, setStats] = useState<PerformanceStats>({
    current: {
      apiResponseTime: 0,
      apiSuccessRate: 100,
      activeRequests: 0,
      memoryUsage: 0,
      cpuUsage: 0,
      pageLoadTime: 0,
      renderTime: 0,
      interactionDelay: 0,
      errorRate: 0,
      recoveryTime: 0,
      uptime: 100,
      aiEngineStatus: 'healthy',
      aiResponseTime: 0,
      aiSuccessRate: 100,
      timestamp: Date.now()
    },
    history: [],
    trends: {
      apiResponseTime: 'stable',
      errorRate: 'stable',
      memoryUsage: 'stable'
    },
    alerts: []
  });

  const [isCollecting, setIsCollecting] = useState(false);
  const intervalRef = useRef<NodeJS.Timeout | undefined>(undefined);
  const requestStartTimes = useRef<Map<string, number>>(new Map());
  const errorCount = useRef(0);
  const totalRequests = useRef(0);
  const startTime = useRef(Date.now());

  // üéØ Ìä∏Î†åÎìú ÎπÑÍµê Ìï®Ïàò
  const compareTrend = useCallback((recent: number, older: number): 'improving' | 'stable' | 'degrading' => {
    if (older === 0) return 'stable';
    const change = ((recent - older) / older) * 100;
    if (change > 5) return 'degrading';
    if (change < -5) return 'improving';
    return 'stable';
  }, []);

  // üéØ API ÏöîÏ≤≠ Ï∂îÏ†Å ÏãúÏûë
  const trackAPIRequest = useCallback((requestId: string) => {
    requestStartTimes.current.set(requestId, Date.now());
    totalRequests.current += 1;
    
    // ÌôúÏÑ± ÏöîÏ≤≠ Ïàò ÏóÖÎç∞Ïù¥Ìä∏
    setStats(prev => ({
      ...prev,
      current: {
        ...prev.current,
        activeRequests: requestStartTimes.current.size
      }
    }));
  }, []);

  // üéØ API ÏöîÏ≤≠ ÏôÑÎ£å Ï∂îÏ†Å
  const trackAPIResponse = useCallback((requestId: string, success: boolean = true) => {
    const startTime = requestStartTimes.current.get(requestId);
    if (startTime) {
      const responseTime = Date.now() - startTime;
      requestStartTimes.current.delete(requestId);
      
      if (!success) {
        errorCount.current += 1;
      }
      
      // ÏÑ±Îä• ÏßÄÌëú ÏóÖÎç∞Ïù¥Ìä∏
      setStats(prev => {
        const successRate = totalRequests.current > 0 
          ? ((totalRequests.current - errorCount.current) / totalRequests.current) * 100 
          : 100;
        
        const errorRate = totalRequests.current > 0 
          ? (errorCount.current / totalRequests.current) * 100 
          : 0;
        
        return {
          ...prev,
          current: {
            ...prev.current,
            apiResponseTime: responseTime,
            apiSuccessRate: Math.round(successRate * 10) / 10,
            errorRate: Math.round(errorRate * 10) / 10,
            activeRequests: requestStartTimes.current.size,
            timestamp: Date.now()
          }
        };
      });
    }
  }, []);

  // üß† Î©îÎ™®Î¶¨ Î∞è ÏÑ±Îä• ÏßÄÌëú ÏàòÏßë
  const collectSystemMetrics = useCallback(() => {
    if (typeof window === 'undefined') return;

    const metrics: Partial<PerformanceMetrics> = {};

    // Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ (Î∏åÎùºÏö∞Ï†Ä ÏßÄÏõê Ïãú)
    if ('memory' in performance) {
      const memory = (performance as any).memory;
      metrics.memoryUsage = Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100);
    }

    // ÌéòÏù¥ÏßÄ Î°úÎî© ÏÑ±Îä•
    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
    if (navigation) {
      metrics.pageLoadTime = Math.round(navigation.loadEventEnd - navigation.fetchStart);
      metrics.renderTime = Math.round(navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart);
    }

    // CPU ÏÇ¨Ïö©Îüâ Ï∂îÏ†ï (ÌîÑÎ†àÏûÑÎ•† Í∏∞Î∞ò)
    let cpuUsage = 0;
    const frameStart = performance.now();
    requestAnimationFrame(() => {
      const frameTime = performance.now() - frameStart;
      cpuUsage = Math.min(100, Math.round((frameTime / 16.67) * 100)); // 60fps Í∏∞Ï§Ä
      
      setStats(prev => ({
        ...prev,
        current: {
          ...prev.current,
          ...metrics,
          cpuUsage,
          uptime: Math.round((Date.now() - startTime.current) / 1000),
          timestamp: Date.now()
        }
      }));
    });
  }, []);

  // üìä AI ÏóîÏßÑ ÏÉÅÌÉú ÌôïÏù∏
  const checkAIEngineStatus = useCallback(async () => {
    try {
      const startTime = Date.now();
      const response = await fetch('/api/ai-agent/integrated', {
        method: 'GET'
      });
      
      const responseTime = Date.now() - startTime;
      const success = response.ok;
      
      setStats(prev => ({
        ...prev,
        current: {
          ...prev.current,
          aiEngineStatus: success ? 'healthy' : 'degraded',
          aiResponseTime: responseTime,
          aiSuccessRate: success ? 100 : 0,
          timestamp: Date.now()
        }
      }));
      
    } catch (error) {
      setStats(prev => ({
        ...prev,
        current: {
          ...prev.current,
          aiEngineStatus: 'offline',
          aiResponseTime: 5000,
          aiSuccessRate: 0,
          timestamp: Date.now()
        }
      }));
    }
  }, []);

  // üìà Ìä∏Î†åÎìú Î∂ÑÏÑù
  const analyzeTrends = useCallback((currentMetrics: PerformanceMetrics, history: PerformanceMetrics[]) => {
    if (history.length < 5) return { apiResponseTime: 'stable', errorRate: 'stable', memoryUsage: 'stable' } as const;

    const recent = history.slice(-5);
    const older = history.slice(-10, -5);

    const trends = {
      apiResponseTime: compareTrend(
        recent.reduce((sum, m) => sum + m.apiResponseTime, 0) / recent.length,
        older.reduce((sum, m) => sum + m.apiResponseTime, 0) / older.length
      ),
      errorRate: compareTrend(
        recent.reduce((sum, m) => sum + m.errorRate, 0) / recent.length,
        older.reduce((sum, m) => sum + m.errorRate, 0) / older.length
      ),
      memoryUsage: compareTrend(
        recent.reduce((sum, m) => sum + m.memoryUsage, 0) / recent.length,
        older.reduce((sum, m) => sum + m.memoryUsage, 0) / older.length
      )
    };

    return trends;
  }, [compareTrend]);

  // üö® ÏïåÎ¶º ÏÉùÏÑ±
  const generateAlerts = useCallback((metrics: PerformanceMetrics) => {
    const alerts: Array<{ type: 'warning' | 'error' | 'info'; message: string; timestamp: number }> = [];

    if (metrics.apiResponseTime > 2000) {
      alerts.push({
        type: 'warning',
        message: `API ÏùëÎãµ ÏãúÍ∞ÑÏù¥ ÎäêÎ¶ΩÎãàÎã§ (${metrics.apiResponseTime}ms)`,
        timestamp: Date.now()
      });
    }

    if (metrics.errorRate > 10) {
      alerts.push({
        type: 'error',
        message: `ÏóêÎü¨Ïú®Ïù¥ ÎÜíÏäµÎãàÎã§ (${metrics.errorRate}%)`,
        timestamp: Date.now()
      });
    }

    if (metrics.memoryUsage > 90) {
      alerts.push({
        type: 'warning',
        message: `Î©îÎ™®Î¶¨ ÏÇ¨Ïö©ÎüâÏù¥ ÎÜíÏäµÎãàÎã§ (${metrics.memoryUsage}%)`,
        timestamp: Date.now()
      });
    }

    if (metrics.aiEngineStatus === 'offline') {
      alerts.push({
        type: 'error',
        message: 'AI ÏóîÏßÑÏù¥ Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉúÏûÖÎãàÎã§',
        timestamp: Date.now()
      });
    }

    return alerts;
  }, []);

  // üîÑ ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë
  const startMonitoring = useCallback(() => {
    if (isCollecting) return;
    
    setIsCollecting(true);
    console.log('üìä ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë');

    // Ï¶âÏãú Ìïú Î≤à ÏàòÏßë
    collectSystemMetrics();
    checkAIEngineStatus();

    // Ï£ºÍ∏∞Ï†Å ÏàòÏßë (5Ï¥àÎßàÎã§)
    intervalRef.current = setInterval(() => {
      collectSystemMetrics();
      
      setStats(prev => {
        const newHistory = [...prev.history, prev.current].slice(-100); // ÏµúÎåÄ 100Í∞ú Ïú†ÏßÄ
        const trends = analyzeTrends(prev.current, newHistory);
        const alerts = generateAlerts(prev.current);

        return {
          ...prev,
          history: newHistory,
          trends,
          alerts: [...prev.alerts, ...alerts].slice(-50) // ÏµúÎåÄ 50Í∞ú ÏïåÎ¶º Ïú†ÏßÄ
        };
      });
    }, 5000);

    // AI ÏóîÏßÑ ÏÉÅÌÉúÎäî 30Ï¥àÎßàÎã§ ÌôïÏù∏
    const aiCheckInterval = setInterval(checkAIEngineStatus, 30000);

    return () => {
      clearInterval(aiCheckInterval);
    };
  }, [isCollecting, collectSystemMetrics, checkAIEngineStatus, analyzeTrends, generateAlerts]);

  // üõë Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏßÄ
  const stopMonitoring = useCallback(() => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = undefined;
    }
    setIsCollecting(false);
    console.log('üìä ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏßÄ');
  }, []);

  // üßπ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
  const resetStats = useCallback(() => {
    errorCount.current = 0;
    totalRequests.current = 0;
    startTime.current = Date.now();
    requestStartTimes.current.clear();
    
    setStats({
      current: {
        apiResponseTime: 0,
        apiSuccessRate: 100,
        activeRequests: 0,
        memoryUsage: 0,
        cpuUsage: 0,
        pageLoadTime: 0,
        renderTime: 0,
        interactionDelay: 0,
        errorRate: 0,
        recoveryTime: 0,
        uptime: 0,
        aiEngineStatus: 'healthy',
        aiResponseTime: 0,
        aiSuccessRate: 100,
        timestamp: Date.now()
      },
      history: [],
      trends: {
        apiResponseTime: 'stable',
        errorRate: 'stable',
        memoryUsage: 'stable'
      },
      alerts: []
    });
  }, []);

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÏûêÎèô ÏãúÏûë
  useEffect(() => {
    startMonitoring();
    return () => stopMonitoring();
  }, [startMonitoring, stopMonitoring]);

  return {
    stats,
    isCollecting,
    trackAPIRequest,
    trackAPIResponse,
    startMonitoring,
    stopMonitoring,
    resetStats
  };
} 