import { useRouter } from 'next/navigation';
import { useCallback, useEffect, useRef } from 'react';

/**
 * ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ ÌõÖ v1.0
 * OpenManager Vibe v5 - Î≤†Î•¥ÏÖÄ ÏÇ¨Ïö©Îüâ ÏµúÏ†ÅÌôî
 * 
 * Í∏∞Îä•:
 * 1. ÏÇ¨Ïö©Ïûê ÌôúÎèô Ï∂îÏ†Å (ÎßàÏö∞Ïä§, ÌÇ§Î≥¥Îìú, ÌÑ∞Ïπò)
 * 2. 10Î∂Ñ ÎπÑÌôúÏÑ± Ïãú ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ
 * 3. Î°úÍ∑∏ÏïÑÏõÉ Ï†Ñ 1Î∂Ñ Í≤ΩÍ≥† ÏïåÎ¶º
 * 4. Î™®Îì† Î∞±Í∑∏ÎùºÏö¥Îìú ÏûëÏóÖ Ï§ëÏßÄ
 * 
 * ÏÇ¨Ïö©Î≤ï:
 * const { remainingTime, isWarning } = useAutoLogout();
 */

interface AutoLogoutOptions {
    timeoutMinutes?: number;
    warningMinutes?: number;
    onWarning?: () => void;
    onLogout?: () => void;
}

interface AutoLogoutReturn {
    remainingTime: number;
    isWarning: boolean;
    resetTimer: () => void;
    forceLogout: () => void;
}

export function useAutoLogout(options: AutoLogoutOptions = {}): AutoLogoutReturn {
    const {
        timeoutMinutes = 10,
        warningMinutes = 1,
        onWarning,
        onLogout
    } = options;

    const router = useRouter();
    const timeoutRef = useRef<NodeJS.Timeout | null>(null);
    const warningTimeoutRef = useRef<NodeJS.Timeout | null>(null);
    const lastActivityRef = useRef<number>(Date.now());
    const isWarningRef = useRef<boolean>(false);

    // ÎÇ®ÏùÄ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
    const getRemainingTime = useCallback(() => {
        const elapsed = Date.now() - lastActivityRef.current;
        const remaining = (timeoutMinutes * 60 * 1000) - elapsed;
        return Math.max(0, Math.floor(remaining / 1000));
    }, [timeoutMinutes]);

    // Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìñâ
    const executeLogout = useCallback(async () => {
        console.log('üîí ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìñâ - Î≤†Î•¥ÏÖÄ ÏÇ¨Ïö©Îüâ ÏµúÏ†ÅÌôî');

        try {
            // 1. ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò Ï†ïÎ¶¨
            localStorage.removeItem('auth_token');
            localStorage.removeItem('user_info');
            localStorage.removeItem('google_oauth_token');

            // 2. Î∞±Í∑∏ÎùºÏö¥Îìú ÏûëÏóÖ Ï§ëÏßÄ Ïã†Ìò∏
            localStorage.setItem('system_inactive', 'true');
            localStorage.setItem('auto_logout_time', new Date().toISOString());

            // 3. React Query Ï∫êÏãú Ï†ïÎ¶¨ (ÏïàÏ†ÑÌïú ÌÉÄÏûÖ Ï≤¥ÌÅ¨)
            if (typeof window !== 'undefined') {
                const globalWindow = window as any;
                if (globalWindow.queryClient && typeof globalWindow.queryClient.clear === 'function') {
                    globalWindow.queryClient.clear();
                }
            }

            // 4. Î™®Îì† ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
            if (timeoutRef.current) clearTimeout(timeoutRef.current);
            if (warningTimeoutRef.current) clearTimeout(warningTimeoutRef.current);

            // 5. ÏÇ¨Ïö©Ïûê ÏΩúÎ∞± Ïã§Ìñâ
            onLogout?.();

            // 6. Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
            router.push('/login?reason=timeout');

        } catch (error) {
            console.error('ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ Ï§ë Ïò§Î•ò:', error);
            // Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
            router.push('/login?reason=error');
        }
    }, [router, onLogout]);

    // Í≤ΩÍ≥† ÏïåÎ¶º Ïã§Ìñâ
    const executeWarning = useCallback(() => {
        console.log('‚ö†Ô∏è ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ Í≤ΩÍ≥† - 1Î∂Ñ ÌõÑ Î°úÍ∑∏ÏïÑÏõÉ');
        isWarningRef.current = true;
        onWarning?.();

        // Î∏åÎùºÏö∞Ï†Ä ÏïåÎ¶º
        if ('Notification' in window && Notification.permission === 'granted') {
            new Notification('OpenManager ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ Í≤ΩÍ≥†', {
                body: `1Î∂Ñ ÌõÑ ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉÎê©ÎãàÎã§. Í≥ÑÏÜç ÏÇ¨Ïö©ÌïòÎ†§Î©¥ ÌôîÎ©¥ÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.`,
                icon: '/favicon.ico',
                tag: 'auto-logout-warning',
                requireInteraction: true
            });
        }
    }, [onWarning]);

    // ÌÉÄÏù¥Î®∏ Î¶¨ÏÖã
    const resetTimer = useCallback(() => {
        lastActivityRef.current = Date.now();
        isWarningRef.current = false;

        // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
        if (timeoutRef.current) clearTimeout(timeoutRef.current);
        if (warningTimeoutRef.current) clearTimeout(warningTimeoutRef.current);

        // Í≤ΩÍ≥† ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï (9Î∂Ñ ÌõÑ)
        const warningTime = (timeoutMinutes - warningMinutes) * 60 * 1000;
        warningTimeoutRef.current = setTimeout(executeWarning, warningTime);

        // Î°úÍ∑∏ÏïÑÏõÉ ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï (10Î∂Ñ ÌõÑ)
        const logoutTime = timeoutMinutes * 60 * 1000;
        timeoutRef.current = setTimeout(executeLogout, logoutTime);

        console.log(`‚è±Ô∏è ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ ÌÉÄÏù¥Î®∏ Î¶¨ÏÖã: ${timeoutMinutes}Î∂Ñ ÌõÑ Î°úÍ∑∏ÏïÑÏõÉ`);
    }, [timeoutMinutes, warningMinutes, executeWarning, executeLogout]);

    // ÏÇ¨Ïö©Ïûê ÌôúÎèô Í∞êÏßÄ Ïù¥Î≤§Ìä∏Îì§
    const activityEvents = [
        'mousedown',
        'mousemove',
        'keypress',
        'scroll',
        'touchstart',
        'click',
        'focus'
    ];

    // ÌôúÎèô Í∞êÏßÄ Ìï∏Îì§Îü¨
    const handleActivity = useCallback(() => {
        resetTimer();
    }, [resetTimer]);

    // ÌéòÏù¥ÏßÄ Í∞ÄÏãúÏÑ± Î≥ÄÍ≤Ω Ï≤òÎ¶¨
    const handleVisibilityChange = useCallback(() => {
        if (document.visibilityState === 'visible') {
            resetTimer();
        }
    }, [resetTimer]);

    // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
    useEffect(() => {
        // Ï¥àÍ∏∞ ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
        resetTimer();

        // ÌôúÎèô Í∞êÏßÄ Ïù¥Î≤§Ìä∏ Îì±Î°ù
        activityEvents.forEach(event => {
            document.addEventListener(event, handleActivity, true);
        });

        // ÌéòÏù¥ÏßÄ Í∞ÄÏãúÏÑ± Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏
        document.addEventListener('visibilitychange', handleVisibilityChange);

        // Î∏åÎùºÏö∞Ï†Ä ÏïåÎ¶º Í∂åÌïú ÏöîÏ≤≠
        if ('Notification' in window && Notification.permission === 'default') {
            Notification.requestPermission();
        }

        return () => {
            // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
            activityEvents.forEach(event => {
                document.removeEventListener(event, handleActivity, true);
            });
            document.removeEventListener('visibilitychange', handleVisibilityChange);

            // ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
            if (timeoutRef.current) clearTimeout(timeoutRef.current);
            if (warningTimeoutRef.current) clearTimeout(warningTimeoutRef.current);
        };
    }, [handleActivity, handleVisibilityChange, resetTimer]);

    return {
        remainingTime: getRemainingTime(),
        isWarning: isWarningRef.current,
        resetTimer,
        forceLogout: executeLogout
    };
} 