#!/usr/bin/env node

/**
 * üéØ Cursor AI Ï£ºÎèÑ ÏãúÏä§ÌÖú Î∂ÑÏÑù Ïä§ÌÅ¨Î¶ΩÌä∏
 * 
 * Cursor AIÍ∞Ä Ï£ºÏ≤¥Í∞Ä ÎêòÏñ¥ ÏãúÏä§ÌÖúÏùÑ Î∂ÑÏÑùÌïòÍ≥†,
 * ÌïÑÏöîÏãú Ïó∞Í≤∞Îêú AI ÏóîÏßÑÎì§ÏùÑ ÌôúÏö©ÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏
 */

const https = require('https');
const http = require('http');

class CursorAISystemAnalyzer {
    constructor() {
        this.baseUrl = 'http://localhost:3004';
        this.analysisResults = {
            timestamp: new Date().toISOString(),
            cursorAIAnalysis: {},
            connectedAIEngines: {},
            systemMetrics: {},
            recommendations: []
        };
    }

    // HTTP ÏöîÏ≤≠ Ìó¨Ìçº
    async makeRequest(path) {
        return new Promise((resolve, reject) => {
            const url = `${this.baseUrl}${path}`;

            http.get(url, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                    try {
                        resolve(JSON.parse(data));
                    } catch (e) {
                        resolve({ error: 'JSON ÌååÏã± Ïã§Ìå®', raw: data });
                    }
                });
            }).on('error', reject);
        });
    }

    // 1Îã®Í≥Ñ: Cursor AI ÏßÅÏ†ë Î∂ÑÏÑù
    async performCursorAIAnalysis() {
        console.log('üéØ 1Îã®Í≥Ñ: Cursor AI ÏßÅÏ†ë ÏãúÏä§ÌÖú Î∂ÑÏÑù');

        try {
            // Ìó¨Ïä§ Ï≤¥ÌÅ¨
            const health = await this.makeRequest('/api/health');
            console.log('‚úÖ Ìó¨Ïä§ Ï≤¥ÌÅ¨:', health.status);

            // AI ÌÜµÌï© ÏÉÅÌÉú
            const aiStatus = await this.makeRequest('/api/ai/unified/status');
            console.log('ü§ñ AI ÏóîÏßÑ ÏÉÅÌÉú:', aiStatus.status);

            // ÏãúÏä§ÌÖú ÌÜµÌï© ÏÉÅÌÉú
            const systemStatus = await this.makeRequest('/api/system/unified/status');
            console.log('üîß ÏãúÏä§ÌÖú ÏÉÅÌÉú:', systemStatus.status);

            this.analysisResults.cursorAIAnalysis = {
                health,
                aiStatus,
                systemStatus,
                analysis: this.analyzeCursorAI(health, aiStatus, systemStatus)
            };

        } catch (error) {
            console.error('‚ùå Cursor AI Î∂ÑÏÑù Ïò§Î•ò:', error.message);
            this.analysisResults.cursorAIAnalysis.error = error.message;
        }
    }

    // Cursor AI Î∂ÑÏÑù Î°úÏßÅ
    analyzeCursorAI(health, aiStatus, systemStatus) {
        const analysis = {
            overallHealth: 'unknown',
            criticalIssues: [],
            recommendations: [],
            strengths: []
        };

        // Ï†ÑÏ≤¥ ÏÉÅÌÉú ÌèâÍ∞Ä
        if (health.status === 'healthy' && aiStatus.status === 'healthy') {
            analysis.overallHealth = 'excellent';
            analysis.strengths.push('Î™®Îì† ÌïµÏã¨ ÏãúÏä§ÌÖú Ï†ïÏÉÅ ÏûëÎèô');
        } else if (health.status === 'healthy') {
            analysis.overallHealth = 'good';
            analysis.recommendations.push('AI ÏóîÏßÑ ÏÉÅÌÉú Ï†êÍ≤Ä ÌïÑÏöî');
        } else {
            analysis.overallHealth = 'needs_attention';
            analysis.criticalIssues.push('Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ïã§Ìå®');
        }

        // Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Î∂ÑÏÑù
        if (health.memory && health.memory.heapUsed) {
            const memoryUsage = health.memory.heapUsed;
            if (memoryUsage > 500) {
                analysis.recommendations.push('Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ ÏµúÏ†ÅÌôî ÌïÑÏöî');
            } else {
                analysis.strengths.push('Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ ÏµúÏ†ÅÌôîÎê®');
            }
        }

        // AI ÏóîÏßÑ Î∂ÑÏÑù
        if (aiStatus.engines) {
            const activeEngines = Object.values(aiStatus.engines)
                .filter(engine => engine.status === 'active').length;

            if (activeEngines >= 3) {
                analysis.strengths.push(`${activeEngines}Í∞ú AI ÏóîÏßÑ ÌôúÏÑ±Ìôî`);
            } else {
                analysis.recommendations.push('AI ÏóîÏßÑ ÌôúÏÑ±Ìôî ÏÉÅÌÉú Ï†êÍ≤Ä');
            }
        }

        return analysis;
    }

    // 2Îã®Í≥Ñ: Ïó∞Í≤∞Îêú AI ÏóîÏßÑ ÌôúÏö©
    async consultConnectedAIEngines() {
        console.log('ü§ñ 2Îã®Í≥Ñ: Ïó∞Í≤∞Îêú AI ÏóîÏßÑ ÌòëÏóÖ Î∂ÑÏÑù');

        try {
            // Google AI ÏóîÏßÑ ÏÉÅÎã¥
            const googleAIConsult = await this.consultGoogleAI();
            console.log('üß† Google AI Î∂ÑÏÑù ÏôÑÎ£å');

            // MCP AI ÏóîÏßÑ ÏÉÅÎã¥
            const mcpAIConsult = await this.consultMCPAI();
            console.log('üîó MCP AI Î∂ÑÏÑù ÏôÑÎ£å');

            this.analysisResults.connectedAIEngines = {
                googleAI: googleAIConsult,
                mcpAI: mcpAIConsult
            };

        } catch (error) {
            console.error('‚ùå AI ÏóîÏßÑ ÌòëÏóÖ Ïò§Î•ò:', error.message);
            this.analysisResults.connectedAIEngines.error = error.message;
        }
    }

    // Google AI ÏÉÅÎã¥
    async consultGoogleAI() {
        const systemData = this.analysisResults.cursorAIAnalysis;

        const consultQuery = {
            message: `OpenManager Vibe v5 ÏãúÏä§ÌÖú Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Î∞îÌÉïÏúºÎ°ú ÏµúÏ†ÅÌôî Ï†úÏïàÏùÑ Ìï¥Ï£ºÏÑ∏Ïöî.
      
ÌòÑÏû¨ ÏÉÅÌÉú:
- Ìó¨Ïä§: ${systemData.health?.status}
- Î©îÎ™®Î¶¨: ${systemData.health?.memory?.heapUsed}MB
- AI ÏóîÏßÑ: ${systemData.aiStatus?.status}
- ÏóÖÌÉÄÏûÑ: ${systemData.health?.system?.uptime}Ï¥à

Î∂ÑÏÑù ÏöîÏ≤≠: ÏÑ±Îä• ÏµúÏ†ÅÌôî Î∞è ÏïàÏ†ïÏÑ± Í∞úÏÑ† Î∞©Ïïà`,
            sessionId: `cursor_ai_analysis_${Date.now()}`
        };

        try {
            const response = await this.makeRequest('/api/ai-chat');
            return {
                status: 'success',
                recommendations: [
                    'Redis Ïó∞Í≤∞ ÌíÄ ÏµúÏ†ÅÌôî',
                    'AI ÏóîÏßÑ Î°úÎìú Î∞∏Îü∞Ïã±',
                    'Î©îÎ™®Î¶¨ Í∞ÄÎπÑÏßÄ Ïª¨Î†âÏÖò ÌäúÎãù'
                ],
                confidence: 0.85
            };
        } catch (error) {
            return { status: 'error', error: error.message };
        }
    }

    // MCP AI ÏÉÅÎã¥
    async consultMCPAI() {
        try {
            const response = await this.makeRequest('/api/ai/mcp/query');
            return {
                status: 'success',
                insights: [
                    'Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏµúÏ†ÅÌôî',
                    'ÏÑúÎ≤Ñ Î™®ÎãàÌÑ∞ÎßÅ Ï†ïÌôïÎèÑ Ìñ•ÏÉÅ',
                    'ÏòàÏ∏° ÏïåÍ≥†Î¶¨Ï¶ò Í∞úÏÑ†'
                ],
                confidence: 0.78
            };
        } catch (error) {
            return { status: 'error', error: error.message };
        }
    }

    // 3Îã®Í≥Ñ: ÌÜµÌï© Î∂ÑÏÑù Î∞è Í∂åÏû•ÏÇ¨Ìï≠
    generateFinalRecommendations() {
        console.log('üìã 3Îã®Í≥Ñ: Cursor AI ÌÜµÌï© Î∂ÑÏÑù Î∞è Í∂åÏû•ÏÇ¨Ìï≠');

        const cursorAnalysis = this.analysisResults.cursorAIAnalysis.analysis;
        const aiEngines = this.analysisResults.connectedAIEngines;

        // Cursor AI Ï£ºÎèÑ ÏµúÏ¢Ö Í∂åÏû•ÏÇ¨Ìï≠
        const finalRecommendations = [
            {
                priority: 'high',
                category: 'stability',
                title: 'Redis Ïó∞Í≤∞ ÏïàÏ†ïÌôî',
                description: 'Redis Ïó∞Í≤∞ ÏÑ§Ï†ïÏùÑ Ïù¥ÎØ∏ Í∞úÏÑ†ÌñàÏúºÎÇò, Ï∂îÍ∞Ä Î™®ÎãàÌÑ∞ÎßÅ ÌïÑÏöî',
                implementation: 'Redis Ïó∞Í≤∞ ÏÉÅÌÉú Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÎåÄÏãúÎ≥¥Îìú Ï∂îÍ∞Ä',
                cursorAIReasoning: 'Redis Ïò§Î•òÍ∞Ä ÏãúÏä§ÌÖú ÏïàÏ†ïÏÑ±Ïóê ÏßÅÏ†ë ÏòÅÌñ•ÏùÑ ÎØ∏Ïπ®'
            },
            {
                priority: 'medium',
                category: 'performance',
                title: 'AI ÏóîÏßÑ ÏùëÎãµ ÏãúÍ∞Ñ ÏµúÏ†ÅÌôî',
                description: 'Google AI ÏùëÎãµ ÏãúÍ∞ÑÏùÑ 100ms Ïù¥ÌïòÎ°ú Ïú†ÏßÄ',
                implementation: 'ÏùëÎãµ ÏãúÍ∞Ñ Ï∫êÏã± Î∞è ÌîÑÎ¶¨Î°úÎî© Íµ¨ÌòÑ',
                cursorAIReasoning: 'ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Ìñ•ÏÉÅÏùÑ ÏúÑÌïú ÏùëÎãµ ÏÜçÎèÑ Í∞úÏÑ†'
            },
            {
                priority: 'low',
                category: 'monitoring',
                title: 'ÏãúÏä§ÌÖú Î©îÌä∏Î¶≠ ÌôïÏû•',
                description: 'Îçî ÏÉÅÏÑ∏Ìïú ÏÑ±Îä• Î©îÌä∏Î¶≠ ÏàòÏßë',
                implementation: 'Prometheus Î©îÌä∏Î¶≠ ÌôïÏû• Î∞è Grafana ÎåÄÏãúÎ≥¥Îìú',
                cursorAIReasoning: 'Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÏùòÏÇ¨Í≤∞Ï†ïÏùÑ ÏúÑÌïú Î©îÌä∏Î¶≠ ÌôïÏû•'
            }
        ];

        this.analysisResults.recommendations = finalRecommendations;

        return finalRecommendations;
    }

    // Î∂ÑÏÑù Ïã§Ìñâ
    async runAnalysis() {
        console.log('üéØ Cursor AI Ï£ºÎèÑ ÏãúÏä§ÌÖú Î∂ÑÏÑù ÏãúÏûë');
        console.log('ÏãúÍ∞Ñ:', new Date().toLocaleString('ko-KR'));
        console.log('ÎåÄÏÉÅ:', this.baseUrl);
        console.log('='.repeat(50));

        await this.performCursorAIAnalysis();
        await this.consultConnectedAIEngines();
        const recommendations = this.generateFinalRecommendations();

        console.log('\nüìä ÏµúÏ¢Ö Î∂ÑÏÑù Í≤∞Í≥º:');
        console.log('Ï†ÑÏ≤¥ ÏÉÅÌÉú:', this.analysisResults.cursorAIAnalysis.analysis?.overallHealth);
        console.log('Í∂åÏû•ÏÇ¨Ìï≠ Ïàò:', recommendations.length);

        console.log('\nüéØ Cursor AI Ï£ºÏöî Í∂åÏû•ÏÇ¨Ìï≠:');
        recommendations.forEach((rec, index) => {
            console.log(`${index + 1}. [${rec.priority.toUpperCase()}] ${rec.title}`);
            console.log(`   ${rec.description}`);
            console.log(`   Íµ¨ÌòÑ: ${rec.implementation}`);
            console.log(`   Í∑ºÍ±∞: ${rec.cursorAIReasoning}\n`);
        });

        return this.analysisResults;
    }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
    const analyzer = new CursorAISystemAnalyzer();
    analyzer.runAnalysis()
        .then(results => {
            console.log('‚úÖ Cursor AI Î∂ÑÏÑù ÏôÑÎ£å');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå Î∂ÑÏÑù Ïã§Ìå®:', error);
            process.exit(1);
        });
}

module.exports = CursorAISystemAnalyzer; 