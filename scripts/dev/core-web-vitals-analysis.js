#!/usr/bin/env node

/**
 * üéØ Core Web Vitals Î∂ÑÏÑù ÎèÑÍµ¨
 * 
 * LighthouseÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏÑ±Îä• ÏßÄÌëúÎ•º Ï∏°Ï†ïÌïòÍ≥† Í∞úÏÑ† Î∞©ÏïàÏùÑ Ï†úÏãúÌï©ÎãàÎã§.
 */

const lighthouse = require('lighthouse');
const chromeLauncher = require('chrome-launcher');
const fs = require('fs');
const path = require('path');

const config = {
  url: 'http://localhost:3000',
  port: 3000,
  output: 'json',
  onlyCategories: ['performance', 'accessibility', 'best-practices'],
  settings: {
    onlyAudits: [
      'first-contentful-paint',
      'largest-contentful-paint',
      'cumulative-layout-shift',
      'total-blocking-time',
      'speed-index',
      'interactive',
      'first-meaningful-paint'
    ]
  }
};

async function runLighthouseAnalysis() {
  console.log('üöÄ Core Web Vitals Î∂ÑÏÑù ÏãúÏûë...');
  
  let chrome;
  try {
    // Chrome Ïã§Ìñâ
    chrome = await chromeLauncher.launch({
      chromeFlags: ['--headless', '--disable-gpu', '--no-sandbox']
    });
    
    // Lighthouse Ïã§Ìñâ
    const results = await lighthouse(config.url, {
      ...config,
      port: chrome.port,
    });
    
    // Í≤∞Í≥º ÌååÏã±
    const metrics = extractMetrics(results.lhr);
    const recommendations = generateRecommendations(metrics);
    
    // Í≤∞Í≥º Ï∂úÎ†•
    displayResults(metrics, recommendations);
    
    // Î≥¥Í≥†ÏÑú Ï†ÄÏû•
    await saveReport(results.report, metrics, recommendations);
    
  } catch (error) {
    console.error('‚ùå Î∂ÑÏÑù Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error.message);
  } finally {
    if (chrome) {
      await chrome.kill();
    }
  }
}

function extractMetrics(lhr) {
  const audits = lhr.audits;
  
  return {
    // Core Web Vitals
    lcp: {
      value: audits['largest-contentful-paint'].numericValue,
      displayValue: audits['largest-contentful-paint'].displayValue,
      score: audits['largest-contentful-paint'].score,
      target: 2500, // 2.5Ï¥à
    },
    cls: {
      value: audits['cumulative-layout-shift'].numericValue,
      displayValue: audits['cumulative-layout-shift'].displayValue,
      score: audits['cumulative-layout-shift'].score,
      target: 0.1,
    },
    fid: {
      // TBTÎ•º FID ÎåÄÏ≤¥ ÏßÄÌëúÎ°ú ÏÇ¨Ïö©
      value: audits['total-blocking-time'].numericValue,
      displayValue: audits['total-blocking-time'].displayValue,
      score: audits['total-blocking-time'].score,
      target: 100, // 100ms
    },
    
    // Ï∂îÍ∞Ä ÏÑ±Îä• ÏßÄÌëú
    fcp: {
      value: audits['first-contentful-paint'].numericValue,
      displayValue: audits['first-contentful-paint'].displayValue,
      score: audits['first-contentful-paint'].score,
      target: 1800, // 1.8Ï¥à
    },
    si: {
      value: audits['speed-index'].numericValue,
      displayValue: audits['speed-index'].displayValue,
      score: audits['speed-index'].score,
      target: 3400, // 3.4Ï¥à
    },
    tti: {
      value: audits['interactive'].numericValue,
      displayValue: audits['interactive'].displayValue,
      score: audits['interactive'].score,
      target: 3800, // 3.8Ï¥à
    },
    
    // Ï†ÑÏ≤¥ ÏÑ±Îä• Ï†êÏàò
    performanceScore: lhr.categories.performance.score * 100,
  };
}

function generateRecommendations(metrics) {
  const recommendations = [];
  
  // LCP Í∞úÏÑ† Î∞©Ïïà
  if (metrics.lcp.value > metrics.lcp.target) {
    const improvement = ((metrics.lcp.value - metrics.lcp.target) / 1000).toFixed(1);
    recommendations.push({
      category: 'LCP (Largest Contentful Paint)',
      current: metrics.lcp.displayValue,
      target: `< ${metrics.lcp.target / 1000}Ï¥à`,
      impact: 'HIGH',
      suggestions: [
        'üñºÔ∏è Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî: WebP ÌòïÏãù ÏÇ¨Ïö©, lazy loading Ï†ÅÏö©',
        'üöÄ Server Components ÌôúÏö©: Ï¥àÍ∏∞ HTMLÏóê Ï§ëÏöî ÏΩòÌÖêÏ∏† Ìè¨Ìï®',
        'üì¶ Code Splitting: dynamic importÎ°ú Î≤àÎì§ ÌÅ¨Í∏∞ Í∞êÏÜå',
        'üîÑ Î¶¨ÏÜåÏä§ ÌûåÌä∏: preload, prefetch ÌôúÏö©',
        '‚ö° CDN ÌôúÏö©: Ï†ïÏ†Å ÏûêÏÇ∞Ïùò Î°úÎî© ÏãúÍ∞Ñ Îã®Ï∂ï'
      ]
    });
  }
  
  // CLS Í∞úÏÑ† Î∞©Ïïà
  if (metrics.cls.value > metrics.cls.target) {
    recommendations.push({
      category: 'CLS (Cumulative Layout Shift)',
      current: metrics.cls.displayValue,
      target: `< ${metrics.cls.target}`,
      impact: 'HIGH',
      suggestions: [
        'üìê Ïù¥ÎØ∏ÏßÄ/ÎèôÏòÅÏÉÅ ÌÅ¨Í∏∞ ÏßÄÏ†ï: width, height ÏÜçÏÑ± ÏÑ§Ï†ï',
        'üî≤ Ìè∞Ìä∏ Î°úÎî© ÏµúÏ†ÅÌôî: font-display: swap ÏÇ¨Ïö©',
        'üìè ÎèôÏ†Å ÏΩòÌÖêÏ∏† Í≥µÍ∞Ñ ÌôïÎ≥¥: skeleton UI ÌôúÏö©',
        'üé® Ïï†ÎãàÎ©îÏù¥ÏÖò ÏµúÏ†ÅÌôî: transform, opacityÎßå ÏÇ¨Ïö©',
        'üì± Î∞òÏùëÌòï Ïù¥ÎØ∏ÏßÄ: aspect-ratio CSS ÌôúÏö©'
      ]
    });
  }
  
  // TBT/FID Í∞úÏÑ† Î∞©Ïïà
  if (metrics.fid.value > metrics.fid.target) {
    recommendations.push({
      category: 'TBT/FID (Total Blocking Time/First Input Delay)',
      current: metrics.fid.displayValue,
      target: `< ${metrics.fid.target}ms`,
      impact: 'HIGH',
      suggestions: [
        'üß† JavaScript ÏµúÏ†ÅÌôî: Î∂àÌïÑÏöîÌïú re-render Î∞©ÏßÄ',
        '‚è∞ ÏûëÏóÖ Î∂ÑÌï†: setTimeout, requestIdleCallback ÌôúÏö©',
        'üîÑ Web Workers: Î¨¥Í±∞Ïö¥ Ïó∞ÏÇ∞ Î∞±Í∑∏ÎùºÏö¥Îìú Ï≤òÎ¶¨',
        'üì¶ Î≤àÎì§ ÏµúÏ†ÅÌôî: tree shaking, dead code elimination',
        '‚ö° React ÏµúÏ†ÅÌôî: React.memo, useMemo, useCallback ÌôúÏö©'
      ]
    });
  }
  
  // Ï†ÑÏ≤¥ ÏÑ±Îä• Ï†êÏàò Í∏∞Î∞ò Í∂åÏû•ÏÇ¨Ìï≠
  if (metrics.performanceScore < 90) {
    recommendations.push({
      category: 'Ï†ÑÏ≤¥ ÏÑ±Îä• ÏµúÏ†ÅÌôî',
      current: `${metrics.performanceScore.toFixed(1)}Ï†ê`,
      target: '90Ï†ê Ïù¥ÏÉÅ',
      impact: 'MEDIUM',
      suggestions: [
        'üèóÔ∏è Next.js ÏµúÏ†ÅÌôî: Image, Link Ïª¥Ìè¨ÎÑåÌä∏ ÌôúÏö©',
        'üîÑ Ï∫êÏã± Ï†ÑÎûµ: SWR, React QueryÎ°ú Îç∞Ïù¥ÌÑ∞ Ï∫êÏã±',
        'üìä ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ: @vercel/analytics, @vercel/speed-insights',
        'üéØ ÌïµÏã¨ ÏßÄÌëú Ï∂îÏ†Å: Core Web Vitals ÏßÄÏÜç Î™®ÎãàÌÑ∞ÎßÅ',
        'üîß ÎπåÎìú ÏµúÏ†ÅÌôî: webpack bundle analyzerÎ°ú Î≤àÎì§ Î∂ÑÏÑù'
      ]
    });
  }
  
  return recommendations;
}

function displayResults(metrics, recommendations) {
  console.log('\nüéØ Core Web Vitals Î∂ÑÏÑù Í≤∞Í≥º');
  console.log('‚ïê'.repeat(50));
  
  // Core Web Vitals ÌëúÏãú
  console.log('\nüìä ÌïµÏã¨ ÏßÄÌëú (Core Web Vitals)');
  console.log('‚îÄ'.repeat(30));
  
  displayMetric('LCP', metrics.lcp);
  displayMetric('CLS', metrics.cls);
  displayMetric('TBT', metrics.fid, 'FID ÎåÄÏ≤¥ ÏßÄÌëú');
  
  // Ï∂îÍ∞Ä ÏÑ±Îä• ÏßÄÌëú
  console.log('\n‚ö° Ï∂îÍ∞Ä ÏÑ±Îä• ÏßÄÌëú');
  console.log('‚îÄ'.repeat(30));
  
  displayMetric('FCP', metrics.fcp);
  displayMetric('SI', metrics.si);
  displayMetric('TTI', metrics.tti);
  
  // Ï†ÑÏ≤¥ Ï†êÏàò
  console.log(`\nüèÜ Ï†ÑÏ≤¥ ÏÑ±Îä• Ï†êÏàò: ${metrics.performanceScore.toFixed(1)}Ï†ê`);
  
  // Í∞úÏÑ† Î∞©Ïïà
  if (recommendations.length > 0) {
    console.log('\nüí° Í∞úÏÑ† Î∞©Ïïà');
    console.log('‚ïê'.repeat(50));
    
    recommendations.forEach((rec, index) => {
      console.log(`\n${index + 1}. ${rec.category}`);
      console.log(`   ÌòÑÏû¨: ${rec.current} ‚Üí Î™©Ìëú: ${rec.target}`);
      console.log(`   ÏòÅÌñ•ÎèÑ: ${rec.impact}`);
      console.log('   Í∂åÏû•ÏÇ¨Ìï≠:');
      rec.suggestions.forEach(suggestion => {
        console.log(`   ‚Ä¢ ${suggestion}`);
      });
    });
  } else {
    console.log('\n‚úÖ Î™®Îì† Core Web Vitals Í∏∞Ï§ÄÏùÑ ÎßåÏ°±Ìï©ÎãàÎã§!');
  }
}

function displayMetric(name, metric, note = '') {
  const isGood = metric.score >= 0.9;
  const isOk = metric.score >= 0.5;
  const status = isGood ? '‚úÖ' : isOk ? '‚ö†Ô∏è' : '‚ùå';
  const scorePercent = (metric.score * 100).toFixed(0);
  
  console.log(
    `${status} ${name}: ${metric.displayValue} (Ï†êÏàò: ${scorePercent}Ï†ê)${note ? ` - ${note}` : ''}`
  );
}

async function saveReport(lighthouseReport, metrics, recommendations) {
  const reportDir = path.join(process.cwd(), 'reports', 'performance');
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  
  // ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
  if (!fs.existsSync(reportDir)) {
    fs.mkdirSync(reportDir, { recursive: true });
  }
  
  // Lighthouse Ï†ÑÏ≤¥ Î≥¥Í≥†ÏÑú Ï†ÄÏû•
  const lighthouseFile = path.join(reportDir, `lighthouse-${timestamp}.json`);
  fs.writeFileSync(lighthouseFile, lighthouseReport);
  
  // ÏöîÏïΩ Î≥¥Í≥†ÏÑú Ï†ÄÏû•
  const summaryReport = {
    timestamp: new Date().toISOString(),
    metrics,
    recommendations,
    summary: {
      coreWebVitalsPass: 
        metrics.lcp.score >= 0.9 && 
        metrics.cls.score >= 0.9 && 
        metrics.fid.score >= 0.9,
      performanceScore: metrics.performanceScore,
      criticalIssues: recommendations.filter(r => r.impact === 'HIGH').length,
    }
  };
  
  const summaryFile = path.join(reportDir, `performance-summary-${timestamp}.json`);
  fs.writeFileSync(summaryFile, JSON.stringify(summaryReport, null, 2));
  
  console.log(`\nüìÑ Î≥¥Í≥†ÏÑú Ï†ÄÏû•Îê®:`);
  console.log(`   ‚Ä¢ Ï†ÑÏ≤¥ Î≥¥Í≥†ÏÑú: ${lighthouseFile}`);
  console.log(`   ‚Ä¢ ÏöîÏïΩ Î≥¥Í≥†ÏÑú: ${summaryFile}`);
}

// Ïã§Ìñâ
if (require.main === module) {
  runLighthouseAnalysis().catch(console.error);
}

module.exports = { runLighthouseAnalysis };