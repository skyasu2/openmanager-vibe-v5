# WSL 16GB 최적화 설정 (2025-09-17)
# 멀티 AI + MCP 대규모 개발환경 지원

[wsl2]
# 🌐 네트워킹: MCP 타임아웃 해결을 위한 NAT 모드
# networkingMode=mirrored  # 제거 - 외부 API 타임아웃 원인
dnsTunneling=true
autoProxy=true
firewall=true

# 💾 메모리: 16GB 할당 + 적극적 메모리 관리
memory=16GB             # 12GB → 16GB (MCP + AI CLI 확장성)
processors=6            # 유지
swap=6GB                # 2GB → 6GB (대용량 빌드 지원)

# 🚀 성능 최적화: 16GB 메모리 활용 극대화
pageReporting=true      # 메모리 압축 활성화 (16GB에서는 유리)
debugConsole=false      # 디버그 콘솔 비활성화
kernelCommandLine=cgroup_no_v1=all # cgroup v2 강제 사용

[experimental]
sparseVhd=true          # 디스크 공간 절약
hostAddressLoopback=true # 로컬호스트 연결 최적화
autoMemoryReclaim=gradual # 점진적 메모리 회수
networkingMode=mirrored # 주석 처리로 비활성화
useWindowsDriver=true   # Windows 드라이버 사용

# 📊 16GB 메모리 활용 전략:
# - Claude Code: 2-3GB (안정적 운영)
# - MCP 서버들: 3-4GB (9개 서버 + 확장)
# - AI CLI 도구들: 2-3GB (동시 실행)
# - 시스템 + 캐시: 4-6GB
# - 예비 메모리: 2-4GB (빌드/테스트)

# ⚡ 적용 후 예상 효과:
# 1. MCP 타임아웃 95% 감소
# 2. AI CLI 동시 실행 안정성 확보
# 3. 대용량 TypeScript 컴파일 성능 향상
# 4. Playwright 브라우저 자동화 안정화
# 5. Next.js 빌드 속도 2배 향상