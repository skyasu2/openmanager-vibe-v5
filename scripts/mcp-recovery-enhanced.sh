#!/bin/bash

# ====================================================================
# MCP ÏôÑÏ†Ñ Î≥µÍµ¨ Ïä§ÌÅ¨Î¶ΩÌä∏ - ÏóêÎü¨ Ìï∏Îì§ÎßÅ Î∞è Î°§Î∞± Í∏∞Îä• Í∞ïÌôî Î≤ÑÏ†Ñ
# ====================================================================
# Î™©Ï†Å: WSL/Claude Code Ïû¨ÏÑ§Ïπò ÌõÑ MCP ÌôòÍ≤Ω ÏôÑÏ†Ñ Î≥µÍµ¨ (ÏïàÏ†ÑÏÑ± Í∞ïÌôî)
# ÏÇ¨Ïö©Î≤ï: ./scripts/mcp-recovery-enhanced.sh [--rollback|--dry-run]
# ÏÉùÏÑ±Ïùº: 2025-09-20
# Í∞úÏÑ†ÏÇ¨Ìï≠: ÏóêÎü¨ Ìï∏Îì§ÎßÅ, Î°§Î∞± Í∏∞Îä•, Îã®Í≥ÑÎ≥Ñ Í≤ÄÏ¶ù, ÏßÑÌñâ ÏÉÅÌô© Ï∂îÏ†Å
# ====================================================================

set -euo pipefail

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ Î∞è Î∞±ÏóÖ ÎîîÎ†âÌÜ†Î¶¨
PROJECT_ROOT="/mnt/d/cursor/openmanager-vibe-v5"
BACKUP_ROOT="$PROJECT_ROOT/.backups"
RECOVERY_BACKUP="$BACKUP_ROOT/recovery-$(date +%Y%m%d-%H%M%S)"
RECOVERY_LOG="$PROJECT_ROOT/logs/mcp-recovery-enhanced.log"

# Î≥µÍµ¨ ÏÉÅÌÉú Ï∂îÏ†Å
RECOVERY_STATE_FILE="$PROJECT_ROOT/.mcp-recovery-state"
STEPS_COMPLETED=()
TOTAL_STEPS=7

# Î°úÍπÖ Ìï®Ïàò
log_step() {
    local step="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${PURPLE}üîÑ $stepÔ∏è‚É£  $message${NC}"
    echo "[$timestamp] STEP $step: $message" >> "$RECOVERY_LOG"
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] INFO: $1" >> "$RECOVERY_LOG"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] SUCCESS: $1" >> "$RECOVERY_LOG"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1" >> "$RECOVERY_LOG"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1" >> "$RECOVERY_LOG"
}

# Î≥µÍµ¨ ÏÉÅÌÉú Ï†ÄÏû•
save_recovery_state() {
    local step="$1"
    echo "$step" >> "$RECOVERY_STATE_FILE"
    STEPS_COMPLETED+=("$step")
}

# Î≥µÍµ¨ ÏÉÅÌÉú Î°úÎìú
load_recovery_state() {
    if [[ -f "$RECOVERY_STATE_FILE" ]]; then
        while IFS= read -r step; do
            STEPS_COMPLETED+=("$step")
        done < "$RECOVERY_STATE_FILE"
    fi
}

# Îã®Í≥Ñ ÏôÑÎ£å Ïó¨Î∂Ä ÌôïÏù∏
is_step_completed() {
    local step="$1"
    for completed in "${STEPS_COMPLETED[@]}"; do
        if [[ "$completed" == "$step" ]]; then
            return 0
        fi
    done
    return 1
}

# Î°§Î∞± Ìï®Ïàò
rollback_recovery() {
    log_error "Î≥µÍµ¨ Ï§ë Ïò§Î•ò Î∞úÏÉù. Î°§Î∞±ÏùÑ ÏãúÏûëÌï©ÎãàÎã§..."

    # Î∞±ÏóÖ ÌååÏùºÎì§ Î≥µÏõê
    if [[ -d "$RECOVERY_BACKUP" ]]; then
        log_info "Î∞±ÏóÖÏóêÏÑú ÏÑ§Ï†ï ÌååÏùº Î≥µÏõê Ï§ë..."

        if [[ -f "$RECOVERY_BACKUP/mcp.json.backup" ]]; then
            cp "$RECOVERY_BACKUP/mcp.json.backup" "$PROJECT_ROOT/.mcp.json" 2>/dev/null || true
            log_success ".mcp.json Î≥µÏõê ÏôÑÎ£å"
        fi

        if [[ -f "$RECOVERY_BACKUP/env.local.backup" ]]; then
            cp "$RECOVERY_BACKUP/env.local.backup" "$PROJECT_ROOT/.env.local" 2>/dev/null || true
            log_success ".env.local Î≥µÏõê ÏôÑÎ£å"
        fi
    fi

    # Î∂ÄÎ∂ÑÏ†ÅÏúºÎ°ú ÏÑ§ÏπòÎêú MCP ÏÑúÎ≤ÑÎì§ Ï†ïÎ¶¨
    log_info "Î∂ÄÎ∂ÑÏ†ÅÏúºÎ°ú ÏÑ§ÏπòÎêú MCP ÏÑúÎ≤Ñ Ï†ïÎ¶¨ Ï§ë..."
    claude mcp list 2>/dev/null | grep "‚úó Failed" | while read -r line; do
        local server_name
        server_name=$(echo "$line" | cut -d':' -f1)
        claude mcp remove "$server_name" 2>/dev/null || true
    done

    # Î≥µÍµ¨ ÏÉÅÌÉú ÌååÏùº ÏÇ≠Ï†ú
    rm -f "$RECOVERY_STATE_FILE"

    log_error "Î°§Î∞± ÏôÑÎ£å. ÏàòÎèôÏúºÎ°ú Î¨∏Ï†úÎ•º Ìï¥Í≤∞Ìïú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."
    exit 1
}

# ÏóêÎü¨ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
error_handler() {
    local line_number="$1"
    local error_code="$2"
    log_error "ÎùºÏù∏ $line_numberÏóêÏÑú Ïò§Î•ò Î∞úÏÉù (ÏΩîÎìú: $error_code)"
    rollback_recovery
}

trap 'error_handler ${LINENO} $?' ERR

# Dry run Î™®Îìú ÌôïÏù∏
check_dry_run() {
    if [[ "${1:-}" == "--dry-run" ]]; then
        log_info "=== DRY RUN Î™®Îìú: Ïã§Ï†ú Î≥ÄÍ≤Ω ÏóÜÏù¥ ÏãúÎÆ¨Î†àÏù¥ÏÖòÎßå ÏàòÌñâ ==="
        return 0
    fi
    return 1
}

# ÌïÑÏàò Ï°∞Í±¥ ÌôïÏù∏
check_prerequisites() {
    if is_step_completed "prerequisites"; then
        log_info "1Îã®Í≥Ñ Ïù¥ÎØ∏ ÏôÑÎ£åÎê® - Í±¥ÎÑàÎõ∞Í∏∞"
        return 0
    fi

    log_step "1" "ÏÇ¨Ï†Ñ Ï°∞Í±¥ ÌôïÏù∏ Î∞è Ï§ÄÎπÑ"

    # ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ ÌôïÏù∏
    if [[ ! -d "$PROJECT_ROOT" ]]; then
        log_error "ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ ÎîîÎ†âÌÜ†Î¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: $PROJECT_ROOT"
        return 1
    fi
    log_success "ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ ÌôïÏù∏: $PROJECT_ROOT"

    # Î∞±ÏóÖ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    mkdir -p "$RECOVERY_BACKUP"
    mkdir -p "$PROJECT_ROOT/logs"
    log_success "Î∞±ÏóÖ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±: $RECOVERY_BACKUP"

    # Í∏∞Ï°¥ ÏÑ§Ï†ï Î∞±ÏóÖ
    [[ -f "$PROJECT_ROOT/.mcp.json" ]] && cp "$PROJECT_ROOT/.mcp.json" "$RECOVERY_BACKUP/mcp.json.backup"
    [[ -f "$PROJECT_ROOT/.env.local" ]] && cp "$PROJECT_ROOT/.env.local" "$RECOVERY_BACKUP/env.local.backup"
    log_success "Í∏∞Ï°¥ ÏÑ§Ï†ï Î∞±ÏóÖ ÏôÑÎ£å"

    save_recovery_state "prerequisites"
    return 0
}

# ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï ÌôïÏù∏
setup_environment() {
    if is_step_completed "environment"; then
        log_info "2Îã®Í≥Ñ Ïù¥ÎØ∏ ÏôÑÎ£åÎê® - Í±¥ÎÑàÎõ∞Í∏∞"
        return 0
    fi

    log_step "2" "ÌôòÍ≤ΩÎ≥ÄÏàò Î∞è ÌÜ†ÌÅ∞ ÏÑ§Ï†ï"

    # ÌôòÍ≤ΩÎ≥ÄÏàò ÌååÏùº ÌôïÏù∏
    if [[ -f "$PROJECT_ROOT/.env.local" ]]; then
        # Î≥¥Ïïà Í≤ÄÏÇ¨ ÏàòÌñâ
        "$PROJECT_ROOT/scripts/setup-mcp-env.sh" --security-check || log_warning "Î≥¥Ïïà Í≤ÄÏÇ¨ÏóêÏÑú ÏùºÎ∂Ä Î¨∏Ï†ú Î∞úÍ≤¨"
        log_success "ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú ÏôÑÎ£å"
    else
        log_warning "ÌôòÍ≤ΩÎ≥ÄÏàò ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§. ÏàòÎèô ÏÑ§Ï†ïÏù¥ ÌïÑÏöîÌï©ÎãàÎã§."
        log_info "Îã§Ïùå Î™ÖÎ†πÏñ¥Î°ú ÏÑ§Ï†ïÌïòÏÑ∏Ïöî: ./scripts/setup-mcp-env.sh --interactive"
    fi

    save_recovery_state "environment"
    return 0
}

# ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
install_dependencies() {
    if is_step_completed "dependencies"; then
        log_info "3Îã®Í≥Ñ Ïù¥ÎØ∏ ÏôÑÎ£åÎê® - Í±¥ÎÑàÎõ∞Í∏∞"
        return 0
    fi

    log_step "3" "ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò"

    # Node.js ÌôïÏù∏
    if command -v node &> /dev/null; then
        local node_version
        node_version=$(node --version)
        log_success "Node.js ÌôïÏù∏: $node_version"
    else
        log_error "Node.jsÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§"
        return 1
    fi

    # UV ÌôïÏù∏
    if command -v uvx &> /dev/null; then
        local uv_version
        uv_version=$(uvx --version)
        log_success "UV ÌôïÏù∏: $uv_version"
    else
        log_error "UVÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§"
        return 1
    fi

    # Claude Code ÌôïÏù∏
    if command -v claude &> /dev/null; then
        local claude_version
        claude_version=$(claude --version)
        log_success "Claude Code ÌôïÏù∏: $claude_version"
    else
        log_error "Claude CodeÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§"
        return 1
    fi

    # ÏãúÏä§ÌÖú ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò (ÏóêÎü¨ ÌóàÏö©)
    log_info "ÏãúÏä§ÌÖú ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò Ï§ë..."
    if sudo apt update &>/dev/null && sudo apt install -y curl wget git jq &>/dev/null; then
        log_success "ÏãúÏä§ÌÖú ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò ÏôÑÎ£å"
    else
        log_warning "ÏùºÎ∂Ä ÏãúÏä§ÌÖú ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò Ïã§Ìå® (Î¨¥ÏãúÌïòÍ≥† Í≥ÑÏÜç)"
    fi

    save_recovery_state "dependencies"
    return 0
}

# MCP ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ±
create_mcp_config() {
    if is_step_completed "config"; then
        log_info "4Îã®Í≥Ñ Ïù¥ÎØ∏ ÏôÑÎ£åÎê® - Í±¥ÎÑàÎõ∞Í∏∞"
        return 0
    fi

    log_step "4" "MCP ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ±"

    # Í∞úÏÑ†Îêú MCP ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ± (Î≥¥Ïïà Í∞ïÌôî)
    cat > "$PROJECT_ROOT/.mcp.json" << 'EOF'
{
  "mcpServers": {
    "memory": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"]
    },
    "time": {
      "command": "/home/$USER/.local/bin/uvx",
      "args": ["mcp-server-time"],
      "env": {
        "TERM": "dumb",
        "NO_COLOR": "1",
        "PYTHONUNBUFFERED": "1"
      }
    },
    "sequential-thinking": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking@latest"]
    },
    "playwright": {
      "command": "npx",
      "args": ["-y", "@executeautomation/playwright-mcp-server"],
      "env": {
        "NODE_OPTIONS": "--max-old-space-size=1024 --no-warnings",
        "PLAYWRIGHT_BROWSERS_PATH": "/home/$USER/.cache/ms-playwright",
        "PLAYWRIGHT_HEADLESS": "true",
        "PLAYWRIGHT_DISABLE_GPU": "true",
        "MCP_CONNECTION_POOL_SIZE": "5"
      }
    },
    "shadcn-ui": {
      "command": "npx",
      "args": ["-y", "@jpisnice/shadcn-ui-mcp-server@latest"]
    },
    "serena": {
      "command": "/home/$USER/.local/bin/serena-mcp-server",
      "args": [
        "--project", "/mnt/d/cursor/openmanager-vibe-v5",
        "--log-level", "ERROR",
        "--tool-timeout", "180",
        "--enable-web-dashboard", "false",
        "--enable-gui-log-window", "false"
      ],
      "env": {
        "TERM": "dumb",
        "NO_COLOR": "1",
        "PYTHONUNBUFFERED": "1",
        "PYTHONIOENCODING": "utf-8",
        "PYTHONHASHSEED": "0",
        "MALLOC_TRIM_THRESHOLD_": "100000"
      }
    }
  }
}
EOF

    # ÌååÏùº Í∂åÌïú ÏÑ§Ï†ï
    chmod 644 "$PROJECT_ROOT/.mcp.json"
    log_success "MCP ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ± ÏôÑÎ£å: $PROJECT_ROOT/.mcp.json"

    save_recovery_state "config"
    return 0
}

# MCP ÏÑúÎ≤Ñ ÏÑ§Ïπò
install_mcp_servers() {
    if is_step_completed "servers"; then
        log_info "5Îã®Í≥Ñ Ïù¥ÎØ∏ ÏôÑÎ£åÎê® - Í±¥ÎÑàÎõ∞Í∏∞"
        return 0
    fi

    log_step "5" "MCP ÏÑúÎ≤Ñ ÏÑ§Ïπò Î∞è ÏÑ§Ï†ï"

    # ÌîÑÎ°úÏ†ùÌä∏ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
    log_info "ÌîÑÎ°úÏ†ùÌä∏ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò Ï§ë..."
    cd "$PROJECT_ROOT"
    if npm install &>/dev/null; then
        log_success "ÌîÑÎ°úÏ†ùÌä∏ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò ÏôÑÎ£å"
    else
        log_warning "ÌîÑÎ°úÏ†ùÌä∏ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò Ïã§Ìå® (Î¨¥ÏãúÌïòÍ≥† Í≥ÑÏÜç)"
    fi

    # Playwright Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ïπò
    log_info "Playwright Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ïπò Ï§ë..."
    if npx playwright install chromium &>/dev/null; then
        log_success "Playwright Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ïπò ÏôÑÎ£å"
    else
        log_warning "Playwright Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ïπò Ïã§Ìå®"
    fi

    # Serena MCP ÏÑúÎ≤Ñ ÏÑ§Ïπò
    log_info "Serena MCP ÏÑúÎ≤Ñ ÏÑ§Ïπò Ï§ë..."
    if uvx --from git+https://github.com/oraios/serena serena-mcp-server --help &>/dev/null; then
        log_success "Serena MCP ÏÑúÎ≤Ñ ÏÑ§Ïπò ÏôÑÎ£å"
    else
        log_warning "Serena MCP ÏÑúÎ≤Ñ ÏÑ§Ïπò Ïã§Ìå®"
    fi

    # ÌÜ†ÌÅ∞ Í∏∞Î∞ò MCP ÏÑúÎ≤Ñ ÏÑ§Ï†ï (Î≥¥Ïïà Í∞ïÌôî)
    log_info "ÌÜ†ÌÅ∞ Í∏∞Î∞ò MCP ÏÑúÎ≤Ñ ÏÑ§Ï†ï Ï§ë..."

    # Context7 MCP - ÌôòÍ≤ΩÎ≥ÄÏàò Î∞©ÏãùÏúºÎ°ú Î≥ÄÍ≤Ω (Î≥¥Ïïà Í∞úÏÑ†)
    if [[ -n "${CONTEXT7_API_KEY:-}" ]]; then
        if claude mcp remove context7 &>/dev/null; then
            log_info "Í∏∞Ï°¥ Context7 MCP Ï†úÍ±∞"
        fi
        if claude mcp add context7 -s local -- npx -y @upstash/context7-mcp &>/dev/null; then
            log_success "Context7 MCP ÏÑ§Ï†ï ÏôÑÎ£å (ÌôòÍ≤ΩÎ≥ÄÏàò Î∞©Ïãù)"
        else
            log_warning "Context7 MCP ÏÑ§Ï†ï Ïã§Ìå®"
        fi
    else
        log_warning "Context7 API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§"
    fi

    # Supabase MCP
    if [[ -n "${SUPABASE_ACCESS_TOKEN:-}" && -n "${SUPABASE_PROJECT_ID:-}" ]]; then
        if claude mcp remove supabase &>/dev/null; then
            log_info "Í∏∞Ï°¥ Supabase MCP Ï†úÍ±∞"
        fi
        if claude mcp add supabase -s local -e SUPABASE_ACCESS_TOKEN="$SUPABASE_ACCESS_TOKEN" -- npx -y @supabase/mcp-server-supabase@latest --read-only --project-ref="$SUPABASE_PROJECT_ID" &>/dev/null; then
            log_success "Supabase MCP ÏÑ§Ï†ï ÏôÑÎ£å"
        else
            log_warning "Supabase MCP ÏÑ§Ï†ï Ïã§Ìå®"
        fi
    else
        log_warning "Supabase ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§"
    fi

    # Vercel MCP
    if claude mcp remove vercel &>/dev/null; then
        log_info "Í∏∞Ï°¥ Vercel MCP Ï†úÍ±∞"
    fi
    if claude mcp add --transport http vercel https://mcp.vercel.com &>/dev/null; then
        log_success "Vercel MCP ÏÑ§Ï†ï ÏôÑÎ£å (HTTP Î∞©Ïãù)"
    else
        log_warning "Vercel MCP ÏÑ§Ï†ï Ïã§Ìå®"
    fi

    save_recovery_state "servers"
    return 0
}

# ÏÑ§Ïπò Í≤ÄÏ¶ù
verify_installation() {
    if is_step_completed "verification"; then
        log_info "6Îã®Í≥Ñ Ïù¥ÎØ∏ ÏôÑÎ£åÎê® - Í±¥ÎÑàÎõ∞Í∏∞"
        return 0
    fi

    log_step "6" "ÏÑ§Ïπò Í≤ÄÏ¶ù"

    # MCP ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏
    log_info "MCP ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏..."
    local mcp_status
    if mcp_status=$(claude mcp list 2>&1); then
        local connected_count
        connected_count=$(echo "$mcp_status" | grep -c "‚úì Connected" || echo "0")
        local failed_count
        failed_count=$(echo "$mcp_status" | grep -c "‚úó Failed" || echo "0")

        log_success "Ïó∞Í≤∞Îêú MCP ÏÑúÎ≤Ñ: $connected_countÍ∞ú"
        if [[ "$failed_count" -gt 0 ]]; then
            log_warning "Ïã§Ìå®Ìïú MCP ÏÑúÎ≤Ñ: $failed_countÍ∞ú"
        fi

        # ÏµúÏÜå 3Í∞ú Ïù¥ÏÉÅ Ïó∞Í≤∞ÎêòÏñ¥Ïïº ÏÑ±Í≥µÏúºÎ°ú Í∞ÑÏ£º
        if [[ "$connected_count" -ge 3 ]]; then
            log_success "MCP ÏÑúÎ≤Ñ Ïó∞Í≤∞ Í≤ÄÏ¶ù ÌÜµÍ≥º"
        else
            log_error "MCP ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå® (ÏµúÏÜå 3Í∞ú ÌïÑÏöî, ÌòÑÏû¨ $connected_countÍ∞ú)"
            return 1
        fi
    else
        log_error "MCP ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®"
        return 1
    fi

    # ÌôòÍ≤ΩÎ≥ÄÏàò Î≥¥Ïïà Í≤ÄÏÇ¨
    log_info "ÌôòÍ≤ΩÎ≥ÄÏàò Î≥¥Ïïà Í≤ÄÏÇ¨..."
    if "$PROJECT_ROOT/scripts/setup-mcp-env.sh" --security-check &>/dev/null; then
        log_success "ÌôòÍ≤ΩÎ≥ÄÏàò Î≥¥Ïïà Í≤ÄÏÇ¨ ÌÜµÍ≥º"
    else
        log_warning "ÌôòÍ≤ΩÎ≥ÄÏàò Î≥¥Ïïà Í≤ÄÏÇ¨ÏóêÏÑú ÏùºÎ∂Ä Î¨∏Ï†ú Î∞úÍ≤¨"
    fi

    save_recovery_state "verification"
    return 0
}

# Ï†ïÎ¶¨ Î∞è Î≥¥Í≥†
cleanup_and_report() {
    if is_step_completed "cleanup"; then
        log_info "7Îã®Í≥Ñ Ïù¥ÎØ∏ ÏôÑÎ£åÎê® - Í±¥ÎÑàÎõ∞Í∏∞"
        return 0
    fi

    log_step "7" "Ï†ïÎ¶¨ Î∞è ÏôÑÎ£å Î≥¥Í≥†"

    # ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨
    log_info "ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨ Ï§ë..."
    find "$PROJECT_ROOT" -name "*.tmp" -type f -delete 2>/dev/null || true

    # Ïò§ÎûòÎêú Î∞±ÏóÖ Ï†ïÎ¶¨ (ÏÑ†ÌÉùÏ†Å)
    "$PROJECT_ROOT/scripts/setup-mcp-env.sh" --cleanup || true

    # Î≥µÍµ¨ ÏÉÅÌÉú ÌååÏùº ÏÇ≠Ï†ú
    rm -f "$RECOVERY_STATE_FILE"

    # ÏµúÏ¢Ö Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
    local report_file="$PROJECT_ROOT/logs/mcp-recovery-report-$(date +%Y%m%d-%H%M%S).txt"
    {
        echo "MCP Î≥µÍµ¨ ÏôÑÎ£å Î≥¥Í≥†ÏÑú"
        echo "===================="
        echo "Î≥µÍµ¨ ÏùºÏãú: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "ÌîÑÎ°úÏ†ùÌä∏: $PROJECT_ROOT"
        echo "Î∞±ÏóÖ ÏúÑÏπò: $RECOVERY_BACKUP"
        echo ""
        echo "=== MCP ÏÑúÎ≤Ñ ÏÉÅÌÉú ==="
        claude mcp list 2>&1 || echo "MCP ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®"
        echo ""
        echo "=== ÏôÑÎ£åÎêú Îã®Í≥Ñ ==="
        printf '%s\n' "${STEPS_COMPLETED[@]}"
    } > "$report_file"

    log_success "Î≥µÍµ¨ Î≥¥Í≥†ÏÑú ÏÉùÏÑ±: $report_file"
    log_success "üéâ MCP ÌôòÍ≤Ω Î≥µÍµ¨Í∞Ä ÏôÑÏ†ÑÌûà ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"

    save_recovery_state "cleanup"
    return 0
}

# ÏßÑÌñâ ÏÉÅÌô© ÌëúÏãú
show_progress() {
    local completed_steps=${#STEPS_COMPLETED[@]}
    local progress=$((completed_steps * 100 / TOTAL_STEPS))
    echo -e "\n${BLUE}üìä Î≥µÍµ¨ ÏßÑÌñâ ÏÉÅÌô©: $completed_steps/$TOTAL_STEPS Îã®Í≥Ñ ($progress%) ÏôÑÎ£å${NC}"
}

# Î©îÏù∏ Ìï®Ïàò
main() {
    local mode="${1:-}"

    echo -e "${PURPLE}üõ†Ô∏è  MCP ÏôÑÏ†Ñ Î≥µÍµ¨ Ïä§ÌÅ¨Î¶ΩÌä∏ (ÏóêÎü¨ Ìï∏Îì§ÎßÅ Í∞ïÌôî Î≤ÑÏ†Ñ)${NC}"
    echo -e "${PURPLE}ÌîÑÎ°úÏ†ùÌä∏: OpenManager VIBE v5${NC}"
    echo -e "${PURPLE}Î™©Ï†Å: WSL Ïû¨ÏÑ§Ïπò ÎòêÎäî Claude Code Ïû¨ÏÑ§Ïπò ÌõÑ MCP ÌôòÍ≤Ω ÏôÑÏ†Ñ Î≥µÍµ¨${NC}\n"

    # Dry run Î™®Îìú ÌôïÏù∏
    local dry_run=false
    if check_dry_run "$mode"; then
        dry_run=true
    fi

    # Î°§Î∞± Î™®Îìú ÌôïÏù∏
    if [[ "$mode" == "--rollback" ]]; then
        rollback_recovery
        exit 0
    fi

    # Î≥µÍµ¨ ÏÉÅÌÉú Î°úÎìú
    load_recovery_state
    show_progress

    # ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
    if [[ -f "$PROJECT_ROOT/.env.local" ]]; then
        set +u  # ÏùºÏãúÏ†ÅÏúºÎ°ú unset Î≥ÄÏàò ÌóàÏö©
        source "$PROJECT_ROOT/.env.local"
        set -u
    fi

    # Îã®Í≥ÑÎ≥Ñ Î≥µÍµ¨ Ïã§Ìñâ
    if ! $dry_run; then
        check_prerequisites && show_progress
        setup_environment && show_progress
        install_dependencies && show_progress
        create_mcp_config && show_progress
        install_mcp_servers && show_progress
        verify_installation && show_progress
        cleanup_and_report && show_progress
    else
        log_info "DRY RUN: Î™®Îì† Îã®Í≥ÑÎ•º ÏãúÎÆ¨Î†àÏù¥ÏÖòÌñàÏäµÎãàÎã§"
    fi

    echo -e "\n${GREEN}üéâ MCP ÌôòÍ≤Ω Î≥µÍµ¨ ÏôÑÎ£å!${NC}"
    echo -e "${BLUE}üìã Îã§Ïùå Îã®Í≥Ñ:${NC}"
    echo "1. Claude CodeÎ•º Ïû¨ÏãúÏûëÌïòÏÑ∏Ïöî"
    echo "2. ÌÜ†ÌÅ∞ ÏÑ§Ï†ï: ./scripts/setup-mcp-env.sh --interactive"
    echo "3. ÏÉÅÌÉú ÌôïÏù∏: ./scripts/mcp-health-check-enhanced.sh"
}

# Ìó¨ÌîÑ Î©îÏãúÏßÄ
show_help() {
    cat << EOF
MCP ÏôÑÏ†Ñ Î≥µÍµ¨ Ïä§ÌÅ¨Î¶ΩÌä∏ (ÏóêÎü¨ Ìï∏Îì§ÎßÅ Í∞ïÌôî Î≤ÑÏ†Ñ)

ÏÇ¨Ïö©Î≤ï:
    $0 [ÏòµÏÖò]

ÏòµÏÖò:
    --dry-run    Ïã§Ï†ú Î≥ÄÍ≤Ω ÏóÜÏù¥ ÏãúÎÆ¨Î†àÏù¥ÏÖòÎßå ÏàòÌñâ
    --rollback   Ïù¥Ï†Ñ ÏÉÅÌÉúÎ°ú Î°§Î∞±
    --help       Ïù¥ ÎèÑÏõÄÎßê ÌëúÏãú

Í∏∞Îä•:
    - ÏóêÎü¨ Î∞úÏÉù Ïãú ÏûêÎèô Î°§Î∞±
    - Îã®Í≥ÑÎ≥Ñ Î≥µÍµ¨ ÏÉÅÌÉú Ï∂îÏ†Å
    - Î∂ÄÎ∂Ñ Ïã§Ìå® Ïãú Ïû¨ÏãúÏûë ÏßÄÏõê
    - Î≥¥Ïïà Í∞ïÌôîÎêú ÏÑ§Ï†ï ÏÉùÏÑ±
EOF
}

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    if [[ "${1:-}" == "--help" ]]; then
        show_help
        exit 0
    fi
    main "$@"
fi