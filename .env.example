# 🚀 OpenManager Vibe v5 개발 환경 변수 예시
# 
# 이 파일을 .env.local로 복사해서 실제 값들로 교체하세요.
# cp dev-env.example .env.local

# ==============================================
# 🐳 개발 환경 모드 설정 (NEW!)
# ==============================================
# Docker 환경과 로컬 환경 자동 감지를 우선으로 하되,
# 필요시 강제로 모드를 지정할 수 있습니다.
# 
# DEV_MODE=docker  # Docker/DevContainer 강제 모드
# DEV_MODE=local   # 로컬 개발 강제 모드
# DEV_MODE=        # 자동 감지 (기본값)

# ==============================================
# 🌍 기본 환경 설정
# ==============================================
NODE_ENV=development
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_TELEMETRY_DISABLED=1

# ==============================================
# 🗄️ 데이터베이스 설정
# ==============================================
# Docker 환경에서는 자동으로 postgres:5432로 연결됩니다.
# 로컬 환경에서는 localhost:5432로 연결됩니다.

# PostgreSQL 설정
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/openmanager_local?schema=public
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=openmanager_local
POSTGRES_USER=postgres
POSTGRES_PASSWORD=your-local-password

# ==============================================
# ⚡ Redis 캐시 설정
# ==============================================
# Docker 환경에서는 자동으로 redis:6379로 연결됩니다.
# 로컬 환경에서는 localhost:6379로 연결됩니다.

REDIS_URL=redis://localhost:6379
REDIS_HOST=localhost
REDIS_PORT=6379
# REDIS_PASSWORD=  # 로컬에서는 보통 패스워드 없음

# ==============================================
# 🤖 AI 엔진 설정
# ==============================================
# Google AI API 키 (필수 - 실제 키로 교체하세요)
GOOGLE_AI_API_KEY=your-google-ai-api-key-here
GOOGLE_AI_MODEL=gemini-1.5-flash
GOOGLE_AI_ENABLED=true
GOOGLE_AI_BETA_MODE=true

# AI 할당량 관리
GOOGLE_AI_DAILY_LIMIT=1000
GOOGLE_AI_RPM_LIMIT=60
GOOGLE_AI_QUOTA_PROTECTION=false

# OpenAI (선택사항)
OPENAI_API_KEY=your-openai-api-key-here

# Anthropic (선택사항)
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# ==============================================
# 📧 알림 설정 (선택사항)
# ==============================================
# Slack 웹훅 URL (실제 URL로 교체하세요)
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR_TEAM_ID/YOUR_CHANNEL_ID/YOUR_WEBHOOK_TOKEN

# ==============================================
# 🔐 보안 설정
# ==============================================
# Supabase Auth 설정 (GitHub OAuth 사용)
# 1. Supabase Dashboard > Authentication > Providers에서 GitHub 활성화
# 2. GitHub OAuth App 생성시 Callback URL: https://your-project.supabase.co/auth/v1/callback
# 3. Supabase에 GitHub Client ID/Secret 설정
# 
# 참고: NEXT_PUBLIC_SUPABASE_URL과 NEXT_PUBLIC_SUPABASE_ANON_KEY는
#      위의 데이터베이스 설정에서 이미 구성됨

# ==============================================
# 🧪 개발 도구 설정
# ==============================================
# 빌드 분석 도구
ANALYZE=false

# Storybook 활성화
STORYBOOK_ENABLED=true

# Playwright E2E 테스트
PLAYWRIGHT_ENABLED=true

# 디버그 모드
DEBUG_MODE=true

# ==============================================
# 🔄 MCP (Model Context Protocol) 설정
# ==============================================
# MCP 서버 설정
MCP_SERVER_PORT=3100
MCP_ENABLED=true

# 원격 MCP 서버 (선택사항 - GCP VM 서버 주소)
# MCP_REMOTE_URL=https://your-gcp-vm-address.com

# ==============================================
# 📊 성능 및 모니터링 설정 (선택사항)
# ==============================================
# Sentry (오류 추적)
SENTRY_DSN=your-sentry-dsn-here

# Google Analytics
ANALYTICS_ID=your-analytics-id-here

# ==============================================
# 🔧 고급 개발 설정
# ==============================================
# 실시간 로그 레벨
LOG_LEVEL=debug

# 벡터 DB 설정
VECTOR_DB_ENABLED=true
RAG_FORCE_MEMORY=true

# Cron Job 설정 (로컬에서는 보통 비활성화)
CRON_HEALTH_CHECK=false
CRON_KEEP_ALIVE=false
CRON_GEMINI_LEARNING=false

# ==============================================
# 💡 사용 가이드
# ==============================================
#
# 📋 초기 설정 단계:
# 1. 이 파일을 .env.local로 복사
# 2. 실제 API 키들로 교체 (특히 GOOGLE_AI_API_KEY)
# 3. 로컬 데이터베이스 설정 (PostgreSQL, Redis)
# 4. npm run dev로 개발 서버 시작
#
# 🐳 Docker 환경에서는:
# - 데이터베이스가 자동으로 postgres:5432로 연결
# - Redis가 자동으로 redis:6379로 연결
# - Adminer (http://localhost:8080)와 Redis Commander (http://localhost:8081) 사용 가능
#
# 🏠 로컬 환경에서는:
# - PostgreSQL과 Redis를 별도로 설치하고 실행해야 함
# - 연결 설정을 localhost로 변경해야 함
#
# 🔧 트러블슈팅:
# - 환경 감지가 잘못된 경우: DEV_MODE=docker 또는 DEV_MODE=local로 강제 설정
# - DB 연결 실패시: 호스트, 포트, 인증 정보 확인
# - API 키 오류시: 실제 키로 교체했는지 확인
#
# 📚 자세한 설명은 .devcontainer/README.md 참고 