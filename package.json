{
  "name": "openmanager-vibe-v5",
  "version": "5.71.0",
  "private": true,
  "scripts": {
    "scan:unicode": "node scripts/dev/find-invalid-unicode.js",
    "check:claude": "wsl ./scripts/windows-support/utils/run-claude.sh",
    "claude:launch": "bash scripts/ai/launch-claude-wsl.sh",
    "claude:sanitize": "node scripts/diagnostics/claude-json-sanitize.js --write",
    "windows:dev": "powershell -ExecutionPolicy Bypass -File scripts/windows-support/env-setup/quick-dev-start.ps1",
    "windows:dev:fast": "powershell -ExecutionPolicy Bypass -File scripts/windows-support/env-setup/quick-dev-start.ps1 -Fast",
    "windows:dev:full": "powershell -ExecutionPolicy Bypass -File scripts/windows-support/env-setup/quick-dev-start.ps1 -Full",
    "dev": "cross-env NODE_OPTIONS='--max-old-space-size=4096' next dev -p 3000",
    "dev:safe": "./scripts/dev-server-manager.sh start",
    "dev:check": "./scripts/dev-server-manager.sh status",
    "dev:stop": "./scripts/dev-server-manager.sh stop",
    "dev:restart": "./scripts/dev-server-manager.sh restart",
    "dev:light": "cross-env NODE_OPTIONS='--max-old-space-size=2048' next dev -p 3000",
    "dev:heavy": "cross-env NODE_OPTIONS='--max-old-space-size=8192' next dev -p 3000",
    "dev:staging": "cross-env NODE_OPTIONS='--max-old-space-size=4096' next dev -p 3001",
    "dev:test": "cross-env NODE_OPTIONS='--max-old-space-size=4096' next dev -p 3002",
    "dev:backup": "cross-env NODE_OPTIONS='--max-old-space-size=4096' next dev -p 3003",
    "dev:turbo": "cross-env NODE_OPTIONS='--max-old-space-size=4096' next dev -p 3000 --turbo",
    "dev:optimized": "cross-env NODE_OPTIONS='--max-old-space-size=2048 --optimize-for-size' NEXT_TELEMETRY_DISABLED=1 next dev -p 3000 --turbo",
    "dev:verbose": "cross-env DEBUG=* next dev -p 3000",
    "dev:mock": "cross-env MOCK_MODE=force NODE_OPTIONS='--max-old-space-size=8192' next dev -p 3000",
    "dev:real": "cross-env MOCK_MODE=off NODE_OPTIONS='--max-old-space-size=8192' next dev -p 3000",
    "dev:hybrid": "cross-env MOCK_MODE=dev NODE_OPTIONS='--max-old-space-size=8192' next dev -p 3000",
    "index:background": "ts-node scripts/indexing/background-indexing.ts",
    "index:background:help": "ts-node scripts/indexing/background-indexing.ts help",
    "optimize:ann": "ts-node scripts/optimization/ann-search-upgrade.ts",
    "optimize:ann:help": "ts-node scripts/optimization/ann-search-upgrade.ts help",
    "build": "cross-env NODE_OPTIONS='--max-old-space-size=2048' next build",
    "build:prod": "cross-env NODE_OPTIONS='--max-old-space-size=2048' NEXT_DISABLE_DEVTOOLS=1 next build",
    "build:analyze": "cross-env ANALYZE=true next build",
    "build:vercel": "./.vercel-deploy-check.sh && npm run build:ci && npm run validate:quick",
    "deploy:safe": "./.vercel-deploy-check.sh && npx vercel --prod",
    "build:vercel:optimized": "cross-env NODE_OPTIONS='--max-old-space-size=1536' NEXT_DISABLE_DEVTOOLS=1 VERCEL_BUILD_OPTIMIZATION=true next build",
    "start": "next start",
    "start:prod": "cross-env NODE_ENV=production next start",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "lint:strict": "eslint . --max-warnings=0",
    "lint:quick": "eslint . --cache --max-warnings=100",
    "lint:fast": "eslint src/ --config eslint.config.fast.mjs --cache",
    "lint:fast:fix": "eslint src/ --config eslint.config.fast.mjs --cache --fix",
    "lint:minimal": "eslint src/ --config eslint.config.minimal.mjs --cache",
    "lint:ultra": "eslint src/ --config eslint.config.ultra-fast.mjs --cache",
    "lint:src": "eslint src/ --cache",
    "lint:hooks": "node scripts/dev/check-hook-deps.mjs",
    "format": "prettier --write \"src/**/*.{js,jsx,ts,tsx,json,css,scss,md}\"",
    "format:check": "prettier --check \"src/**/*.{js,jsx,ts,tsx,json,css,scss,md}\"",
    "test": "vitest run --config config/testing/vitest.config.main.ts",
    "test:quick": "vitest run --config config/testing/vitest.config.minimal.ts",
    "test:single": "vitest run --config config/testing/vitest.config.minimal.ts --run",
    "test:coverage": "vitest run --config config/testing/vitest.config.simple.ts --coverage",
    "test:watch": "vitest --config config/testing/vitest.config.simple.ts",
    "test:e2e": "playwright test",
    "test:e2e:quick": "playwright test tests/e2e/quick-check.spec.ts --project=chromium --reporter=line",
    "test:e2e:comprehensive": "tsx tests/e2e/test-runner.ts --category=all --browser=chromium",
    "test:e2e:basic": "tsx tests/e2e/test-runner.ts --category=basic --browser=chromium",
    "test:e2e:ai": "tsx tests/e2e/test-runner.ts --category=ai --browser=chromium",
    "test:e2e:performance": "tsx tests/e2e/test-runner.ts --category=performance --browser=chromium",
    "test:e2e:visual": "tsx tests/e2e/test-runner.ts --category=visual --browser=chromium",
    "test:e2e:headed": "tsx tests/e2e/test-runner.ts --category=basic --browser=chromium --headed",
    "test:e2e:cross-browser": "tsx tests/e2e/test-runner.ts --category=basic --browser=all",
    "test:e2e:ci": "playwright test tests/e2e/ --reporter=json,github --output-dir=test-results",
    "test:automation": "node scripts/test/test-automation-optimizer.js",
    "test:automation:quick": "npm run test:quick && npm run test:e2e:quick",
    "lighthouse:local": "cross-env NODE_ENV=production npm run build && npm run start & sleep 5 && lhci collect --url=http://localhost:3000 && kill %1",
    "lighthouse:dev": "lhci collect --url=http://localhost:3000",
    "lighthouse:analyze": "lhci collect --url=http://localhost:3000 && node -e \"console.log('📊 Lighthouse 결과 분석...'); const fs=require('fs'); const results=JSON.parse(fs.readFileSync('.lighthouseci/lhr-localhost_3000_-2024-12-31_00-00-00.json')); console.log('⚡ Performance:', Math.round(results.categories.performance.score*100)+'%'); console.log('🎯 LCP:', Math.round(results.audits['largest-contentful-paint'].numericValue)+'ms'); console.log('📈 CLS:', results.audits['cumulative-layout-shift'].numericValue);\"",
    "performance:monitor": "npm run lighthouse:dev && npm run test -- box-muller-cache-performance.test.ts",
    "performance:regression": "npm run lighthouse:local && node -e \"const fs=require('fs'); const glob=require('glob'); const files=glob.sync('.lighthouseci/lhr-*.json'); files.forEach(f=>{const r=JSON.parse(fs.readFileSync(f)); const perf=Math.round(r.categories.performance.score*100); console.log('📊',f.split('/').pop(),'Performance:',perf+'%'); if(perf<90) process.exit(1);});\"",
    "performance:alerts": "node scripts/performance/performance-alert-system.js",
    "performance:alerts:local": "cross-env NEXT_PUBLIC_APP_URL=http://localhost:3000 npm run performance:alerts",
    "performance:alerts:dev": "npm run dev & sleep 10 && npm run performance:alerts:local && pkill -f 'next dev'",
    "performance:alerts:full": "npm run lighthouse:local && npm run performance:alerts",
    "performance:monitor:v2": "npm run lighthouse:dev && npm run performance:alerts:local",
    "type-check": "node scripts/dev/tsc-wrapper.js --noEmit",
    "prepare": "husky || true",
    "validate": "npm run type-check && npm run lint:quick",
    "validate:all": "npm run type-check && npm run lint && npm run test",
    "validate:fast": "npm run type-check && npm run lint:ultra && npm run test:quick",
    "monitor:memory": "node scripts/memory-monitor.js",
    "monitor:memory:dev": "cross-env NODE_OPTIONS='--trace-gc --max-old-space-size=4096' npm run dev",
    "monitor:memory:build": "cross-env NODE_OPTIONS='--trace-gc --max-old-space-size=2048' npm run build",
    "validate:env": "node scripts/validate-env.js",
    "deploy:check": "npm run validate:env && npm run type-check && npm run test:quick",
    "clean": "rm -rf .next node_modules/.cache",
    "clean:all": "rm -rf .next node_modules package-lock.json && npm install",
    "clean:eslint": "node scripts/clean-eslint-results.js",
    "deps:check": "npm list | grep -E \"(UNMET|missing:)\" || echo 'All dependencies satisfied'",
    "deps:update": "npm update && npm audit fix",
    "docs:generate": "typedoc --out docs/api src",
    "ci": "npm run validate:all",
    "health:check": "node scripts/health-check.js",
    "bundle:analyze": "cross-env BUNDLE_ANALYZE=browser npm run build",
    "git:pre-commit": "lint-staged",
    "git:pre-push": "npm run validate",
    "git:status": "bash scripts/git/check-push-status.sh",
    "git:push": "git push",
    "git:push:force": "HUSKY=0 git push --no-verify",
    "docs:update": "node scripts/git/update-docs.js",
    "docs:changelog": "node scripts/git/update-changelog.js",
    "docs:readme": "node scripts/git/update-readme.js",
    "docs:auto": "node scripts/git/update-docs.js --commit",
    "docker:build": "docker build -t openmanager-vibe-v5 .",
    "docker:run": "docker run -p 3000:3000 openmanager-vibe-v5",
    "docker:compose": "docker-compose up",
    "db:migrate": "prisma migrate dev",
    "db:push": "prisma db push",
    "db:generate": "prisma generate",
    "db:studio": "prisma studio",
    "gcp:deploy": "bash scripts/deployment/deploy-all.sh",
    "gcp:deploy:nlp": "bash scripts/deployment/deploy-korean-nlp.sh",
    "gcp:deploy:ml": "bash scripts/deployment/deploy-ml-analytics.sh",
    "gcp:deploy:ai": "bash scripts/deployment/deploy-unified-ai.sh",
    "gcp:logs": "gcloud functions logs read --limit 50",
    "vercel:dev": "vercel dev",
    "vercel:build": "vercel build",
    "vercel:deploy": "vercel --prod",
    "mcp:reset": "bash scripts/mcp/reset.sh",
    "mcp:test": "node scripts/mcp/test-connection.js",
    "mock:status": "node scripts/check-mock-status.js",
    "mock:stats": "node scripts/mock-stats.js",
    "check:usage": "node scripts/check-free-tier-usage.js",
    "perf:analyze": "node scripts/performance/core-web-vitals-analysis.js",
    "perf:report": "node scripts/performance/report.js",
    "perf:react-analyze": "node scripts/performance/simple-react-analyzer.js",
    "perf:react-optimize": "node scripts/performance/apply-react-optimizations.js",
    "perf:react-optimize:dry": "node scripts/performance/apply-react-optimizations.js --dry-run",
    "perf:lint-benchmark": "node scripts/performance/lint-benchmark.js",
    "perf:precommit-benchmark": "node scripts/performance/precommit-benchmark.js",
    "perf:all-benchmarks": "npm run perf:lint-benchmark && npm run perf:precommit-benchmark",
    "perf:quick": "node scripts/performance/quick-benchmark.js",
    "security:audit": "npm audit --audit-level=moderate && claude /security-review && node scripts/env/check-hardcoded-secrets.js",
    "ai:context-check": "node scripts/check-ai-context.js",
    "copilot:setup": "npm run ai:context-update && echo 'GitHub Copilot 컨텍스트 설정 완료'",
    "copilot:check": "node scripts/check-ai-context.js",
    "copilot:status": "echo '🤖 AI 도구 상태:' && echo '  📍 메인: Claude Code (WSL)' && echo '  🔧 서브: gemini-cli, codex-cli, qwen-cli' && echo '  💡 보조: GitHub Copilot (VSCode)' && npm run ai:context-check",
    "copilot:report": "tsx scripts/copilot/generate-copilot-report.ts",
    "security:quick": "npm audit --audit-level=high && claude /security-review",
    "security:report": "npm audit --json > reports/npm-audit-$(date +%Y%m%d).json && claude /security-review > reports/security-review-$(date +%Y%m%d).txt",
    "security:fix": "npm audit fix && eslint --fix src/ --ext .ts,.tsx",
    "security:pr-review": "claude /security-review && npm audit --audit-level=moderate",
    "security:check-types": "echo '🔍 TypeScript any 타입 검사 중...' && grep -r ': any' src/ --include='*.ts' --include='*.tsx' | wc -l | awk '{print \"발견된 any 타입: \" $1 \"개\"}'",
    "security:check-types-strict": "eslint --ext .ts,.tsx --rule '@typescript-eslint/no-explicit-any: error' src/ --max-warnings=0",
    "security:check-all": "npm run security:audit && npm run security:check-types",
    "workspace:clean": "npm run clean:all && npm install",
    "workspace:reset": "rm -rf node_modules .next package-lock.json && npm install && npm run build",
    "debug:typescript": "tsc --listFiles",
    "debug:imports": "madge --circular src",
    "update:deps": "npx npm-check-updates -u && npm install",
    "env:check": "node scripts/check-env.js",
    "env:generate": "node scripts/generate-env.js",
    "fix:clock": "bash scripts/fix-clock-sync.sh",
    "fix:auth": "npm run fix:clock && npm run clean:auth",
    "clean:auth": "node -e \"if(typeof window !== 'undefined'){localStorage.removeItem('sb-auth-token');localStorage.removeItem('auth_verified');console.log('Auth tokens cleared')}\"",
    "fix:any-types": "tsx scripts/fix-any-types.ts",
    "server:start": "tsx scripts/smart-server-manager.ts start",
    "server:stop": "tsx scripts/smart-server-manager.ts stop",
    "server:status": "tsx scripts/smart-server-manager.ts status",
    "server:monitor": "tsx scripts/smart-server-manager.ts monitor",
    "server:test:start": "tsx scripts/smart-server-manager.ts start test-server",
    "server:test:stop": "tsx scripts/smart-server-manager.ts stop test-server",
    "server:e2e:start": "tsx scripts/smart-server-manager.ts start e2e-server",
    "server:e2e:stop": "tsx scripts/smart-server-manager.ts stop e2e-server",
    "dev:tmux": "bash scripts/dev-tmux.sh",
    "dev:tmux:enhanced": "bash scripts/dev-tmux-enhanced.sh",
    "dev:tmux:test": "AUTO_START_TEST_SERVER=true bash scripts/dev-tmux-enhanced.sh",
    "dev:tmux:clean": "tmux kill-session -t openmanager-dev",
    "commit:v3": "node scripts/smart-commit.js"
  },
  "dependencies": {
    "@emotion/is-prop-valid": "^1.3.1",
    "@faker-js/faker": "^9.9.0",
    "@google/generative-ai": "^0.24.1",
    "@octokit/rest": "^21.0.2",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-popover": "^1.1.4",
    "@radix-ui/react-progress": "^1.1.1",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.14",
    "@radix-ui/react-tooltip": "^1.1.6",
    "@supabase/ssr": "^0.5.2",
    "@supabase/supabase-js": "^2.48.0",
    "@tanstack/react-query": "^5.66.1",
    "@tanstack/react-query-devtools": "^5.66.1",
    "@use-gesture/react": "^10.3.1",
    "@vercel/analytics": "^1.5.0",
    "@vercel/kv": "^2.0.0",
    "@vercel/speed-insights": "^1.2.0",
    "ajv": "^8.17.1",
    "axios": "^1.7.3",
    "bcryptjs": "^2.4.3",
    "chart.js": "^4.5.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "crypto-js": "^4.2.0",
    "date-fns": "^3.6.0",
    "dotenv": "^16.6.1",
    "embla-carousel-react": "^8.1.8",
    "gray-matter": "^4.0.3",
    "input-otp": "^1.2.4",
    "jose": "^5.6.3",
    "lucide-react": "^0.441.0",
    "mdast-util-toc": "^7.1.0",
    "next": "^15.4.5",
    "next-auth": "5.0.0-beta.25",
    "next-intl": "^3.17.2",
    "next-mdx-remote": "^5.0.0",
    "next-themes": "^0.3.0",
    "pg": "^8.12.0",
    "prismjs": "^1.29.0",
    "react": "18.3.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "18.3.1",
    "react-error-boundary": "^4.0.13",
    "react-hook-form": "^7.52.2",
    "react-hot-toast": "^2.4.1",
    "react-hotkeys-hook": "^4.5.0",
    "react-intersection-observer": "^9.13.0",
    "react-markdown": "^9.0.1",
    "react-resizable-panels": "^2.0.23",
    "react-use": "^17.5.1",
    "react-wrap-balancer": "^1.1.1",
    "reading-time": "^1.5.0",
    "recharts": "^2.12.7",
    "rehype-autolink-headings": "^7.1.0",
    "rehype-code-titles": "^1.2.0",
    "rehype-pretty-code": "^0.13.2",
    "rehype-slug": "^6.0.0",
    "remark": "^15.0.1",
    "remark-gfm": "^4.0.0",
    "rxjs": "^7.8.1",
    "sharp": "^0.33.4",
    "shiki": "^1.12.1",
    "socket.io": "^4.8.0",
    "socket.io-client": "^4.8.0",
    "sonner": "^1.5.0",
    "swr": "^2.2.5",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "ts-node": "^10.9.2",
    "unist-builder": "^4.0.0",
    "unist-util-visit": "^5.0.0",
    "use-debounce": "^10.0.3",
    "usehooks-ts": "^3.1.0",
    "uuid": "^10.0.0",
    "vaul": "^0.9.1",
    "winston": "^3.14.0",
    "zod": "^3.23.8",
    "zustand": "^4.5.4"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.3.1",
    "@eslint/js": "^9.17.0",
    "@executeautomation/playwright-mcp-server": "^1.0.6",
    "@next/bundle-analyzer": "^15.5.0",
    "@playwright/test": "^1.49.1",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.1.0",
    "@testing-library/user-event": "^14.5.2",
    "@types/crypto-js": "^4.2.2",
    "@types/jest": "^29.5.13",
    "@types/mdast": "^4.0.4",
    "@types/node": "^22.5.0",
    "@types/pg": "^8.11.6",
    "@types/prismjs": "^1.26.4",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@types/socket.io": "^3.0.2",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^8.39.1",
    "@typescript-eslint/parser": "^8.39.1",
    "@vitejs/plugin-react": "^4.3.2",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "autoprefixer": "^10.4.20",
    "cross-env": "^7.0.3",
    "eslint": "^9.17.0",
    "eslint_d": "^14.3.0",
    "eslint-config-next": "^15.4.6",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-k6-linting-rules": "^1.0.2",
    "eslint-plugin-prettier": "^5.5.4",
    "eslint-plugin-react-hooks": "^5.2.0",
    "glob": "^11.0.0",
    "globals": "^16.3.0",
    "husky": "^9.1.7",
    "jsdom": "^26.0.0",
    "lint-staged": "^16.1.2",
    "playwright": "^1.54.1",
    "postcss": "^8.4.49",
    "prettier": "^3.4.2",
    "prettier-plugin-tailwindcss": "^0.6.14",
    "tailwindcss": "^3.4.17",
    "tsx": "^4.19.2",
    "typescript": "^5.7.2",
    "typescript-eslint": "^8.39.1",
    "vite": "^6.3.5",
    "vitest": "^3.2.4"
  },
  "engines": {
    "node": "22.x",
    "npm": ">=10.0.0"
  },
  "packageManager": "npm@10.9.2",
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --cache --cache-location /tmp/lint-cache/eslint-precommit/ --max-warnings=20 --fix",
      "prettier --write"
    ],
    "*.{json,md,mdx,css,scss}": [
      "prettier --write"
    ]
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "pre-push": "npm run validate"
    }
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "prettier": {
    "semi": true,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5",
    "printWidth": 80,
    "bracketSpacing": true,
    "arrowParens": "always",
    "endOfLine": "lf",
    "plugins": [
      "prettier-plugin-tailwindcss"
    ]
  }
}
