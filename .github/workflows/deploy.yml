name: 🚀 Manual Deploy to Vercel

# 수동 배포 전용 워크플로 (긴급 배포시 사용)
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'preview'
        type: choice
        options:
        - preview
        - production
      skip_tests:
        description: 'Skip tests (emergency deploy only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  emergency-deploy:
    name: 🚨 Emergency Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: ${{ inputs.environment }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund --silent
        env:
          CI: true
        
      - name: 🔍 Quick health check
        run: |
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Available memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
          
      - name: 🧪 Quick tests (unless skipped)
        if: inputs.skip_tests == false
        run: |
          echo "🔍 Running quick validation tests..."
          npm run lint || echo "⚠️ Lint issues found but continuing..."
          npm run type-check
        env:
          CI: true
          SKIP_ENV_VALIDATION: true
          
      - name: 🏗️ Build
        run: npm run build
        env:
          CI: true
          SKIP_ENV_VALIDATION: true
          NODE_ENV: production
          
      - name: 🚀 Deploy to Vercel
        id: deploy
        run: |
          npm install --global vercel@latest
          if [ "${{ inputs.environment }}" = "production" ]; then
            vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
          else
            vercel --token=${{ secrets.VERCEL_TOKEN }} --yes
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          
      - name: 📢 Deployment status
        if: always()
        run: |
          if [ "${{ steps.deploy.outcome }}" = "success" ]; then
            echo "✅ Emergency deployment successful!"
            echo "🌍 Environment: ${{ inputs.environment }}"
            echo "⚠️ This was an emergency deployment - please run full CI/CD pipeline for next deploy"
          else
            echo "❌ Emergency deployment failed. Check logs above."
            exit 1
          fi
          
      - name: 🏥 Post-deploy health check
        if: inputs.environment == 'production' && success()
        run: |
          echo "🔍 Checking production health after emergency deploy..."
          sleep 30
          curl -f https://openmanager-vibe-v5.vercel.app/api/health || exit 1
          echo "✅ Production health check passed!" 