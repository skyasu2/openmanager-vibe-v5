name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22.15.1'
  PNPM_VERSION: '8'

jobs:
  # TypeScript ÌÉÄÏûÖ Ï≤¥ÌÅ¨
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run type check
        run: npm run type-check

  # Î¶∞Ìä∏ Ï≤¥ÌÅ¨
  lint:
    name: ESLint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint:strict

  # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    env:
      USE_REAL_REDIS: false
      SKIP_ENV_VALIDATION: true
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:quick
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results.json

  # Î≥¥Ïïà Í∞êÏÇ¨
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm run security:audit
        continue-on-error: true
      
      - name: Check for any types
        run: npm run security:check-types

  # ÎπåÎìú Ï≤¥ÌÅ¨
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [type-check, lint, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
      
      - name: Check build size
        run: |
          echo "Build completed successfully"
          du -sh .next

  # Lighthouse CI (ÏÑ†ÌÉùÏÇ¨Ìï≠)
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/dashboard
          budgetPath: ./lighthouse-budget.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Î∞∞Ìè¨ Ï§ÄÎπÑ Ï≤¥ÌÅ¨
  deploy-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Check deployment readiness
        run: |
          echo "‚úÖ TypeScript: 0 errors"
          echo "‚úÖ Tests: Passed"
          echo "‚úÖ Build: Successful"
          echo "‚úÖ Security: Checked"
          echo "üöÄ Ready for deployment!"