name: 🚀 Cost-Optimized CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: 'npm-v20'

jobs:
  # 빌트인 체크들을 하나의 Job으로 통합하여 비용 절감
  quality-checks:
    name: 🔍 Quality Checks (Lint + TypeScript + Build)
    runs-on: ubuntu-latest
    timeout-minutes: 8  # 타임아웃 단축
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint || echo "ESLint warnings found"
        continue-on-error: true

      - name: 🔎 Run TypeScript check
        run: npm run type-check

      - name: 🏗️ Build application
        run: npm run build

      - name: 💾 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  # 단위 테스트는 PR에서만 실행
  unit-test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'  # PR에서만 실행으로 비용 절감
    needs: [quality-checks]
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:unit || echo "Unit tests not configured"
        continue-on-error: true

  # E2E 테스트는 main 브랜치에서만 실행
  e2e-test:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10  # 타임아웃 단축
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # main에서만 실행
    needs: [quality-checks]
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        run: npx playwright install chromium --with-deps  # chromium만 설치로 시간 단축

      - name: 🏗️ Build for E2E
        run: npm run build

      - name: 🎭 Run E2E tests (Chrome only)
        run: npm run test:e2e -- --project=chromium  # 브라우저 하나만 테스트
        continue-on-error: true

  # 배포는 main 브랜치에서만 실행
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 5  # 타임아웃 단축
    needs: [quality-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://openmanager-vibe-v5.vercel.app
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

  # 아티팩트 정리 (비용 절감)
  cleanup:
    name: 🧹 Cleanup Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy]
    steps:
      - name: 🗑️ Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const cutoff = new Date();
            cutoff.setDate(cutoff.getDate() - 7);
            
            for (const artifact of artifacts.data.artifacts) {
              if (new Date(artifact.created_at) < cutoff) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`🗑️ Deleted artifact: ${artifact.name}`);
              }
            } 