name: 🚀 Deploy to Vercel (Stable Version)

on:
  # 검증된 안정 배포 방식 - daa02c8 참조
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # 1. 빌드 테스트
  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

  # 2. Vercel 배포 (개인 계정용 - 간단한 방식)
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build-test
    timeout-minutes: 10
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
      production-url: ${{ steps.deploy.outputs.production-url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Deploy to Vercel
      id: deploy
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "🚀 Deploying to production..."
          URL=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)
          echo "production-url=$URL" >> $GITHUB_OUTPUT
        else
          echo "🚀 Deploying preview..."
          URL=$(vercel --token=${{ secrets.VERCEL_TOKEN }} --yes)
          echo "preview-url=$URL" >> $GITHUB_OUTPUT
        fi
        echo "Deployed to: $URL"

  # 3. 헬스체크
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: deploy
    timeout-minutes: 5
    steps:
    - name: Wait for deployment
      run: sleep 30

    - name: Health Check
      run: |
        URL="${{ needs.deploy.outputs.production-url || needs.deploy.outputs.preview-url }}"
        echo "Testing health endpoint: $URL/api/health"

        HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "$URL/api/health" || echo "000")
        HTTP_CODE="${HEALTH_RESPONSE: -3}"

        if [ "$HTTP_CODE" = "200" ]; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed with code: $HTTP_CODE"
          echo "Response: $HEALTH_RESPONSE"
        fi

  # 4. 알림
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [deploy, health-check]
    if: always()
    steps:
    - name: Deployment Success
      if: needs.health-check.result == 'success'
      run: |
        URL="${{ needs.deploy.outputs.production-url || needs.deploy.outputs.preview-url }}"
        echo "🎉 Deployment successful!"
        echo "URL: $URL"
        echo "✅ All health checks passed"

    - name: Deployment Failure
      if: needs.health-check.result == 'failure'
      run: |
        echo "💥 Deployment or health check failed!"
        echo "Check the logs above for details" 