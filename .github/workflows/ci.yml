name: 🚀 OpenManager v5 - Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deploy environment'
        required: false
        default: 'preview'
        type: choice
        options:
        - preview
        - production

env:
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1
  SKIP_ENV_VALIDATION: true
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # 🧪 병렬 실행: 린트, 타입체크, 유닛테스트
  quality-checks:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        check: [lint, type-check, unit-test]
    
    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund --silent
      
    - name: 🔍 Run lint
      if: matrix.check == 'lint'
      run: npm run lint
      
    - name: 🔍 Run type check
      if: matrix.check == 'type-check'
      run: npm run type-check
      
    - name: 🧪 Run unit tests
      if: matrix.check == 'unit-test'
      run: npm run test:unit:coverage
      
    - name: 📊 Upload coverage
      if: matrix.check == 'unit-test' && github.event_name == 'pull_request'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # 🏗️ 빌드 최적화
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-checks
    
    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund --silent
      
    # 빌드 캐시 복원
    - name: 🗄️ Restore build cache
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
          .next/standalone
          .next/static
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
          ${{ runner.os }}-nextjs-
        
    - name: 🏗️ Build application
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output-${{ github.sha }}
        path: |
          .next
          !.next/cache
        retention-days: 2
        compression-level: 6

  # 🧪 E2E 테스트 (조건부 실행)
  e2e-tests:
    name: 🧪 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci --prefer-offline --no-audit --no-fund --silent
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output-${{ github.sha }}
        path: .next
        
    - name: 🎭 Install Playwright
      run: npx playwright install --with-deps chromium
      
    - name: 🧪 Run E2E tests
      run: npm run test:e2e
      env:
        CI: true
        
    - name: 📊 Upload E2E results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-results
        path: |
          test-results/
          playwright-report/
        retention-days: 3

  # 🚀 배포 (조건부)
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, e2e-tests]
    if: always() && needs.build.result == 'success' && (needs.e2e-tests.result == 'success' || needs.e2e-tests.result == 'skipped') && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output-${{ github.sha }}
        path: .next
        
    - name: 🚀 Deploy to Vercel
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}
        working-directory: ./
        
    - name: 💬 Comment PR with deployment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **배포 완료!**\n\n📖 미리보기: ${{ steps.deploy.outputs.preview-url }}\n\n✅ 빌드 성공\n🧪 테스트 통과`
          })

  # 🏥 헬스체크 (프로덕션만)
  health-check:
    name: 🏥 Production Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: deploy
    if: github.ref == 'refs/heads/main' && needs.deploy.result == 'success'
    
    steps:
    - name: 🏥 Check deployment health
      run: |
        echo "🔍 Checking production deployment health..."
        sleep 30
        
        # 헬스체크 API 호출
        response=$(curl -s -w "%{http_code}" https://openmanager-vibe-v5.vercel.app/api/health)
        http_code=${response: -3}
        
        if [ "$http_code" -eq 200 ]; then
          echo "✅ Health check passed! (HTTP $http_code)"
        else
          echo "❌ Health check failed! (HTTP $http_code)"
          exit 1
        fi
        
    - name: 📊 Performance lighthouse check
      if: success()
      run: |
        npx lighthouse-ci autorun --upload.target=temporary-public-storage || echo "⚠️ Lighthouse check failed but continuing..."

  # 🧹 Cleanup (성공 시에만)
  cleanup:
    name: 🧹 Cleanup Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [deploy, health-check]
    if: always() && (needs.deploy.result == 'success' || needs.health-check.result == 'success')
    
    steps:
    - name: 🧹 Remove old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          // 7일 이상 된 아티팩트 삭제
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
          
          for (const artifact of artifacts.data.artifacts) {
            if (new Date(artifact.created_at) < sevenDaysAgo) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`🗑️ Deleted artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`⚠️ Failed to delete artifact: ${artifact.name}`);
              }
            }
          } 