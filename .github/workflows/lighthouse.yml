name: Lighthouse Performance Audit

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # 주간 정기 실행 (매주 월요일 오전 9시 KST)
  schedule:
    - cron: '0 0 * * 1'

jobs:
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            .npmrc

      - name: Install Dependencies (429 Error Resilient)
        run: |
          echo "📦 Lighthouse NPM 의존성 설치..."
          
          # Lighthouse용 retry 로직
          for attempt in 1 2; do
            echo "🔄 NPM CI 시도 $attempt/2..."
            
            if timeout 400 npm ci; then  # 7분 타임아웃 (Lighthouse 환경)
              echo "✅ NPM CI 성공!"
              break
            else
              if [ $attempt -eq 2 ]; then
                echo "❌ NPM CI 최종 실패 - Lighthouse 스킵"
                exit 1
              else
                echo "⏰ 25초 대기 후 재시도..."
                sleep 25
                npm cache clean --force || true
              fi
            fi
          done

      - name: Wait for Vercel Deployment
        id: vercel-deployment
        run: |
          echo "Waiting for Vercel deployment..."
          # Vercel 배포 완료 대기 (최대 10분)
          timeout 600 bash -c '
            until curl -sf https://openmanager-vibe-v5.vercel.app > /dev/null; do
              echo "Waiting for deployment..."
              sleep 30
            done
          '
          echo "deployment_url=https://openmanager-vibe-v5.vercel.app" >> $GITHUB_OUTPUT

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI with Regression Detection
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          echo "🚀 Lighthouse CI 시작 - Phase 1 완료 검증"
          echo "📊 Box-Muller Transform 캐시 성능 테스트 포함"
          
          # 🎯 설정 파일 확인
          if [ -f lighthouserc.js ]; then
            echo "✅ Lighthouse 설정 파일 발견"
          else
            echo "❌ Lighthouse 설정 파일 누락"
            exit 1
          fi
          
          # 📈 성능 감사 실행 (3회 평균)
          lhci collect --url=${{ steps.vercel-deployment.outputs.deployment_url }}
          
          # 🔍 회귀 감지 및 업로드
          lhci assert --preset=lighthouse:recommended
          lhci upload
          
          echo "✅ Lighthouse CI 완료"

      - name: Performance Regression Analysis
        id: regression-check
        run: |
          echo "🔍 Phase 1 성능 회귀 감지 분석 시작"
          echo "📊 Box-Muller Transform 캐시 최적화 효과 검증"
          
          # 📈 Lighthouse 결과 분석
          RESULTS_PATH=".lighthouseci"
          if [ -d "$RESULTS_PATH" ]; then
            echo "✅ Lighthouse 결과 발견"
            
            # 🎯 성능 점수 추출 (JSON 파싱)
            PERF_SCORES=$(find $RESULTS_PATH -name "lhr-*.json" -exec jq -r '.categories.performance.score * 100' {} \; 2>/dev/null || echo "0")
            AVG_SCORE=$(echo "$PERF_SCORES" | awk '{sum+=$1; count++} END {if(count>0) print sum/count; else print 0}')
            
            # 📊 Core Web Vitals 추출
            LCP_VALUES=$(find $RESULTS_PATH -name "lhr-*.json" -exec jq -r '.audits."largest-contentful-paint".numericValue' {} \; 2>/dev/null || echo "0")
            CLS_VALUES=$(find $RESULTS_PATH -name "lhr-*.json" -exec jq -r '.audits."cumulative-layout-shift".numericValue' {} \; 2>/dev/null || echo "0")
            FCP_VALUES=$(find $RESULTS_PATH -name "lhr-*.json" -exec jq -r '.audits."first-contentful-paint".numericValue' {} \; 2>/dev/null || echo "0")
            
            AVG_LCP=$(echo "$LCP_VALUES" | awk '{sum+=$1; count++} END {if(count>0) print sum/count; else print 0}')
            AVG_CLS=$(echo "$CLS_VALUES" | awk '{sum+=$1; count++} END {if(count>0) print sum/count; else print 0}')
            AVG_FCP=$(echo "$FCP_VALUES" | awk '{sum+=$1; count++} END {if(count>0) print sum/count; else print 0}')
            
            # 🚨 회귀 감지 로직
            REGRESSION_DETECTED=false
            
            # Performance Score 임계값 체크 (< 90)
            if (( $(echo "$AVG_SCORE < 90" | bc -l 2>/dev/null || echo 0) )); then
              echo "❌ 성능 점수 회귀 감지: $AVG_SCORE < 90"
              REGRESSION_DETECTED=true
            fi
            
            # LCP 임계값 체크 (> 2500ms)
            if (( $(echo "$AVG_LCP > 2500" | bc -l 2>/dev/null || echo 0) )); then
              echo "❌ LCP 회귀 감지: ${AVG_LCP}ms > 2500ms"
              REGRESSION_DETECTED=true
            fi
            
            # CLS 임계값 체크 (> 0.1)
            if (( $(echo "$AVG_CLS > 0.1" | bc -l 2>/dev/null || echo 0) )); then
              echo "❌ CLS 회귀 감지: $AVG_CLS > 0.1"
              REGRESSION_DETECTED=true
            fi
            
            # FCP 임계값 체크 (> 1800ms)
            if (( $(echo "$AVG_FCP > 1800" | bc -l 2>/dev/null || echo 0) )); then
              echo "❌ FCP 회귀 감지: ${AVG_FCP}ms > 1800ms"
              REGRESSION_DETECTED=true
            fi
            
            # 📋 결과 요약 생성
            echo "## 🚀 Phase 1 Lighthouse 성능 분석 결과" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Box-Muller Transform 캐시 최적화 검증" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 메트릭 | 평균값 | 목표값 | 상태 |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|--------|--------|------|" >> $GITHUB_STEP_SUMMARY
            echo "| Performance Score | ${AVG_SCORE}% | ≥90% | $([ $(echo "$AVG_SCORE >= 90" | bc -l 2>/dev/null || echo 0) = 1 ] && echo "✅ 통과" || echo "❌ 개선 필요") |" >> $GITHUB_STEP_SUMMARY
            echo "| First Contentful Paint | ${AVG_FCP}ms | ≤1800ms | $([ $(echo "$AVG_FCP <= 1800" | bc -l 2>/dev/null || echo 0) = 1 ] && echo "✅ 통과" || echo "❌ 개선 필요") |" >> $GITHUB_STEP_SUMMARY
            echo "| Largest Contentful Paint | ${AVG_LCP}ms | ≤2500ms | $([ $(echo "$AVG_LCP <= 2500" | bc -l 2>/dev/null || echo 0) = 1 ] && echo "✅ 통과" || echo "❌ 개선 필요") |" >> $GITHUB_STEP_SUMMARY
            echo "| Cumulative Layout Shift | $AVG_CLS | ≤0.1 | $([ $(echo "$AVG_CLS <= 0.1" | bc -l 2>/dev/null || echo 0) = 1 ] && echo "✅ 통과" || echo "❌ 개선 필요") |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$REGRESSION_DETECTED" = true ]; then
              echo "### ⚠️ 성능 회귀 감지됨" >> $GITHUB_STEP_SUMMARY
              echo "다음 최적화를 고려하세요:" >> $GITHUB_STEP_SUMMARY
              echo "- Box-Muller Transform 캐시 히트율 확인" >> $GITHUB_STEP_SUMMARY
              echo "- 서버 메트릭 생성 로직 최적화" >> $GITHUB_STEP_SUMMARY
              echo "- Bundle 크기 및 불필요한 JavaScript 제거" >> $GITHUB_STEP_SUMMARY
              echo "- 이미지 최적화 및 lazy loading 적용" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "regression_detected=true" >> $GITHUB_OUTPUT
            else
              echo "### ✅ 성능 회귀 없음 - Phase 1 최적화 성공!" >> $GITHUB_STEP_SUMMARY
              echo "Box-Muller Transform LRU 캐시가 성능 목표를 달성했습니다." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "regression_detected=false" >> $GITHUB_OUTPUT
            fi
            
            echo "📊 상세 보고서는 Lighthouse CI 아티팩트에서 확인 가능합니다." >> $GITHUB_STEP_SUMMARY
            
          else
            echo "❌ Lighthouse 결과를 찾을 수 없습니다."
            echo "regression_detected=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Upload Lighthouse Results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

      # 🚨 성능 회귀 감지 시 워크플로우 실패 처리
      - name: Handle Performance Regression
        if: steps.regression-check.outputs.regression_detected == 'true'
        run: |
          echo "🚨 Phase 1 성능 회귀 감지됨!"
          echo "Box-Muller Transform LRU 캐시 최적화가 목표를 달성하지 못했습니다."
          echo ""
          echo "📋 즉시 해결 방안:"
          echo "1. 🔍 Box-Muller 캐시 히트율 분석: npm run test -- box-muller-cache-performance.test.ts"
          echo "2. 📊 서버 메트릭 API 응답 시간 확인: /api/servers/all"
          echo "3. 🧹 불필요한 JavaScript 제거 및 번들 최적화"
          echo "4. 🖼️ 이미지 최적화 및 WebP 전환"
          echo "5. ⚡ CSS 애니메이션 최적화 (Framer Motion 제거 효과 확인)"
          echo ""
          echo "📊 성능 목표:"
          echo "- Performance Score: ≥ 90%"
          echo "- First Contentful Paint: ≤ 1.8초"
          echo "- Largest Contentful Paint: ≤ 2.5초" 
          echo "- Cumulative Layout Shift: ≤ 0.1"
          echo ""
          echo "🔍 상세 분석은 Lighthouse CI 아티팩트를 참조하세요."
          exit 1

      # 🚀 Phase 2 성능 알림 시스템 실행
      - name: Advanced Performance Alert System
        id: performance-alerts
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          NEXT_PUBLIC_APP_URL: ${{ steps.vercel-deployment.outputs.deployment_url }}
        run: |
          echo "🚀 Phase 2 고급 성능 알림 시스템 시작..."
          echo "📊 Core Web Vitals + Box-Muller 캐시 + 웹훅 알림 통합"
          
          # Node.js로 고급 성능 알림 시스템 실행
          node scripts/performance/performance-alert-system.js
          
          echo "✅ 고급 성능 알림 시스템 완료"

      # ✅ 성능 회귀 없음 - 성공 알림 (호환성 유지)
      - name: Performance Success
        if: steps.regression-check.outputs.regression_detected == 'false'
        run: |
          echo "🎉 Phase 1 + Phase 2 성능 최적화 성공!"
          echo "✅ Box-Muller Transform LRU 캐시 + 실시간 모니터링이 모든 목표를 달성했습니다."
          echo "📊 Phase 2 고급 성능 알림 시스템이 정상적으로 작동 중입니다."

      # ⚠️ 일반적인 실패 알림 (이전 호환성)
      - name: Performance Alert  
        if: failure() && steps.regression-check.outputs.regression_detected != 'true'
        run: |
          echo "⚠️ Lighthouse 성능 테스트에서 예상치 못한 오류가 발생했습니다."
          echo "🔍 GitHub Actions 로그를 확인하고 다음을 검토하세요:"
          echo "- Vercel 배포 상태 및 접근성"
          echo "- Lighthouse CI 설정 파일 (lighthouserc.js)"
          echo "- 환경변수 및 토큰 설정"
          echo ""
          echo "📊 대안 모니터링:"
          echo "- Vercel Analytics: 실사용자 성능 데이터"
          echo "- Vercel Speed Insights: Core Web Vitals 추적"
