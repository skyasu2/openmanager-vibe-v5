name: Simple Deploy

# 🎯 Vercel 자동 배포를 위한 빌드 검증 + 품질 게이트
# - TypeScript/ESLint 에러 시 배포 차단 (베스트 프랙티스)
# - 환경변수 없이도 빌드 성공 (SKIP_ENV_VALIDATION)
# - CI가 main 브랜치 품질 보장

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            .npmrc

      - name: Install dependencies (429 Error Resilient)
        run: |
          echo "📦 Simple Deploy NPM 의존성 설치..."
          
          # 배포용 간단한 retry 로직
          for attempt in 1 2 3; do
            echo "🔄 NPM CI 시도 $attempt/3..."
            
            if timeout 500 npm ci; then  # 8분 타임아웃
              echo "✅ NPM CI 성공!"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "❌ NPM CI 최종 실패 - 배포 중단"
                exit 1
              else
                echo "⏰ 30초 대기 후 재시도..."
                sleep 30
                npm cache clean --force || true
              fi
            fi
          done

      - name: Build application
        run: npm run build
        env:
          # 🔧 빌드 환경변수 (안전한 기본값)
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          SKIP_ENV_VALIDATION: true
          NEXT_PUBLIC_APP_URL: https://openmanager-vibe-v5.vercel.app

          # 🗄️ Supabase 환경변수 (GitHub Secrets에서 설정 필요)
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'placeholder-key' }}

          # 💾 Memory-based 캐싱 시스템 설정
          MEMORY_CACHE_ENABLED: true
          MEMORY_CACHE_MAX_SIZE: 1000
          MEMORY_CACHE_TTL_SECONDS: 300

          # 🤖 AI 환경변수 (GitHub Secrets에서 설정 필요)
          GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY || 'placeholder-key' }}
          GOOGLE_AI_MODEL: gemini-1.5-flash
          GOOGLE_AI_BETA_MODE: true
          GOOGLE_AI_ENABLED: true

          # 🧠 학습 엔진 설정
          GEMINI_LEARNING_ENABLED: true
          CRON_SECRET: ${{ secrets.CRON_SECRET || 'placeholder-secret' }}

          # 🔄 Cron 작업 설정
          CRON_HEALTH_CHECK: true
          CRON_KEEP_ALIVE: true
          CRON_GEMINI_LEARNING: true

      - name: Type check (품질 게이트)
        run: npm run type-check
        # TypeScript 에러 발견 시 배포 차단 (베스트 프랙티스)

      - name: Lint check (품질 게이트)
        run: npm run lint:strict
        # ESLint 경고/에러 발견 시 배포 차단 (max-warnings=0)


    # Vercel이 자동으로 배포를 처리
