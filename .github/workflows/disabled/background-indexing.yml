name: 🔄 Background RAG Indexing

on:
  # 문서 변경 시 자동 실행
  push:
    paths:
      - 'docs/**'
      - 'public/**/*.json'
      - 'README.md'
      - 'CHANGELOG.md'
    branches:
      - main
      - develop

  # 수동 실행 허용
  workflow_dispatch:
    inputs:
      force_reindex:
        description: '강제 전체 재인덱싱'
        required: false
        default: 'false'
        type: boolean
      concurrency_limit:
        description: '동시 처리 수 (1-5)'
        required: false
        default: '3'
        type: string

  # 주기적 실행 (매일 새벽 2시)
  schedule:
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '22'
  CONCURRENCY_LIMIT: ${{ github.event.inputs.concurrency_limit || '3' }}
  BATCH_SIZE: '10'

jobs:
  background-indexing:
    name: 📚 RAG 문서 인덱싱
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📂 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # 변경 감지를 위해 이전 커밋도 포함

      - name: 📦 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 환경 변수 설정
        run: |
          echo "GOOGLE_AI_API_KEY=${{ secrets.GOOGLE_AI_API_KEY }}" >> $GITHUB_ENV
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV

      - name: 📋 의존성 설치
        run: |
          npm ci --production=false
          npm install -g ts-node typescript

      - name: 🔍 변경된 파일 감지
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.force_reindex }}" = "true" ]; then
            echo "force_reindex=true" >> $GITHUB_OUTPUT
            echo "🔄 강제 전체 재인덱싱 모드"
          else
            # 변경된 문서 파일 확인
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(md|json)$' | head -20 || echo "")
            if [ -n "$CHANGED_FILES" ]; then
              echo "changed_files<<EOF" >> $GITHUB_OUTPUT
              echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "📄 변경된 문서 파일:"
              echo "$CHANGED_FILES"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "📝 변경된 문서 파일이 없습니다."
            fi
          fi

      - name: 🚀 백그라운드 인덱싱 실행
        if: steps.changes.outputs.has_changes == 'true' || steps.changes.outputs.force_reindex == 'true'
        run: |
          echo "🔄 RAG 백그라운드 인덱싱 시작..."
          echo "📊 설정:"
          echo "  - 동시성 제한: $CONCURRENCY_LIMIT"
          echo "  - 배치 크기: $BATCH_SIZE"
          echo "  - 강제 재인덱싱: ${{ steps.changes.outputs.force_reindex || 'false' }}"
          
          # 인덱싱 실행
          npm run index:background
          
          # 결과 확인
          echo "✅ 인덱싱 완료"

      - name: 📊 Supabase 벡터 DB 상태 확인
        if: steps.changes.outputs.has_changes == 'true' || steps.changes.outputs.force_reindex == 'true'
        run: |
          echo "📊 벡터 DB 상태 확인..."
          # TODO: Supabase 함수를 통해 통계 조회
          # npx supabase functions invoke vector-stats
          echo "✅ 상태 확인 완료"

      - name: 🚨 실패 시 알림
        if: failure()
        run: |
          echo "❌ 백그라운드 인덱싱 실패"
          echo "📝 로그를 확인하여 문제를 파악해주세요."
          echo "🔧 일반적인 해결 방법:"
          echo "  1. Google AI API 키 확인"
          echo "  2. Supabase 연결 상태 확인"
          echo "  3. 메모리 부족 (큰 문서 처리 시)"

      - name: 📈 성능 메트릭 수집
        if: steps.changes.outputs.has_changes == 'true' || steps.changes.outputs.force_reindex == 'true'
        run: |
          echo "📈 성능 메트릭:"
          echo "  - 실행 시간: ${{ job.status == 'success' && '성공' || '실패' }}"
          echo "  - 메모리 사용량: $(free -h | awk '/^Mem:/ {print $3}')"
          echo "  - 처리된 파일 수: (인덱싱 로그에서 확인)"

  # 선택적: 인덱싱 품질 검증
  quality-check:
    name: 🎯 인덱싱 품질 검증
    runs-on: ubuntu-latest
    needs: background-indexing
    if: success()
    timeout-minutes: 10

    steps:
      - name: 📂 코드 체크아웃
        uses: actions/checkout@v4

      - name: 📦 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 의존성 설치
        run: npm ci --production=false

      - name: 🔧 환경 변수 설정
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV

      - name: 🧪 벡터 검색 품질 테스트
        run: |
          echo "🧪 벡터 검색 품질 테스트 실행..."
          # TODO: 실제 검색 품질 테스트 구현
          # npm run test:rag-quality
          echo "✅ 품질 테스트 완료"

      - name: 📊 벤치마크 실행
        run: |
          echo "📊 RAG 성능 벤치마크..."
          # TODO: 벤치마크 API 호출
          # curl -X GET "$SUPABASE_URL/rest/v1/rpc/vector_search_benchmark"
          echo "✅ 벤치마크 완료"

  # 선택적: Slack/Discord 알림
  notification:
    name: 📢 완료 알림
    runs-on: ubuntu-latest
    needs: [background-indexing, quality-check]
    if: always()

    steps:
      - name: 📢 결과 알림
        run: |
          if [ "${{ needs.background-indexing.result }}" = "success" ] && [ "${{ needs.quality-check.result }}" = "success" ]; then
            echo "✅ RAG 백그라운드 인덱싱 및 품질 검증 완료"
            # TODO: Slack/Discord 웹훅으로 성공 알림
          else
            echo "❌ RAG 백그라운드 인덱싱 또는 품질 검증 실패"
            echo "실패한 단계:"
            echo "  - 인덱싱: ${{ needs.background-indexing.result }}"
            echo "  - 품질 검증: ${{ needs.quality-check.result }}"
            # TODO: Slack/Discord 웹훅으로 실패 알림
          fi