# 🚀 OpenManager VIBE v5 - 테스트 자동화 CI/CD
# TDD 기반 품질 보증 파이프라인

name: 🧪 Test Automation Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # 매주 월요일 오전 9시 (KST) 정기 테스트 - 간소화
    - cron: '0 0 * * 1'

env:
  NODE_VERSION: '22.18.0'
  CI: true
  FORCE_COLOR: true

jobs:
  # 🔍 단위 테스트 (Vitest) - 간소화
  unit-tests:
    name: 🧪 Unit Tests (Vitest)
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build Project
        run: npm run build

      - name: 🧪 Run All Unit Tests
        run: npm run test -- --coverage

      - name: 📊 Upload Coverage (Main branch only)
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unit-tests
          name: unit-coverage

  # ⚡ 성능 테스트 - 메인 브랜치만 실행
  performance-tests:
    name: 🚀 Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build Project
        run: npm run build

      - name: 🚀 Run Performance Tests
        run: npm run test:performance

      - name: 📊 Performance Benchmark
        run: |
          echo "## 성능 테스트 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 테스트 실행 시간: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- Core Web Vitals 검증 완료" >> $GITHUB_STEP_SUMMARY

      - name: 📋 Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-report.json
          retention-days: 7

  # 🎭 E2E 테스트 (Playwright) - 간소화
  e2e-tests:
    name: 🎭 E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # 메인 브랜치와 PR만 실행
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🎭 Install Playwright (Chromium only)
        run: npx playwright install --with-deps chromium

      - name: 🏗️ Build Project
        run: npm run build

      - name: 🚀 Start Test Server
        run: |
          npm run dev &
          npx wait-on http://localhost:3000 --timeout 30000
        env:
          NODE_ENV: test
          PORT: 3000

      - name: 🎭 Run E2E Tests (Chromium only)
        run: npx playwright test --project=chromium --reporter=line

      - name: 📋 Upload E2E Results (Main branch only)
        if: failure() && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: playwright-report/
          retention-days: 3

  # 🔐 보안 테스트 - 간소화
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Run Security Audit
        run: |
          npm audit --audit-level=moderate

      - name: 🔒 TypeScript Any Types Check
        run: |
          echo "🔍 TypeScript any 타입 검사 중..."
          any_count=$(grep -r ': any' src/ --include='*.ts' --include='*.tsx' | wc -l || echo "0")
          echo "발견된 any 타입: ${any_count}개"
          if [ "$any_count" -gt 10 ]; then
            echo "❌ any 타입이 너무 많습니다 (${any_count}개 > 10개)"
            exit 1
          else
            echo "✅ any 타입 사용량이 적절합니다 (${any_count}개 ≤ 10개)"
          fi

      - name: 📊 Security Summary
        run: |
          echo "## 보안 검사 결과" >> $GITHUB_STEP_SUMMARY
          echo "- npm audit: 통과" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript any 타입: 제한 내" >> $GITHUB_STEP_SUMMARY

  # 📊 테스트 결과 통합 - 간소화
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, performance-tests, e2e-tests, security-tests]
    if: always() && github.ref == 'refs/heads/main'
    timeout-minutes: 2

    steps:
      - name: 📊 Simple Test Report
        run: |
          echo "## 🧪 테스트 결과 요약" >> $GITHUB_STEP_SUMMARY
          echo "- 단위 테스트: ${{ needs.unit-tests.result == 'success' && '✅ 통과' || '❌ 실패' }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E 테스트: ${{ needs.e2e-tests.result == 'success' && '✅ 통과' || needs.e2e-tests.result == 'skipped' && '⏭️ 건너뜀' || '❌ 실패' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 성능 테스트: ${{ needs.performance-tests.result == 'success' && '✅ 통과' || needs.performance-tests.result == 'skipped' && '⏭️ 건너뜀' || '❌ 실패' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 보안 테스트: ${{ needs.security-tests.result == 'success' && '✅ 통과' || needs.security-tests.result == 'skipped' && '⏭️ 건너뜀' || '❌ 실패' }}" >> $GITHUB_STEP_SUMMARY

  # 🚀 배포 준비 검증 - 간소화
  deployment-ready:
    name: 🚀 Deployment Ready
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 1

    steps:
      - name: ✅ Core Tests Passed
        if: needs.unit-tests.result == 'success'
        run: echo "🎉 핵심 테스트 통과! 배포 가능합니다."

      - name: ❌ Core Tests Failed
        if: needs.unit-tests.result != 'success'
        run: |
          echo "❌ 핵심 테스트 실패! 배포 차단됩니다."
          exit 1
