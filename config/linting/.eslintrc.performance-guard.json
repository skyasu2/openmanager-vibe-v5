{
  "extends": ["./config/linting/.eslintrc.json"],
  "plugins": ["@typescript-eslint", "prettier"],
  "rules": {
    "prettier/prettier": [
      "error",
      {
        "printWidth": 120
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-explicit-any": "warn",
    "no-console": "off",
    "react-hooks/exhaustive-deps": "warn",
    
    // 🛡️ Vercel Edge Runtime 성능 보호 규칙
    "no-restricted-syntax": [
      "error",
      {
        "selector": "CallExpression[callee.name='setInterval'] > Literal[value < 5000]",
        "message": "🚨 Performance Warning: setInterval with interval < 5000ms can cause issues in Vercel Edge Runtime. Use useUnifiedTimer or increase to 5000ms+"
      },
      {
        "selector": "CallExpression[callee.name='setTimeout'] > Literal[value < 1000]",
        "message": "⚠️ Performance Warning: setTimeout with delay < 1000ms may impact performance. Consider batching or delaying."
      }
    ],
    
    "no-restricted-globals": [
      "error",
      {
        "name": "setInterval",
        "message": "🚨 Direct setInterval usage detected. Use useUnifiedTimer hook for better performance in Edge Runtime."
      }
    ],
    
    // localStorage 과도한 접근 방지
    "no-restricted-properties": [
      "error",
      {
        "object": "localStorage",
        "message": "⚠️ Direct localStorage access detected. Consider using PerformanceUtils.createCachedLocalStorage() for better performance."
      }
    ]
  },
  
  // 개발 환경에서만 적용되는 추가 규칙
  "overrides": [
    {
      "files": ["src/hooks/**/*.ts", "src/hooks/**/*.tsx"],
      "rules": {
        "no-restricted-syntax": [
          "error",
          {
            "selector": "CallExpression[callee.name='setInterval'] > Literal[value < 30000]",
            "message": "🚨 Hook Performance Warning: Hooks should use intervals >= 30000ms (30 seconds) for optimal Edge Runtime performance"
          }
        ]
      }
    },
    {
      "files": ["src/**/*.ts", "src/**/*.tsx"],
      "excludedFiles": ["**/*.test.*", "**/*.spec.*"],
      "rules": {
        "prefer-const": [
          "error",
          {
            "destructuring": "any",
            "ignoreReadBeforeAssign": false
          }
        ]
      }
    }
  ]
}